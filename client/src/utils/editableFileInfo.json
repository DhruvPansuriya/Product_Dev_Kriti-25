{
    "FileData": {
      "name": "editableComponents.js",
      "path": "src/editableComponents.js",
      "type": "file",
      "content": "import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Settings, X } from 'lucide-react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PROJECTID, BACKEND_URL } from './config';\n\nconst EditModeContext = createContext();\n\nconst StyleEditor = ({ styles, onStyleChange, onClose, elementType }) => {\n  return (\n    `<div className=\"fixed top-40 right-0 bg-white p-4 shadow-lg rounded-lg border w-72 z-50\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"font-bold\">Edit ${elementType}</h3>\n        <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\n          <X size={20} />\n        </button>\n      </div>\n      <div className=\"space-y-4\">\n        ${[\n          { label: 'Background Color', type: 'color', property: 'backgroundColor', default: '#ffffff' },\n          { label: 'Text Color', type: 'color', property: 'color', default: '#000000' },\n          { label: 'Font Size (px)', type: 'number', property: 'fontSize', default: '16px' },\n          { label: 'Padding (px)', type: 'number', property: 'padding', default: '0px' },\n          { label: 'Margin (px)', type: 'number', property: 'margin', default: '0px' },\n          { label: 'Border Radius (px)', type: 'number', property: 'borderRadius', default: '0px' }\n        ].map(({ label, type, property, default: defaultValue }) => (\n          `<div key=\"${property}\">\n            <label className=\"block text-sm mb-1\">${label}</label>\n            <input\n              type=\"${type}\"\n              value={styles[${property}] || '${defaultValue}'}\n              onChange={(e) => onStyleChange('${property}', e.target.value)}\n              className=\"w-full p-2 border rounded\"\n            />\n          </div>`\n        )).join('')}\n      </div>\n    </div>`\n  );\n};\n\nconst makeEditable = (WrappedComponent) => {\n  return function EditableComponent(props) {\n    const { editMode, registerElement, updateElement } = useContext(EditModeContext);\n    const [showEditor, setShowEditor] = useState(false);\n    const elementId = props.id || uuidv4();\n    const [styles, setStyles] = useState(props.style || {});\n    const [content, setContent] = useState(props.children || '');\n\n    useEffect(() => {\n      if (editMode) {\n        registerElement(elementId, { styles, content });\n      }\n    }, [editMode]);\n\n    const handleStyleChange = (property, value) => {\n      const newStyles = { ...styles, [property]: value };\n      setStyles(newStyles);\n      updateElement(elementId, { styles: newStyles, content });\n    };\n\n    const handleContentChange = (e) => {\n      const newContent = e.target.innerText;\n      setContent(newContent);\n      updateElement(elementId, { styles, content: newContent });\n    };\n\n    if (!editMode) {\n      return <WrappedComponent {...props} style={styles}>{content || props.children}</WrappedComponent>;\n    }\n\n    return (\n      `<div className=\"relative group\">\n        <WrappedComponent\n          {...props}\n          style={styles}\n          contentEditable={typeof props.children === 'string'}\n          onInput={handleContentChange}\n          suppressContentEditableWarning={true}\n        >\n          {content || props.children}\n        </WrappedComponent>\n        <button className=\"absolute top-0 right-0 bg-blue-500 text-white p-1 rounded-bl z-50 opacity-0 group-hover:opacity-100\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setShowEditor(true);\n          }}>\n          <Settings size={16} />\n        </button>\n        {showEditor && (\n          <StyleEditor\n            styles={styles}\n            onStyleChange={handleStyleChange}\n            onClose={() => setShowEditor(false)}\n            elementType={WrappedComponent.displayName || 'Element'}\n          />\n        )}\n      </div>`\n    );\n  };\n};\n\nexport const EditModeProvider = ({ children }) => {\n  const [editMode, setEditMode] = useState(false);\n  const [elements, setElements] = useState({});\n\n  const registerElement = (id, data) => {\n    setElements((prev) => ({ ...prev, [id]: data }));\n  };\n\n  const updateElement = (id, data) => {\n    setElements((prev) => ({ ...prev, [id]: data }));\n  };\n\n  const handleSave = async () => {\n    console.log(\"Saving changes...\");\n  };\n\n  return (\n    `<EditModeContext.Provider value={{ editMode, registerElement, updateElement }}>\n      <div className=\"min-h-screen\">\n        <div className=\"fixed top-0 left-0 right-0 bg-white border-b px-4 py-2 flex justify-between items-center z-40\">\n          <h1 className=\"font-bold\">Page Editor</h1>\n          <label>\n            <input type=\"checkbox\" checked={editMode} onChange={(e) => setEditMode(e.target.checked)} /> Edit Mode\n          </label>\n          {editMode && <button onClick={handleSave} className=\"bg-blue-500 text-white px-4 py-2 rounded\">Save</button>}\n        </div>\n        <div className={editMode ? 'pt-16' : ''}>{children}</div>\n      </div>\n    </EditModeContext.Provider>`\n  );\n};\n\nexport const Editable = {\n  div: makeEditable((props) => <div {...props} />),\n  p: makeEditable((props) => <p {...props} />),\n  h1: makeEditable((props) => <h1 {...props} />),\n  nav: makeEditable((props) => <nav {...props} />),\n  ul: makeEditable((props) => <ul {...props} />),\n  li: makeEditable((props) => <li {...props} />),\n  a: makeEditable((props) => <a {...props} />),\n  main: makeEditable((props) => <main {...props} />),\n  input: makeEditable((props) => <input {...props} />)\n};"
    }
}
  