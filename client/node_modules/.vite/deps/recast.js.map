{
  "version": 3,
  "sources": ["browser-external:fs", "../../esprima/dist/esprima.js", "../../recast/parsers/esprima.js", "../../recast/lib/options.js", "../../recast/lib/mapping.js", "../../recast/lib/lines.js", "../../recast/lib/comments.js", "../../recast/lib/parser.js", "../../recast/lib/fast-path.js", "../../recast/lib/patcher.js", "../../recast/lib/printer.js", "../../recast/main.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar jsx_parser_1 = __webpack_require__(3);\n\tvar parser_1 = __webpack_require__(8);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var isModule = false;\n\t    if (options && typeof options.sourceType === 'string') {\n\t        isModule = (options.sourceType === 'module');\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var program = isModule ? parser.parseModule() : parser.parseScript();\n\t    var ast = program;\n\t    if (collectComment && commentHandler) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction parseModule(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'module';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseModule = parseModule;\n\tfunction parseScript(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'script';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseScript = parseScript;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '4.0.1';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = entry.node;\n\t                this.stack.pop();\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(metadata);\n\t        var leadingComments = this.findLeadingComments(metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    AwaitExpression: 'AwaitExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar character_1 = __webpack_require__(4);\n\tvar JSXNode = __webpack_require__(5);\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\tvar Node = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(8);\n\tvar token_1 = __webpack_require__(13);\n\tvar xhtml_entities_1 = __webpack_require__(14);\n\ttoken_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';\n\ttoken_1.TokenName[101 /* Text */] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = elementName;\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = elementName;\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = elementName;\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t        /* istanbul ignore next */\n\t        default:\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        return _super.call(this, code, options, delegate) || this;\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.line;\n\t        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: 8 /* StringLiteral */,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: 10 /* Template */,\n\t                value: '',\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: 100 /* Identifier */,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        return this.scanner.lex();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = {\n\t            type: 101 /* Text */,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.restoreState(state);\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === 7 /* Punctuator */ && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 100 /* Identifier */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 8 /* StringLiteral */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = element;\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = element;\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack[stack.length - 1];\n\t                    el.children.push(child);\n\t                    stack.pop();\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    JSXParser.prototype.isStartOfExpression = function () {\n\t        return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    /* tslint:disable:no-bitwise */\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-white-space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-line-terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\t/* tslint:disable:max-classes-per-file */\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\t/* tslint:disable:max-classes-per-file */\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = false;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar AsyncArrowFunctionExpression = (function () {\n\t    function AsyncArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = true;\n\t    }\n\t    return AsyncArrowFunctionExpression;\n\t}());\n\texports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\tvar AsyncFunctionDeclaration = (function () {\n\t    function AsyncFunctionDeclaration(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionDeclaration;\n\t}());\n\texports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\tvar AsyncFunctionExpression = (function () {\n\t    function AsyncFunctionExpression(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionExpression;\n\t}());\n\texports.AsyncFunctionExpression = AsyncFunctionExpression;\n\tvar AwaitExpression = (function () {\n\t    function AwaitExpression(argument) {\n\t        this.type = syntax_1.Syntax.AwaitExpression;\n\t        this.argument = argument;\n\t    }\n\t    return AwaitExpression;\n\t}());\n\texports.AwaitExpression = AwaitExpression;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar Module = (function () {\n\t    function Module(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'module';\n\t    }\n\t    return Module;\n\t}());\n\texports.Module = Module;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, pattern, flags) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = { pattern: pattern, flags: flags };\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar Script = (function () {\n\t    function Script(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'script';\n\t    }\n\t    return Script;\n\t}());\n\texports.Script = Script;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar messages_1 = __webpack_require__(11);\n\tvar Node = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar token_1 = __webpack_require__(13);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.lookahead = {\n\t            type: 2 /* EOF */,\n\t            value: '',\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0,\n\t            start: 0,\n\t            end: 0\n\t        };\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            isModule: false,\n\t            await: false,\n\t            allowIn: true,\n\t            allowStrictDirective: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: false\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.line;\n\t        var column = this.lastMarker.column + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.column + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === 4 /* Keyword */) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n\t            var column = token.start - lastMarkerLineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.line;\n\t            var column = this.lastMarker.column + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.line,\n\t                    column: this.startMarker.column\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.type === 9 /* RegularExpression */) {\n\t            var pattern = token.pattern;\n\t            var flags = token.flags;\n\t            t.regex = { pattern: pattern, flags: flags };\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        this.collectComments();\n\t        if (this.scanner.index !== this.startMarker.index) {\n\t            this.startMarker.index = this.scanner.index;\n\t            this.startMarker.line = this.scanner.lineNumber;\n\t            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        }\n\t        var next = this.scanner.lex();\n\t        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\n\t        if (next && this.context.strict && next.type === 3 /* Identifier */) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = 4 /* Keyword */;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== 2 /* EOF */) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.line,\n\t            column: this.startMarker.column\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token, lastLineStart) {\n\t        if (lastLineStart === void 0) { lastLineStart = 0; }\n\t        var column = token.start - token.lineStart;\n\t        var line = token.lineNumber;\n\t        if (column < 0) {\n\t            column += lastLineStart;\n\t            line--;\n\t        }\n\t        return {\n\t            index: token.start,\n\t            line: line,\n\t            column: column\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (marker, node) {\n\t        if (this.config.range) {\n\t            node.range = [marker.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                    offset: marker.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === 7 /* Punctuator */ && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === 7 /* Punctuator */ && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== 7 /* Punctuator */) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.line = this.startMarker.line;\n\t            this.lastMarker.column = this.startMarker.column;\n\t        }\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-primary-expression\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var token, raw;\n\t        switch (this.lookahead.type) {\n\t            case 3 /* Identifier */:\n\t                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 1 /* BooleanLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n\t                break;\n\t            case 5 /* NullLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(null, raw));\n\t                break;\n\t            case 10 /* Template */:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                switch (this.lookahead.value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n\t                        break;\n\t                    default:\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case 4 /* Keyword */:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                expr = this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-array-initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-object-initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = params.simple;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        var previousAwait = this.context.await;\n\t        this.context.allowYield = false;\n\t        this.context.await = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        this.context.await = previousAwait;\n\t        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key;\n\t        switch (token.type) {\n\t            case 8 /* StringLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 3 /* Identifier */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 4 /* Keyword */:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    key = this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                key = this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        var isAsync = false;\n\t        if (token.type === 3 /* Identifier */) {\n\t            var id = token.value;\n\t            this.nextToken();\n\t            computed = this.match('[');\n\t            isAsync = !this.hasLineTerminator && (id === 'async') &&\n\t                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n\t            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':') && !isAsync) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === 3 /* Identifier */) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== 10 /* Template */) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-grouping-operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: [],\n\t                async: false\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr],\n\t                    async: false\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.lookahead.type !== 2 /* EOF */) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match(')')) {\n\t                            this.nextToken();\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr],\n\t                                async: false\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: parameters,\n\t                                async: false\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === 3 /* Identifier */ ||\n\t            token.type === 4 /* Keyword */ ||\n\t            token.type === 1 /* BooleanLiteral */ ||\n\t            token.type === 5 /* NullLiteral */;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseAsyncArgument = function () {\n\t        var arg = this.parseAssignmentExpression();\n\t        this.context.firstCoverInitializedNameError = null;\n\t        return arg;\n\t    };\n\t    Parser.prototype.parseAsyncArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAsyncArgument);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var maybeAsync = this.matchContextualKeyword('async');\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t                if (asyncArrow && this.match('=>')) {\n\t                    for (var i = 0; i < args.length; ++i) {\n\t                        this.reinterpretExpressionAsPattern(args[i]);\n\t                    }\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: args,\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-update-expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-unary-operators\n\t    Parser.prototype.parseAwaitExpression = function () {\n\t        var node = this.createNode();\n\t        this.nextToken();\n\t        var argument = this.parseUnaryExpression();\n\t        return this.finalize(node, new Node.AwaitExpression(argument));\n\t    };\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else if (this.context.await && this.matchContextualKeyword('await')) {\n\t            expr = this.parseAwaitExpression();\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exp-operator\n\t    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n\t    // https://tc39.github.io/ecma262/#sec-additive-operators\n\t    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n\t    // https://tc39.github.io/ecma262/#sec-relational-operators\n\t    // https://tc39.github.io/ecma262/#sec-equality-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === 7 /* Punctuator */) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === 4 /* Keyword */) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token.value, right];\n\t            var precedences = [prec];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop();\n\t                    precedences.pop();\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                stack.push(this.nextToken().value);\n\t                precedences.push(prec);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            var lastMarker = markers.pop();\n\t            while (i > 1) {\n\t                var marker = markers.pop();\n\t                var lastLineStart = lastMarker && lastMarker.lineStart;\n\t                var node = this.startNode(marker, lastLineStart);\n\t                var operator = stack[i - 1];\n\t                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n\t                i -= 2;\n\t                lastMarker = marker;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-conditional-operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-assignment-operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectPattern:\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        var asyncArrow = false;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                asyncArrow = expr.async;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            simple: true,\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            simple: options.simple,\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\n\t                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {\n\t                    var arg = this.parsePrimaryExpression();\n\t                    this.reinterpretExpressionAsPattern(arg);\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: [arg],\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var isAsync = expr.async;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t                    this.context.allowStrictDirective = list.simple;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    var previousAwait = this.context.await;\n\t                    this.context.allowYield = true;\n\t                    this.context.await = isAsync;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = void 0;\n\t                    if (this.match('{')) {\n\t                        var previousAllowIn = this.context.allowIn;\n\t                        this.context.allowIn = true;\n\t                        body = this.parseFunctionSourceElements();\n\t                        this.context.allowIn = previousAllowIn;\n\t                    }\n\t                    else {\n\t                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    }\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :\n\t                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowStrictDirective = previousAllowStrictDirective;\n\t                    this.context.allowYield = previousAllowYield;\n\t                    this.context.await = previousAwait;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = expr;\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var operator = token.value;\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comma-operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === 4 /* Keyword */) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                if (this.match('=')) {\n\t                    this.nextToken();\n\t                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                }\n\t                else {\n\t                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n\t                }\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.restoreState(state);\n\t        return (next.type === 3 /* Identifier */) ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '[') ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '{') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'let') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-variable-statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === 4 /* Keyword */ && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== 3 /* Identifier */) {\n\t            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-empty-statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-expression-statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-if-statement\n\t    Parser.prototype.parseIfClause = function () {\n\t        if (this.context.strict && this.matchKeyword('function')) {\n\t            this.tolerateError(messages_1.Messages.StrictFunction);\n\t        }\n\t        return this.parseStatement();\n\t    };\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseIfClause();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseIfClause();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-do-while-statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-while-statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-for-statement\n\t    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-continue-statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            label = id;\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-break-statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t            label = id;\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-return-statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = (!this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||\n\t            this.lookahead.type === 8 /* StringLiteral */ ||\n\t            this.lookahead.type === 10 /* Template */;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-with-statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            body = this.parseStatement();\n\t        }\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-switch-statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-labelled-statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = expr;\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var body = void 0;\n\t            if (this.matchKeyword('class')) {\n\t                this.tolerateUnexpectedToken(this.lookahead);\n\t                body = this.parseClassDeclaration();\n\t            }\n\t            else if (this.matchKeyword('function')) {\n\t                var token = this.lookahead;\n\t                var declaration = this.parseFunctionDeclaration();\n\t                if (this.context.strict) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n\t                }\n\t                else if (declaration.generator) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n\t                }\n\t                body = declaration;\n\t            }\n\t            else {\n\t                body = this.parseStatement();\n\t            }\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, body);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-throw-statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-try-statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(param.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-debugger-statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement;\n\t        switch (this.lookahead.type) {\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t            case 10 /* Template */:\n\t            case 9 /* RegularExpression */:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case 3 /* Identifier */:\n\t                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n\t                break;\n\t            case 4 /* Keyword */:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                statement = this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-function-definitions\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t        options.params.push(param);\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            simple: true,\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                this.parseFormalParameter(options);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            simple: options.simple,\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.matchAsyncFunction = function () {\n\t        var match = this.matchContextualKeyword('async');\n\t        if (match) {\n\t            var state = this.scanner.saveState();\n\t            this.scanner.scanComments();\n\t            var next = this.scanner.lex();\n\t            this.scanner.restoreState(state);\n\t            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');\n\t        }\n\t        return match;\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== 8 /* StringLiteral */) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                if (!this.context.allowStrictDirective) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-method-definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case 3 /* Identifier */:\n\t            case 8 /* StringLiteral */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 4 /* Keyword */:\n\t                return true;\n\t            case 7 /* Punctuator */:\n\t                return token.value === '[';\n\t            default:\n\t                break;\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length > 0) {\n\t            this.tolerateError(messages_1.Messages.BadGetterArity);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length !== 1) {\n\t            this.tolerateError(messages_1.Messages.BadSetterArity);\n\t        }\n\t        else if (formalParameters.params[0] instanceof Node.RestElement) {\n\t            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case 7 /* Punctuator */:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case 4 /* Keyword */:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-class-definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind = '';\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        var isAsync = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {\n\t                var punctuator = this.lookahead.value;\n\t                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n\t                    isAsync = true;\n\t                    token = this.lookahead;\n\t                    key = this.parseObjectPropertyKey();\n\t                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {\n\t                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || (value && value.generator)) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-scripts\n\t    // https://tc39.github.io/ecma262/#sec-modules\n\t    Parser.prototype.parseModule = function () {\n\t        this.context.strict = true;\n\t        this.context.isModule = true;\n\t        this.scanner.isModule = true;\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Module(body));\n\t    };\n\t    Parser.prototype.parseScript = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Script(body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== 8 /* StringLiteral */) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === 8 /* StringLiteral */) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchContextualKeyword('async')) {\n\t                // export default async function f () {}\n\t                // export default async function () {}\n\t                // export default async x => x\n\t                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === 4 /* Keyword */) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else if (this.matchAsyncFunction()) {\n\t            var declaration = this.parseFunctionDeclaration();\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:max-classes-per-file */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    BadGetterArity: 'Getter must not have any formal parameters',\n\t    BadSetterArity: 'Setter must have exactly one formal parameter',\n\t    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n\t    ConstructorIsAsync: 'Class constructor may not be an async method',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n\t    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n\t    IllegalReturn: 'Illegal return statement',\n\t    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n\t    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n\t    MissingFromClause: 'Unexpected token',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /'\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar character_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(11);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.isModule = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    Scanner.prototype.saveState = function () {\n\t        return {\n\t            index: this.index,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart\n\t        };\n\t    };\n\t    Scanner.prototype.restoreState = function (state) {\n\t        this.index = state.index;\n\t        this.lineNumber = state.lineNumber;\n\t        this.lineStart = state.lineStart;\n\t    };\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    Scanner.prototype.tolerateUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C && !this.isModule) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = 4 /* Keyword */;\n\t        }\n\t        else if (id === 'null') {\n\t            type = 5 /* NullLiteral */;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = 1 /* BooleanLiteral */;\n\t        }\n\t        else {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {\n\t            var restore = this.index;\n\t            this.index = start;\n\t            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n\t            this.index = restore;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var start = this.index;\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 7 /* Punctuator */,\n\t            value: str,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var num = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt('0x' + num, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var num = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var num = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            num = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (!octal && num.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var num = '';\n\t        if (ch !== '.') {\n\t            num = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (num === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            num += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            num += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                num += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    num += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseFloat(num),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped_1 = this.scanHexEscape(ch);\n\t                                if (unescaped_1 === null) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped_1;\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            str += unescaped;\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 8 /* StringLiteral */,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped_2 = this.scanHexEscape(ch);\n\t                                if (unescaped_2 !== null) {\n\t                                    cooked += unescaped_2;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            cooked += unescaped;\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: 10 /* Template */,\n\t            value: this.source.slice(start + 1, this.index - rawOffset),\n\t            cooked: cooked,\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        return str.substr(1, str.length - 2);\n\t    };\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    var char = this.scanHexEscape('u');\n\t                    if (char !== null) {\n\t                        flags += char;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return flags;\n\t    };\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var pattern = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(pattern, flags);\n\t        return {\n\t            type: 9 /* RegularExpression */,\n\t            value: '',\n\t            pattern: pattern,\n\t            flags: flags,\n\t            regex: value,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: 2 /* EOF */,\n\t                value: '',\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TokenName = {};\n\texports.TokenName[1 /* BooleanLiteral */] = 'Boolean';\n\texports.TokenName[2 /* EOF */] = '<end>';\n\texports.TokenName[3 /* Identifier */] = 'Identifier';\n\texports.TokenName[4 /* Keyword */] = 'Keyword';\n\texports.TokenName[5 /* NullLiteral */] = 'Null';\n\texports.TokenName[6 /* NumericLiteral */] = 'Numeric';\n\texports.TokenName[7 /* Punctuator */] = 'Punctuator';\n\texports.TokenName[8 /* StringLiteral */] = 'String';\n\texports.TokenName[9 /* RegularExpression */] = 'RegularExpression';\n\texports.TokenName[10 /* Template */] = 'Template';\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar token_1 = __webpack_require__(13);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var keyword = this.values[this.paren - 1];\n\t                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check = this.values[this.curly - 4];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check = this.values[this.curly - 5];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : true;\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return regex;\n\t    };\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    var comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\n\t                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n\t                this.reader.push(token);\n\t                var entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.type === 9 /* RegularExpression */) {\n\t                    var pattern = token.pattern;\n\t                    var flags = token.flags;\n\t                    entry.regex = { pattern: pattern, flags: flags };\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\n// This module is suitable for passing as options.parser when calling\n// recast.parse to process ECMAScript code with Esprima:\n//\n//   const ast = recast.parse(source, {\n//     parser: require(\"recast/parsers/esprima\")\n//   });\n//\nvar util_1 = require(\"../lib/util\");\nfunction parse(source, options) {\n    var comments = [];\n    var ast = require(\"esprima\").parse(source, {\n        loc: true,\n        locations: true,\n        comment: true,\n        onComment: comments,\n        range: (0, util_1.getOption)(options, \"range\", false),\n        tolerant: (0, util_1.getOption)(options, \"tolerant\", true),\n        tokens: true,\n        jsx: (0, util_1.getOption)(options, \"jsx\", false),\n        sourceType: (0, util_1.getOption)(options, \"sourceType\", \"module\"),\n    });\n    if (!Array.isArray(ast.comments)) {\n        ast.comments = comments;\n    }\n    return ast;\n}\nexports.parse = parse;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = void 0;\nvar util_1 = require(\"./util\");\nvar defaults = {\n    parser: require(\"../parsers/esprima\"),\n    tabWidth: 4,\n    useTabs: false,\n    reuseWhitespace: true,\n    lineTerminator: (0, util_1.getLineTerminator)(),\n    wrapColumn: 74,\n    sourceFileName: null,\n    sourceMapName: null,\n    sourceRoot: null,\n    inputSourceMap: null,\n    range: false,\n    tolerant: true,\n    quote: null,\n    trailingComma: false,\n    arrayBracketSpacing: false,\n    objectCurlySpacing: true,\n    arrowParensAlways: false,\n    flowObjectCommas: true,\n    tokens: true,\n};\nvar hasOwn = defaults.hasOwnProperty;\n// Copy options and fill in default values.\nfunction normalize(opts) {\n    var options = opts || defaults;\n    function get(key) {\n        return hasOwn.call(options, key) ? options[key] : defaults[key];\n    }\n    return {\n        tabWidth: +get(\"tabWidth\"),\n        useTabs: !!get(\"useTabs\"),\n        reuseWhitespace: !!get(\"reuseWhitespace\"),\n        lineTerminator: get(\"lineTerminator\"),\n        wrapColumn: Math.max(get(\"wrapColumn\"), 0),\n        sourceFileName: get(\"sourceFileName\"),\n        sourceMapName: get(\"sourceMapName\"),\n        sourceRoot: get(\"sourceRoot\"),\n        inputSourceMap: get(\"inputSourceMap\"),\n        parser: get(\"esprima\") || get(\"parser\"),\n        range: get(\"range\"),\n        tolerant: get(\"tolerant\"),\n        quote: get(\"quote\"),\n        trailingComma: get(\"trailingComma\"),\n        arrayBracketSpacing: get(\"arrayBracketSpacing\"),\n        objectCurlySpacing: get(\"objectCurlySpacing\"),\n        arrowParensAlways: get(\"arrowParensAlways\"),\n        flowObjectCommas: get(\"flowObjectCommas\"),\n        tokens: !!get(\"tokens\"),\n    };\n}\nexports.normalize = normalize;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar util_1 = require(\"./util\");\nvar Mapping = /** @class */ (function () {\n    function Mapping(sourceLines, sourceLoc, targetLoc) {\n        if (targetLoc === void 0) { targetLoc = sourceLoc; }\n        this.sourceLines = sourceLines;\n        this.sourceLoc = sourceLoc;\n        this.targetLoc = targetLoc;\n    }\n    Mapping.prototype.slice = function (lines, start, end) {\n        if (end === void 0) { end = lines.lastPos(); }\n        var sourceLines = this.sourceLines;\n        var sourceLoc = this.sourceLoc;\n        var targetLoc = this.targetLoc;\n        function skip(name) {\n            var sourceFromPos = sourceLoc[name];\n            var targetFromPos = targetLoc[name];\n            var targetToPos = start;\n            if (name === \"end\") {\n                targetToPos = end;\n            }\n            else {\n                (0, tiny_invariant_1.default)(name === \"start\");\n            }\n            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);\n        }\n        if ((0, util_1.comparePos)(start, targetLoc.start) <= 0) {\n            if ((0, util_1.comparePos)(targetLoc.end, end) <= 0) {\n                targetLoc = {\n                    start: subtractPos(targetLoc.start, start.line, start.column),\n                    end: subtractPos(targetLoc.end, start.line, start.column),\n                };\n                // The sourceLoc can stay the same because the contents of the\n                // targetLoc have not changed.\n            }\n            else if ((0, util_1.comparePos)(end, targetLoc.start) <= 0) {\n                return null;\n            }\n            else {\n                sourceLoc = {\n                    start: sourceLoc.start,\n                    end: skip(\"end\"),\n                };\n                targetLoc = {\n                    start: subtractPos(targetLoc.start, start.line, start.column),\n                    end: subtractPos(end, start.line, start.column),\n                };\n            }\n        }\n        else {\n            if ((0, util_1.comparePos)(targetLoc.end, start) <= 0) {\n                return null;\n            }\n            if ((0, util_1.comparePos)(targetLoc.end, end) <= 0) {\n                sourceLoc = {\n                    start: skip(\"start\"),\n                    end: sourceLoc.end,\n                };\n                targetLoc = {\n                    // Same as subtractPos(start, start.line, start.column):\n                    start: { line: 1, column: 0 },\n                    end: subtractPos(targetLoc.end, start.line, start.column),\n                };\n            }\n            else {\n                sourceLoc = {\n                    start: skip(\"start\"),\n                    end: skip(\"end\"),\n                };\n                targetLoc = {\n                    // Same as subtractPos(start, start.line, start.column):\n                    start: { line: 1, column: 0 },\n                    end: subtractPos(end, start.line, start.column),\n                };\n            }\n        }\n        return new Mapping(this.sourceLines, sourceLoc, targetLoc);\n    };\n    Mapping.prototype.add = function (line, column) {\n        return new Mapping(this.sourceLines, this.sourceLoc, {\n            start: addPos(this.targetLoc.start, line, column),\n            end: addPos(this.targetLoc.end, line, column),\n        });\n    };\n    Mapping.prototype.subtract = function (line, column) {\n        return new Mapping(this.sourceLines, this.sourceLoc, {\n            start: subtractPos(this.targetLoc.start, line, column),\n            end: subtractPos(this.targetLoc.end, line, column),\n        });\n    };\n    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {\n        if (skipFirstLine === void 0) { skipFirstLine = false; }\n        if (noNegativeColumns === void 0) { noNegativeColumns = false; }\n        if (by === 0) {\n            return this;\n        }\n        var targetLoc = this.targetLoc;\n        var startLine = targetLoc.start.line;\n        var endLine = targetLoc.end.line;\n        if (skipFirstLine && startLine === 1 && endLine === 1) {\n            return this;\n        }\n        targetLoc = {\n            start: targetLoc.start,\n            end: targetLoc.end,\n        };\n        if (!skipFirstLine || startLine > 1) {\n            var startColumn = targetLoc.start.column + by;\n            targetLoc.start = {\n                line: startLine,\n                column: noNegativeColumns ? Math.max(0, startColumn) : startColumn,\n            };\n        }\n        if (!skipFirstLine || endLine > 1) {\n            var endColumn = targetLoc.end.column + by;\n            targetLoc.end = {\n                line: endLine,\n                column: noNegativeColumns ? Math.max(0, endColumn) : endColumn,\n            };\n        }\n        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);\n    };\n    return Mapping;\n}());\nexports.default = Mapping;\nfunction addPos(toPos, line, column) {\n    return {\n        line: toPos.line + line - 1,\n        column: toPos.line === 1 ? toPos.column + column : toPos.column,\n    };\n}\nfunction subtractPos(fromPos, line, column) {\n    return {\n        line: fromPos.line - line + 1,\n        column: fromPos.line === line ? fromPos.column - column : fromPos.column,\n    };\n}\nfunction skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {\n    var targetComparison = (0, util_1.comparePos)(targetFromPos, targetToPos);\n    if (targetComparison === 0) {\n        // Trivial case: no characters to skip.\n        return sourceFromPos;\n    }\n    var sourceCursor, targetCursor;\n    if (targetComparison < 0) {\n        // Skipping forward.\n        sourceCursor =\n            sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();\n        targetCursor =\n            targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();\n        var lineDiff = targetToPos.line - targetCursor.line;\n        sourceCursor.line += lineDiff;\n        targetCursor.line += lineDiff;\n        if (lineDiff > 0) {\n            // If jumping to later lines, reset columns to the beginnings\n            // of those lines.\n            sourceCursor.column = 0;\n            targetCursor.column = 0;\n        }\n        else {\n            (0, tiny_invariant_1.default)(lineDiff === 0);\n        }\n        while ((0, util_1.comparePos)(targetCursor, targetToPos) < 0 &&\n            targetLines.nextPos(targetCursor, true)) {\n            (0, tiny_invariant_1.default)(sourceLines.nextPos(sourceCursor, true));\n            (0, tiny_invariant_1.default)(sourceLines.charAt(sourceCursor) === targetLines.charAt(targetCursor));\n        }\n    }\n    else {\n        // Skipping backward.\n        sourceCursor =\n            sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();\n        targetCursor =\n            targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();\n        var lineDiff = targetToPos.line - targetCursor.line;\n        sourceCursor.line += lineDiff;\n        targetCursor.line += lineDiff;\n        if (lineDiff < 0) {\n            // If jumping to earlier lines, reset columns to the ends of\n            // those lines.\n            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);\n            targetCursor.column = targetLines.getLineLength(targetCursor.line);\n        }\n        else {\n            (0, tiny_invariant_1.default)(lineDiff === 0);\n        }\n        while ((0, util_1.comparePos)(targetToPos, targetCursor) < 0 &&\n            targetLines.prevPos(targetCursor, true)) {\n            (0, tiny_invariant_1.default)(sourceLines.prevPos(sourceCursor, true));\n            (0, tiny_invariant_1.default)(sourceLines.charAt(sourceCursor) === targetLines.charAt(targetCursor));\n        }\n    }\n    return sourceCursor;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.concat = exports.fromString = exports.countSpaces = exports.Lines = void 0;\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar source_map_1 = tslib_1.__importDefault(require(\"source-map\"));\nvar options_1 = require(\"./options\");\nvar util_1 = require(\"./util\");\nvar mapping_1 = tslib_1.__importDefault(require(\"./mapping\"));\nvar Lines = /** @class */ (function () {\n    function Lines(infos, sourceFileName) {\n        if (sourceFileName === void 0) { sourceFileName = null; }\n        this.infos = infos;\n        this.mappings = [];\n        this.cachedSourceMap = null;\n        this.cachedTabWidth = void 0;\n        (0, tiny_invariant_1.default)(infos.length > 0);\n        this.length = infos.length;\n        this.name = sourceFileName || null;\n        if (this.name) {\n            this.mappings.push(new mapping_1.default(this, {\n                start: this.firstPos(),\n                end: this.lastPos(),\n            }));\n        }\n    }\n    Lines.prototype.toString = function (options) {\n        return this.sliceString(this.firstPos(), this.lastPos(), options);\n    };\n    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {\n        if (!sourceMapName) {\n            // Although we could make up a name or generate an anonymous\n            // source map, instead we assume that any consumer who does not\n            // provide a name does not actually want a source map.\n            return null;\n        }\n        var targetLines = this;\n        function updateJSON(json) {\n            json = json || {};\n            json.file = sourceMapName;\n            if (sourceRoot) {\n                json.sourceRoot = sourceRoot;\n            }\n            return json;\n        }\n        if (targetLines.cachedSourceMap) {\n            // Since Lines objects are immutable, we can reuse any source map\n            // that was previously generated. Nevertheless, we return a new\n            // JSON object here to protect the cached source map from outside\n            // modification.\n            return updateJSON(targetLines.cachedSourceMap.toJSON());\n        }\n        var smg = new source_map_1.default.SourceMapGenerator(updateJSON());\n        var sourcesToContents = {};\n        targetLines.mappings.forEach(function (mapping) {\n            var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) ||\n                mapping.sourceLines.lastPos();\n            var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) ||\n                targetLines.lastPos();\n            while ((0, util_1.comparePos)(sourceCursor, mapping.sourceLoc.end) < 0 &&\n                (0, util_1.comparePos)(targetCursor, mapping.targetLoc.end) < 0) {\n                var sourceChar = mapping.sourceLines.charAt(sourceCursor);\n                var targetChar = targetLines.charAt(targetCursor);\n                (0, tiny_invariant_1.default)(sourceChar === targetChar);\n                var sourceName = mapping.sourceLines.name;\n                // Add mappings one character at a time for maximum resolution.\n                smg.addMapping({\n                    source: sourceName,\n                    original: { line: sourceCursor.line, column: sourceCursor.column },\n                    generated: { line: targetCursor.line, column: targetCursor.column },\n                });\n                if (!hasOwn.call(sourcesToContents, sourceName)) {\n                    var sourceContent = mapping.sourceLines.toString();\n                    smg.setSourceContent(sourceName, sourceContent);\n                    sourcesToContents[sourceName] = sourceContent;\n                }\n                targetLines.nextPos(targetCursor, true);\n                mapping.sourceLines.nextPos(sourceCursor, true);\n            }\n        });\n        targetLines.cachedSourceMap = smg;\n        return smg.toJSON();\n    };\n    Lines.prototype.bootstrapCharAt = function (pos) {\n        (0, tiny_invariant_1.default)(typeof pos === \"object\");\n        (0, tiny_invariant_1.default)(typeof pos.line === \"number\");\n        (0, tiny_invariant_1.default)(typeof pos.column === \"number\");\n        var line = pos.line, column = pos.column, strings = this.toString().split(lineTerminatorSeqExp), string = strings[line - 1];\n        if (typeof string === \"undefined\")\n            return \"\";\n        if (column === string.length && line < strings.length)\n            return \"\\n\";\n        if (column >= string.length)\n            return \"\";\n        return string.charAt(column);\n    };\n    Lines.prototype.charAt = function (pos) {\n        (0, tiny_invariant_1.default)(typeof pos === \"object\");\n        (0, tiny_invariant_1.default)(typeof pos.line === \"number\");\n        (0, tiny_invariant_1.default)(typeof pos.column === \"number\");\n        var line = pos.line, column = pos.column, secret = this, infos = secret.infos, info = infos[line - 1], c = column;\n        if (typeof info === \"undefined\" || c < 0)\n            return \"\";\n        var indent = this.getIndentAt(line);\n        if (c < indent)\n            return \" \";\n        c += info.sliceStart - indent;\n        if (c === info.sliceEnd && line < this.length)\n            return \"\\n\";\n        if (c >= info.sliceEnd)\n            return \"\";\n        return info.line.charAt(c);\n    };\n    Lines.prototype.stripMargin = function (width, skipFirstLine) {\n        if (width === 0)\n            return this;\n        (0, tiny_invariant_1.default)(width > 0, \"negative margin: \" + width);\n        if (skipFirstLine && this.length === 1)\n            return this;\n        var lines = new Lines(this.infos.map(function (info, i) {\n            if (info.line && (i > 0 || !skipFirstLine)) {\n                info = tslib_1.__assign(tslib_1.__assign({}, info), { indent: Math.max(0, info.indent - width) });\n            }\n            return info;\n        }));\n        if (this.mappings.length > 0) {\n            var newMappings_1 = lines.mappings;\n            (0, tiny_invariant_1.default)(newMappings_1.length === 0);\n            this.mappings.forEach(function (mapping) {\n                newMappings_1.push(mapping.indent(width, skipFirstLine, true));\n            });\n        }\n        return lines;\n    };\n    Lines.prototype.indent = function (by) {\n        if (by === 0) {\n            return this;\n        }\n        var lines = new Lines(this.infos.map(function (info) {\n            if (info.line && !info.locked) {\n                info = tslib_1.__assign(tslib_1.__assign({}, info), { indent: info.indent + by });\n            }\n            return info;\n        }));\n        if (this.mappings.length > 0) {\n            var newMappings_2 = lines.mappings;\n            (0, tiny_invariant_1.default)(newMappings_2.length === 0);\n            this.mappings.forEach(function (mapping) {\n                newMappings_2.push(mapping.indent(by));\n            });\n        }\n        return lines;\n    };\n    Lines.prototype.indentTail = function (by) {\n        if (by === 0) {\n            return this;\n        }\n        if (this.length < 2) {\n            return this;\n        }\n        var lines = new Lines(this.infos.map(function (info, i) {\n            if (i > 0 && info.line && !info.locked) {\n                info = tslib_1.__assign(tslib_1.__assign({}, info), { indent: info.indent + by });\n            }\n            return info;\n        }));\n        if (this.mappings.length > 0) {\n            var newMappings_3 = lines.mappings;\n            (0, tiny_invariant_1.default)(newMappings_3.length === 0);\n            this.mappings.forEach(function (mapping) {\n                newMappings_3.push(mapping.indent(by, true));\n            });\n        }\n        return lines;\n    };\n    Lines.prototype.lockIndentTail = function () {\n        if (this.length < 2) {\n            return this;\n        }\n        return new Lines(this.infos.map(function (info, i) { return (tslib_1.__assign(tslib_1.__assign({}, info), { locked: i > 0 })); }));\n    };\n    Lines.prototype.getIndentAt = function (line) {\n        (0, tiny_invariant_1.default)(line >= 1, \"no line \" + line + \" (line numbers start from 1)\");\n        return Math.max(this.infos[line - 1].indent, 0);\n    };\n    Lines.prototype.guessTabWidth = function () {\n        if (typeof this.cachedTabWidth === \"number\") {\n            return this.cachedTabWidth;\n        }\n        var counts = []; // Sparse array.\n        var lastIndent = 0;\n        for (var line = 1, last = this.length; line <= last; ++line) {\n            var info = this.infos[line - 1];\n            var sliced = info.line.slice(info.sliceStart, info.sliceEnd);\n            // Whitespace-only lines don't tell us much about the likely tab\n            // width of this code.\n            if (isOnlyWhitespace(sliced)) {\n                continue;\n            }\n            var diff = Math.abs(info.indent - lastIndent);\n            counts[diff] = ~~counts[diff] + 1;\n            lastIndent = info.indent;\n        }\n        var maxCount = -1;\n        var result = 2;\n        for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {\n            if (hasOwn.call(counts, tabWidth) && counts[tabWidth] > maxCount) {\n                maxCount = counts[tabWidth];\n                result = tabWidth;\n            }\n        }\n        return (this.cachedTabWidth = result);\n    };\n    // Determine if the list of lines has a first line that starts with a //\n    // or /* comment. If this is the case, the code may need to be wrapped in\n    // parens to avoid ASI issues.\n    Lines.prototype.startsWithComment = function () {\n        if (this.infos.length === 0) {\n            return false;\n        }\n        var firstLineInfo = this.infos[0], sliceStart = firstLineInfo.sliceStart, sliceEnd = firstLineInfo.sliceEnd, firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();\n        return (firstLine.length === 0 ||\n            firstLine.slice(0, 2) === \"//\" ||\n            firstLine.slice(0, 2) === \"/*\");\n    };\n    Lines.prototype.isOnlyWhitespace = function () {\n        return isOnlyWhitespace(this.toString());\n    };\n    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {\n        var info = this.infos[pos.line - 1];\n        var indent = Math.max(info.indent, 0);\n        var diff = pos.column - indent;\n        if (diff <= 0) {\n            // If pos.column does not exceed the indentation amount, then\n            // there must be only whitespace before it.\n            return true;\n        }\n        var start = info.sliceStart;\n        var end = Math.min(start + diff, info.sliceEnd);\n        var prefix = info.line.slice(start, end);\n        return isOnlyWhitespace(prefix);\n    };\n    Lines.prototype.getLineLength = function (line) {\n        var info = this.infos[line - 1];\n        return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;\n    };\n    Lines.prototype.nextPos = function (pos, skipSpaces) {\n        if (skipSpaces === void 0) { skipSpaces = false; }\n        var l = Math.max(pos.line, 0), c = Math.max(pos.column, 0);\n        if (c < this.getLineLength(l)) {\n            pos.column += 1;\n            return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;\n        }\n        if (l < this.length) {\n            pos.line += 1;\n            pos.column = 0;\n            return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;\n        }\n        return false;\n    };\n    Lines.prototype.prevPos = function (pos, skipSpaces) {\n        if (skipSpaces === void 0) { skipSpaces = false; }\n        var l = pos.line, c = pos.column;\n        if (c < 1) {\n            l -= 1;\n            if (l < 1)\n                return false;\n            c = this.getLineLength(l);\n        }\n        else {\n            c = Math.min(c - 1, this.getLineLength(l));\n        }\n        pos.line = l;\n        pos.column = c;\n        return skipSpaces ? !!this.skipSpaces(pos, true, true) : true;\n    };\n    Lines.prototype.firstPos = function () {\n        // Trivial, but provided for completeness.\n        return { line: 1, column: 0 };\n    };\n    Lines.prototype.lastPos = function () {\n        return {\n            line: this.length,\n            column: this.getLineLength(this.length),\n        };\n    };\n    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {\n        if (backward === void 0) { backward = false; }\n        if (modifyInPlace === void 0) { modifyInPlace = false; }\n        if (pos) {\n            pos = modifyInPlace\n                ? pos\n                : {\n                    line: pos.line,\n                    column: pos.column,\n                };\n        }\n        else if (backward) {\n            pos = this.lastPos();\n        }\n        else {\n            pos = this.firstPos();\n        }\n        if (backward) {\n            while (this.prevPos(pos)) {\n                if (!isOnlyWhitespace(this.charAt(pos)) && this.nextPos(pos)) {\n                    return pos;\n                }\n            }\n            return null;\n        }\n        else {\n            while (isOnlyWhitespace(this.charAt(pos))) {\n                if (!this.nextPos(pos)) {\n                    return null;\n                }\n            }\n            return pos;\n        }\n    };\n    Lines.prototype.trimLeft = function () {\n        var pos = this.skipSpaces(this.firstPos(), false, true);\n        return pos ? this.slice(pos) : emptyLines;\n    };\n    Lines.prototype.trimRight = function () {\n        var pos = this.skipSpaces(this.lastPos(), true, true);\n        return pos ? this.slice(this.firstPos(), pos) : emptyLines;\n    };\n    Lines.prototype.trim = function () {\n        var start = this.skipSpaces(this.firstPos(), false, true);\n        if (start === null) {\n            return emptyLines;\n        }\n        var end = this.skipSpaces(this.lastPos(), true, true);\n        if (end === null) {\n            return emptyLines;\n        }\n        return this.slice(start, end);\n    };\n    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {\n        if (startPos === void 0) { startPos = this.firstPos(); }\n        if (skipSpaces === void 0) { skipSpaces = false; }\n        var pos = this.firstPos();\n        if (startPos) {\n            (pos.line = startPos.line), (pos.column = startPos.column);\n        }\n        if (skipSpaces && !this.skipSpaces(pos, false, true)) {\n            return; // Encountered nothing but spaces.\n        }\n        do\n            callback.call(this, pos);\n        while (this.nextPos(pos, skipSpaces));\n    };\n    Lines.prototype.bootstrapSlice = function (start, end) {\n        var strings = this.toString()\n            .split(lineTerminatorSeqExp)\n            .slice(start.line - 1, end.line);\n        if (strings.length > 0) {\n            strings.push(strings.pop().slice(0, end.column));\n            strings[0] = strings[0].slice(start.column);\n        }\n        return fromString(strings.join(\"\\n\"));\n    };\n    Lines.prototype.slice = function (start, end) {\n        if (!end) {\n            if (!start) {\n                // The client seems to want a copy of this Lines object, but\n                // Lines objects are immutable, so it's perfectly adequate to\n                // return the same object.\n                return this;\n            }\n            // Slice to the end if no end position was provided.\n            end = this.lastPos();\n        }\n        if (!start) {\n            throw new Error(\"cannot slice with end but not start\");\n        }\n        var sliced = this.infos.slice(start.line - 1, end.line);\n        if (start.line === end.line) {\n            sliced[0] = sliceInfo(sliced[0], start.column, end.column);\n        }\n        else {\n            (0, tiny_invariant_1.default)(start.line < end.line);\n            sliced[0] = sliceInfo(sliced[0], start.column);\n            sliced.push(sliceInfo(sliced.pop(), 0, end.column));\n        }\n        var lines = new Lines(sliced);\n        if (this.mappings.length > 0) {\n            var newMappings_4 = lines.mappings;\n            (0, tiny_invariant_1.default)(newMappings_4.length === 0);\n            this.mappings.forEach(function (mapping) {\n                var sliced = mapping.slice(this, start, end);\n                if (sliced) {\n                    newMappings_4.push(sliced);\n                }\n            }, this);\n        }\n        return lines;\n    };\n    Lines.prototype.bootstrapSliceString = function (start, end, options) {\n        return this.slice(start, end).toString(options);\n    };\n    Lines.prototype.sliceString = function (start, end, options) {\n        if (start === void 0) { start = this.firstPos(); }\n        if (end === void 0) { end = this.lastPos(); }\n        var _a = (0, options_1.normalize)(options), tabWidth = _a.tabWidth, useTabs = _a.useTabs, reuseWhitespace = _a.reuseWhitespace, lineTerminator = _a.lineTerminator;\n        var parts = [];\n        for (var line = start.line; line <= end.line; ++line) {\n            var info = this.infos[line - 1];\n            if (line === start.line) {\n                if (line === end.line) {\n                    info = sliceInfo(info, start.column, end.column);\n                }\n                else {\n                    info = sliceInfo(info, start.column);\n                }\n            }\n            else if (line === end.line) {\n                info = sliceInfo(info, 0, end.column);\n            }\n            var indent = Math.max(info.indent, 0);\n            var before_1 = info.line.slice(0, info.sliceStart);\n            if (reuseWhitespace &&\n                isOnlyWhitespace(before_1) &&\n                countSpaces(before_1, tabWidth) === indent) {\n                // Reuse original spaces if the indentation is correct.\n                parts.push(info.line.slice(0, info.sliceEnd));\n                continue;\n            }\n            var tabs = 0;\n            var spaces = indent;\n            if (useTabs) {\n                tabs = Math.floor(indent / tabWidth);\n                spaces -= tabs * tabWidth;\n            }\n            var result = \"\";\n            if (tabs > 0) {\n                result += new Array(tabs + 1).join(\"\\t\");\n            }\n            if (spaces > 0) {\n                result += new Array(spaces + 1).join(\" \");\n            }\n            result += info.line.slice(info.sliceStart, info.sliceEnd);\n            parts.push(result);\n        }\n        return parts.join(lineTerminator);\n    };\n    Lines.prototype.isEmpty = function () {\n        return this.length < 2 && this.getLineLength(1) < 1;\n    };\n    Lines.prototype.join = function (elements) {\n        var separator = this;\n        var infos = [];\n        var mappings = [];\n        var prevInfo;\n        function appendLines(linesOrNull) {\n            if (linesOrNull === null) {\n                return;\n            }\n            if (prevInfo) {\n                var info = linesOrNull.infos[0];\n                var indent = new Array(info.indent + 1).join(\" \");\n                var prevLine_1 = infos.length;\n                var prevColumn_1 = Math.max(prevInfo.indent, 0) +\n                    prevInfo.sliceEnd -\n                    prevInfo.sliceStart;\n                prevInfo.line =\n                    prevInfo.line.slice(0, prevInfo.sliceEnd) +\n                        indent +\n                        info.line.slice(info.sliceStart, info.sliceEnd);\n                // If any part of a line is indentation-locked, the whole line\n                // will be indentation-locked.\n                prevInfo.locked = prevInfo.locked || info.locked;\n                prevInfo.sliceEnd = prevInfo.line.length;\n                if (linesOrNull.mappings.length > 0) {\n                    linesOrNull.mappings.forEach(function (mapping) {\n                        mappings.push(mapping.add(prevLine_1, prevColumn_1));\n                    });\n                }\n            }\n            else if (linesOrNull.mappings.length > 0) {\n                mappings.push.apply(mappings, linesOrNull.mappings);\n            }\n            linesOrNull.infos.forEach(function (info, i) {\n                if (!prevInfo || i > 0) {\n                    prevInfo = tslib_1.__assign({}, info);\n                    infos.push(prevInfo);\n                }\n            });\n        }\n        function appendWithSeparator(linesOrNull, i) {\n            if (i > 0)\n                appendLines(separator);\n            appendLines(linesOrNull);\n        }\n        elements\n            .map(function (elem) {\n            var lines = fromString(elem);\n            if (lines.isEmpty())\n                return null;\n            return lines;\n        })\n            .forEach(function (linesOrNull, i) {\n            if (separator.isEmpty()) {\n                appendLines(linesOrNull);\n            }\n            else {\n                appendWithSeparator(linesOrNull, i);\n            }\n        });\n        if (infos.length < 1)\n            return emptyLines;\n        var lines = new Lines(infos);\n        lines.mappings = mappings;\n        return lines;\n    };\n    Lines.prototype.concat = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var list = [this];\n        list.push.apply(list, args);\n        (0, tiny_invariant_1.default)(list.length === args.length + 1);\n        return emptyLines.join(list);\n    };\n    return Lines;\n}());\nexports.Lines = Lines;\nvar fromStringCache = {};\nvar hasOwn = fromStringCache.hasOwnProperty;\nvar maxCacheKeyLen = 10;\nfunction countSpaces(spaces, tabWidth) {\n    var count = 0;\n    var len = spaces.length;\n    for (var i = 0; i < len; ++i) {\n        switch (spaces.charCodeAt(i)) {\n            case 9: {\n                // '\\t'\n                (0, tiny_invariant_1.default)(typeof tabWidth === \"number\");\n                (0, tiny_invariant_1.default)(tabWidth > 0);\n                var next = Math.ceil(count / tabWidth) * tabWidth;\n                if (next === count) {\n                    count += tabWidth;\n                }\n                else {\n                    count = next;\n                }\n                break;\n            }\n            case 11: // '\\v'\n            case 12: // '\\f'\n            case 13: // '\\r'\n            case 0xfeff: // zero-width non-breaking space\n                // These characters contribute nothing to indentation.\n                break;\n            case 32: // ' '\n            default:\n                // Treat all other whitespace like ' '.\n                count += 1;\n                break;\n        }\n    }\n    return count;\n}\nexports.countSpaces = countSpaces;\nvar leadingSpaceExp = /^\\s*/;\n// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators\nvar lineTerminatorSeqExp = /\\u000D\\u000A|\\u000D(?!\\u000A)|\\u000A|\\u2028|\\u2029/;\n/**\n * @param {Object} options - Options object that configures printing.\n */\nfunction fromString(string, options) {\n    if (string instanceof Lines)\n        return string;\n    string += \"\";\n    var tabWidth = options && options.tabWidth;\n    var tabless = string.indexOf(\"\\t\") < 0;\n    var cacheable = !options && tabless && string.length <= maxCacheKeyLen;\n    (0, tiny_invariant_1.default)(tabWidth || tabless, \"No tab width specified but encountered tabs in string\\n\" + string);\n    if (cacheable && hasOwn.call(fromStringCache, string))\n        return fromStringCache[string];\n    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {\n        // TODO: handle null exec result\n        var spaces = leadingSpaceExp.exec(line)[0];\n        return {\n            line: line,\n            indent: countSpaces(spaces, tabWidth),\n            // Boolean indicating whether this line can be reindented.\n            locked: false,\n            sliceStart: spaces.length,\n            sliceEnd: line.length,\n        };\n    }), (0, options_1.normalize)(options).sourceFileName);\n    if (cacheable)\n        fromStringCache[string] = lines;\n    return lines;\n}\nexports.fromString = fromString;\nfunction isOnlyWhitespace(string) {\n    return !/\\S/.test(string);\n}\nfunction sliceInfo(info, startCol, endCol) {\n    var sliceStart = info.sliceStart;\n    var sliceEnd = info.sliceEnd;\n    var indent = Math.max(info.indent, 0);\n    var lineLength = indent + sliceEnd - sliceStart;\n    if (typeof endCol === \"undefined\") {\n        endCol = lineLength;\n    }\n    startCol = Math.max(startCol, 0);\n    endCol = Math.min(endCol, lineLength);\n    endCol = Math.max(endCol, startCol);\n    if (endCol < indent) {\n        indent = endCol;\n        sliceEnd = sliceStart;\n    }\n    else {\n        sliceEnd -= lineLength - endCol;\n    }\n    lineLength = endCol;\n    lineLength -= startCol;\n    if (startCol < indent) {\n        indent -= startCol;\n    }\n    else {\n        startCol -= indent;\n        indent = 0;\n        sliceStart += startCol;\n    }\n    (0, tiny_invariant_1.default)(indent >= 0);\n    (0, tiny_invariant_1.default)(sliceStart <= sliceEnd);\n    (0, tiny_invariant_1.default)(lineLength === indent + sliceEnd - sliceStart);\n    if (info.indent === indent &&\n        info.sliceStart === sliceStart &&\n        info.sliceEnd === sliceEnd) {\n        return info;\n    }\n    return {\n        line: info.line,\n        indent: indent,\n        // A destructive slice always unlocks indentation.\n        locked: false,\n        sliceStart: sliceStart,\n        sliceEnd: sliceEnd,\n    };\n}\nfunction concat(elements) {\n    return emptyLines.join(elements);\n}\nexports.concat = concat;\n// The emptyLines object needs to be created all the way down here so that\n// Lines.prototype will be fully populated.\nvar emptyLines = fromString(\"\");\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.printComments = exports.attach = void 0;\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nvar n = types.namedTypes;\nvar isArray = types.builtInTypes.array;\nvar isObject = types.builtInTypes.object;\nvar lines_1 = require(\"./lines\");\nvar util_1 = require(\"./util\");\nvar childNodesCache = new WeakMap();\n// TODO Move a non-caching implementation of this function into ast-types,\n// and implement a caching wrapper function here.\nfunction getSortedChildNodes(node, lines, resultArray) {\n    if (!node) {\n        return resultArray;\n    }\n    // The .loc checks below are sensitive to some of the problems that\n    // are fixed by this utility function. Specifically, if it decides to\n    // set node.loc to null, indicating that the node's .loc information\n    // is unreliable, then we don't want to add node to the resultArray.\n    (0, util_1.fixFaultyLocations)(node, lines);\n    if (resultArray) {\n        if (n.Node.check(node) && n.SourceLocation.check(node.loc)) {\n            // This reverse insertion sort almost always takes constant\n            // time because we almost always (maybe always?) append the\n            // nodes in order anyway.\n            var i = resultArray.length - 1;\n            for (; i >= 0; --i) {\n                var child = resultArray[i];\n                if (child &&\n                    child.loc &&\n                    (0, util_1.comparePos)(child.loc.end, node.loc.start) <= 0) {\n                    break;\n                }\n            }\n            resultArray.splice(i + 1, 0, node);\n            return resultArray;\n        }\n    }\n    else {\n        var childNodes = childNodesCache.get(node);\n        if (childNodes) {\n            return childNodes;\n        }\n    }\n    var names;\n    if (isArray.check(node)) {\n        names = Object.keys(node);\n    }\n    else if (isObject.check(node)) {\n        names = types.getFieldNames(node);\n    }\n    else {\n        return resultArray;\n    }\n    if (!resultArray) {\n        childNodesCache.set(node, (resultArray = []));\n    }\n    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {\n        getSortedChildNodes(node[names[i]], lines, resultArray);\n    }\n    return resultArray;\n}\n// As efficiently as possible, decorate the comment object with\n// .precedingNode, .enclosingNode, and/or .followingNode properties, at\n// least one of which is guaranteed to be defined.\nfunction decorateComment(node, comment, lines) {\n    var childNodes = getSortedChildNodes(node, lines);\n    // Time to dust off the old binary search robes and wizard hat.\n    var left = 0;\n    var right = childNodes && childNodes.length;\n    var precedingNode;\n    var followingNode;\n    while (typeof right === \"number\" && left < right) {\n        var middle = (left + right) >> 1;\n        var child = childNodes[middle];\n        if ((0, util_1.comparePos)(child.loc.start, comment.loc.start) <= 0 &&\n            (0, util_1.comparePos)(comment.loc.end, child.loc.end) <= 0) {\n            // The comment is completely contained by this child node.\n            decorateComment((comment.enclosingNode = child), comment, lines);\n            return; // Abandon the binary search at this level.\n        }\n        if ((0, util_1.comparePos)(child.loc.end, comment.loc.start) <= 0) {\n            // This child node falls completely before the comment.\n            // Because we will never consider this node or any nodes\n            // before it again, this node must be the closest preceding\n            // node we have encountered so far.\n            precedingNode = child;\n            left = middle + 1;\n            continue;\n        }\n        if ((0, util_1.comparePos)(comment.loc.end, child.loc.start) <= 0) {\n            // This child node falls completely after the comment.\n            // Because we will never consider this node or any nodes after\n            // it again, this node must be the closest following node we\n            // have encountered so far.\n            followingNode = child;\n            right = middle;\n            continue;\n        }\n        throw new Error(\"Comment location overlaps with node location\");\n    }\n    if (precedingNode) {\n        comment.precedingNode = precedingNode;\n    }\n    if (followingNode) {\n        comment.followingNode = followingNode;\n    }\n}\nfunction attach(comments, ast, lines) {\n    if (!isArray.check(comments)) {\n        return;\n    }\n    var tiesToBreak = [];\n    comments.forEach(function (comment) {\n        comment.loc.lines = lines;\n        decorateComment(ast, comment, lines);\n        var pn = comment.precedingNode;\n        var en = comment.enclosingNode;\n        var fn = comment.followingNode;\n        if (pn && fn) {\n            var tieCount = tiesToBreak.length;\n            if (tieCount > 0) {\n                var lastTie = tiesToBreak[tieCount - 1];\n                (0, tiny_invariant_1.default)((lastTie.precedingNode === comment.precedingNode) ===\n                    (lastTie.followingNode === comment.followingNode));\n                if (lastTie.followingNode !== comment.followingNode) {\n                    breakTies(tiesToBreak, lines);\n                }\n            }\n            tiesToBreak.push(comment);\n        }\n        else if (pn) {\n            // No contest: we have a trailing comment.\n            breakTies(tiesToBreak, lines);\n            addTrailingComment(pn, comment);\n        }\n        else if (fn) {\n            // No contest: we have a leading comment.\n            breakTies(tiesToBreak, lines);\n            addLeadingComment(fn, comment);\n        }\n        else if (en) {\n            // The enclosing node has no child nodes at all, so what we\n            // have here is a dangling comment, e.g. [/* crickets */].\n            breakTies(tiesToBreak, lines);\n            addDanglingComment(en, comment);\n        }\n        else {\n            throw new Error(\"AST contains no nodes at all?\");\n        }\n    });\n    breakTies(tiesToBreak, lines);\n    comments.forEach(function (comment) {\n        // These node references were useful for breaking ties, but we\n        // don't need them anymore, and they create cycles in the AST that\n        // may lead to infinite recursion if we don't delete them here.\n        delete comment.precedingNode;\n        delete comment.enclosingNode;\n        delete comment.followingNode;\n    });\n}\nexports.attach = attach;\nfunction breakTies(tiesToBreak, lines) {\n    var tieCount = tiesToBreak.length;\n    if (tieCount === 0) {\n        return;\n    }\n    var pn = tiesToBreak[0].precedingNode;\n    var fn = tiesToBreak[0].followingNode;\n    var gapEndPos = fn.loc.start;\n    // Iterate backwards through tiesToBreak, examining the gaps\n    // between the tied comments. In order to qualify as leading, a\n    // comment must be separated from fn by an unbroken series of\n    // whitespace-only gaps (or other comments).\n    var indexOfFirstLeadingComment = tieCount;\n    var comment;\n    for (; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {\n        comment = tiesToBreak[indexOfFirstLeadingComment - 1];\n        (0, tiny_invariant_1.default)(comment.precedingNode === pn);\n        (0, tiny_invariant_1.default)(comment.followingNode === fn);\n        var gap = lines.sliceString(comment.loc.end, gapEndPos);\n        if (/\\S/.test(gap)) {\n            // The gap string contained something other than whitespace.\n            break;\n        }\n        gapEndPos = comment.loc.start;\n    }\n    while (indexOfFirstLeadingComment <= tieCount &&\n        (comment = tiesToBreak[indexOfFirstLeadingComment]) &&\n        // If the comment is a //-style comment and indented more\n        // deeply than the node itself, reconsider it as trailing.\n        (comment.type === \"Line\" || comment.type === \"CommentLine\") &&\n        comment.loc.start.column > fn.loc.start.column) {\n        ++indexOfFirstLeadingComment;\n    }\n    if (indexOfFirstLeadingComment) {\n        var enclosingNode = tiesToBreak[indexOfFirstLeadingComment - 1].enclosingNode;\n        if ((enclosingNode === null || enclosingNode === void 0 ? void 0 : enclosingNode.type) === \"CallExpression\") {\n            --indexOfFirstLeadingComment;\n        }\n    }\n    tiesToBreak.forEach(function (comment, i) {\n        if (i < indexOfFirstLeadingComment) {\n            addTrailingComment(pn, comment);\n        }\n        else {\n            addLeadingComment(fn, comment);\n        }\n    });\n    tiesToBreak.length = 0;\n}\nfunction addCommentHelper(node, comment) {\n    var comments = node.comments || (node.comments = []);\n    comments.push(comment);\n}\nfunction addLeadingComment(node, comment) {\n    comment.leading = true;\n    comment.trailing = false;\n    addCommentHelper(node, comment);\n}\nfunction addDanglingComment(node, comment) {\n    comment.leading = false;\n    comment.trailing = false;\n    addCommentHelper(node, comment);\n}\nfunction addTrailingComment(node, comment) {\n    comment.leading = false;\n    comment.trailing = true;\n    addCommentHelper(node, comment);\n}\nfunction printLeadingComment(commentPath, print) {\n    var comment = commentPath.getValue();\n    n.Comment.assert(comment);\n    var loc = comment.loc;\n    var lines = loc && loc.lines;\n    var parts = [print(commentPath)];\n    if (comment.trailing) {\n        // When we print trailing comments as leading comments, we don't\n        // want to bring any trailing spaces along.\n        parts.push(\"\\n\");\n    }\n    else if (lines instanceof lines_1.Lines) {\n        var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());\n        if (trailingSpace.length === 1) {\n            // If the trailing space contains no newlines, then we want to\n            // preserve it exactly as we found it.\n            parts.push(trailingSpace);\n        }\n        else {\n            // If the trailing space contains newlines, then replace it\n            // with just that many newlines, with all other spaces removed.\n            parts.push(new Array(trailingSpace.length).join(\"\\n\"));\n        }\n    }\n    else {\n        parts.push(\"\\n\");\n    }\n    return (0, lines_1.concat)(parts);\n}\nfunction printTrailingComment(commentPath, print) {\n    var comment = commentPath.getValue(commentPath);\n    n.Comment.assert(comment);\n    var loc = comment.loc;\n    var lines = loc && loc.lines;\n    var parts = [];\n    if (lines instanceof lines_1.Lines) {\n        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();\n        var leadingSpace = lines.slice(fromPos, loc.start);\n        if (leadingSpace.length === 1) {\n            // If the leading space contains no newlines, then we want to\n            // preserve it exactly as we found it.\n            parts.push(leadingSpace);\n        }\n        else {\n            // If the leading space contains newlines, then replace it\n            // with just that many newlines, sans all other spaces.\n            parts.push(new Array(leadingSpace.length).join(\"\\n\"));\n        }\n    }\n    parts.push(print(commentPath));\n    return (0, lines_1.concat)(parts);\n}\nfunction printComments(path, print) {\n    var value = path.getValue();\n    var innerLines = print(path);\n    var comments = n.Node.check(value) && types.getFieldValue(value, \"comments\");\n    if (!comments || comments.length === 0) {\n        return innerLines;\n    }\n    var leadingParts = [];\n    var trailingParts = [innerLines];\n    path.each(function (commentPath) {\n        var comment = commentPath.getValue();\n        var leading = types.getFieldValue(comment, \"leading\");\n        var trailing = types.getFieldValue(comment, \"trailing\");\n        if (leading ||\n            (trailing &&\n                !(n.Statement.check(value) ||\n                    comment.type === \"Block\" ||\n                    comment.type === \"CommentBlock\"))) {\n            leadingParts.push(printLeadingComment(commentPath, print));\n        }\n        else if (trailing) {\n            trailingParts.push(printTrailingComment(commentPath, print));\n        }\n    }, \"comments\");\n    leadingParts.push.apply(leadingParts, trailingParts);\n    return (0, lines_1.concat)(leadingParts);\n}\nexports.printComments = printComments;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nvar b = types.builders;\nvar isObject = types.builtInTypes.object;\nvar isArray = types.builtInTypes.array;\nvar options_1 = require(\"./options\");\nvar lines_1 = require(\"./lines\");\nvar comments_1 = require(\"./comments\");\nvar util = tslib_1.__importStar(require(\"./util\"));\nfunction parse(source, options) {\n    options = (0, options_1.normalize)(options);\n    var lines = (0, lines_1.fromString)(source, options);\n    var sourceWithoutTabs = lines.toString({\n        tabWidth: options.tabWidth,\n        reuseWhitespace: false,\n        useTabs: false,\n    });\n    var comments = [];\n    var ast = options.parser.parse(sourceWithoutTabs, {\n        jsx: true,\n        loc: true,\n        locations: true,\n        range: options.range,\n        comment: true,\n        onComment: comments,\n        tolerant: util.getOption(options, \"tolerant\", true),\n        ecmaVersion: 6,\n        sourceType: util.getOption(options, \"sourceType\", \"module\"),\n    });\n    // Use ast.tokens if possible, and otherwise fall back to the Esprima\n    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens\n    // automatically, but custom parsers might need additional configuration\n    // to avoid this fallback.\n    var tokens = Array.isArray(ast.tokens)\n        ? ast.tokens\n        : require(\"esprima\").tokenize(sourceWithoutTabs, {\n            loc: true,\n        });\n    // We will reattach the tokens array to the file object below.\n    delete ast.tokens;\n    // Make sure every token has a token.value string.\n    tokens.forEach(function (token) {\n        if (typeof token.value !== \"string\") {\n            token.value = lines.sliceString(token.loc.start, token.loc.end);\n        }\n    });\n    if (Array.isArray(ast.comments)) {\n        comments = ast.comments;\n        delete ast.comments;\n    }\n    if (ast.loc) {\n        // If the source was empty, some parsers give loc.{start,end}.line\n        // values of 0, instead of the minimum of 1.\n        util.fixFaultyLocations(ast, lines);\n    }\n    else {\n        ast.loc = {\n            start: lines.firstPos(),\n            end: lines.lastPos(),\n        };\n    }\n    ast.loc.lines = lines;\n    ast.loc.indent = 0;\n    var file;\n    var program;\n    if (ast.type === \"Program\") {\n        program = ast;\n        // In order to ensure we reprint leading and trailing program\n        // comments, wrap the original Program node with a File node. Only\n        // ESTree parsers (Acorn and Esprima) return a Program as the root AST\n        // node. Most other (Babylon-like) parsers return a File.\n        file = b.file(ast, options.sourceFileName || null);\n        file.loc = {\n            start: lines.firstPos(),\n            end: lines.lastPos(),\n            lines: lines,\n            indent: 0,\n        };\n    }\n    else if (ast.type === \"File\") {\n        file = ast;\n        program = file.program;\n    }\n    // Expose file.tokens unless the caller passed false for options.tokens.\n    if (options.tokens) {\n        file.tokens = tokens;\n    }\n    // Expand the Program's .loc to include all comments (not just those\n    // attached to the Program node, as its children may have comments as\n    // well), since sometimes program.loc.{start,end} will coincide with the\n    // .loc.{start,end} of the first and last *statements*, mistakenly\n    // excluding comments that fall outside that region.\n    var trueProgramLoc = util.getTrueLoc({\n        type: program.type,\n        loc: program.loc,\n        body: [],\n        comments: comments,\n    }, lines);\n    program.loc.start = trueProgramLoc.start;\n    program.loc.end = trueProgramLoc.end;\n    // Passing file.program here instead of just file means that initial\n    // comments will be attached to program.body[0] instead of program.\n    (0, comments_1.attach)(comments, program.body.length ? file.program : file, lines);\n    // Return a copy of the original AST so that any changes made may be\n    // compared to the original.\n    return new TreeCopier(lines, tokens).copy(file);\n}\nexports.parse = parse;\nvar TreeCopier = function TreeCopier(lines, tokens) {\n    (0, tiny_invariant_1.default)(this instanceof TreeCopier);\n    this.lines = lines;\n    this.tokens = tokens;\n    this.startTokenIndex = 0;\n    this.endTokenIndex = tokens.length;\n    this.indent = 0;\n    this.seen = new Map();\n};\nvar TCp = TreeCopier.prototype;\nTCp.copy = function (node) {\n    if (this.seen.has(node)) {\n        return this.seen.get(node);\n    }\n    if (isArray.check(node)) {\n        var copy_1 = new Array(node.length);\n        this.seen.set(node, copy_1);\n        node.forEach(function (item, i) {\n            copy_1[i] = this.copy(item);\n        }, this);\n        return copy_1;\n    }\n    if (!isObject.check(node)) {\n        return node;\n    }\n    util.fixFaultyLocations(node, this.lines);\n    var copy = Object.create(Object.getPrototypeOf(node), {\n        original: {\n            // Provide a link from the copy to the original.\n            value: node,\n            configurable: false,\n            enumerable: false,\n            writable: true,\n        },\n    });\n    this.seen.set(node, copy);\n    var loc = node.loc;\n    var oldIndent = this.indent;\n    var newIndent = oldIndent;\n    var oldStartTokenIndex = this.startTokenIndex;\n    var oldEndTokenIndex = this.endTokenIndex;\n    if (loc) {\n        // When node is a comment, we set node.loc.indent to\n        // node.loc.start.column so that, when/if we print the comment by\n        // itself, we can strip that much whitespace from the left margin of\n        // the comment. This only really matters for multiline Block comments,\n        // but it doesn't hurt for Line comments.\n        if (node.type === \"Block\" ||\n            node.type === \"Line\" ||\n            node.type === \"CommentBlock\" ||\n            node.type === \"CommentLine\" ||\n            this.lines.isPrecededOnlyByWhitespace(loc.start)) {\n            newIndent = this.indent = loc.start.column;\n        }\n        // Every node.loc has a reference to the original source lines as well\n        // as a complete list of source tokens.\n        loc.lines = this.lines;\n        loc.tokens = this.tokens;\n        loc.indent = newIndent;\n        // Set loc.start.token and loc.end.token such that\n        // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of\n        // all the tokens that make up this node.\n        this.findTokenRange(loc);\n    }\n    var keys = Object.keys(node);\n    var keyCount = keys.length;\n    for (var i = 0; i < keyCount; ++i) {\n        var key = keys[i];\n        if (key === \"loc\") {\n            copy[key] = node[key];\n        }\n        else if (key === \"tokens\" && node.type === \"File\") {\n            // Preserve file.tokens (uncopied) in case client code cares about\n            // it, even though Recast ignores it when reprinting.\n            copy[key] = node[key];\n        }\n        else {\n            copy[key] = this.copy(node[key]);\n        }\n    }\n    this.indent = oldIndent;\n    this.startTokenIndex = oldStartTokenIndex;\n    this.endTokenIndex = oldEndTokenIndex;\n    return copy;\n};\n// If we didn't have any idea where in loc.tokens to look for tokens\n// contained by this loc, a binary search would be appropriate, but\n// because we maintain this.startTokenIndex and this.endTokenIndex as we\n// traverse the AST, we only need to make small (linear) adjustments to\n// those indexes with each recursive iteration.\nTCp.findTokenRange = function (loc) {\n    // In the unlikely event that loc.tokens[this.startTokenIndex] starts\n    // *after* loc.start, we need to rewind this.startTokenIndex first.\n    while (this.startTokenIndex > 0) {\n        var token = loc.tokens[this.startTokenIndex];\n        if (util.comparePos(loc.start, token.loc.start) < 0) {\n            --this.startTokenIndex;\n        }\n        else\n            break;\n    }\n    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends\n    // *before* loc.end, we need to fast-forward this.endTokenIndex first.\n    while (this.endTokenIndex < loc.tokens.length) {\n        var token = loc.tokens[this.endTokenIndex];\n        if (util.comparePos(token.loc.end, loc.end) < 0) {\n            ++this.endTokenIndex;\n        }\n        else\n            break;\n    }\n    // Increment this.startTokenIndex until we've found the first token\n    // contained by this node.\n    while (this.startTokenIndex < this.endTokenIndex) {\n        var token = loc.tokens[this.startTokenIndex];\n        if (util.comparePos(token.loc.start, loc.start) < 0) {\n            ++this.startTokenIndex;\n        }\n        else\n            break;\n    }\n    // Index into loc.tokens of the first token within this node.\n    loc.start.token = this.startTokenIndex;\n    // Decrement this.endTokenIndex until we've found the first token after\n    // this node (not contained by the node).\n    while (this.endTokenIndex > this.startTokenIndex) {\n        var token = loc.tokens[this.endTokenIndex - 1];\n        if (util.comparePos(loc.end, token.loc.end) < 0) {\n            --this.endTokenIndex;\n        }\n        else\n            break;\n    }\n    // Index into loc.tokens of the first token *after* this node.\n    // If loc.start.token === loc.end.token, the node contains no tokens,\n    // and the index is that of the next token following this node.\n    loc.end.token = this.endTokenIndex;\n};\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nvar util = tslib_1.__importStar(require(\"./util\"));\nvar n = types.namedTypes;\nvar isArray = types.builtInTypes.array;\nvar isNumber = types.builtInTypes.number;\nvar PRECEDENCE = {};\n[\n    [\"??\"],\n    [\"||\"],\n    [\"&&\"],\n    [\"|\"],\n    [\"^\"],\n    [\"&\"],\n    [\"==\", \"===\", \"!=\", \"!==\"],\n    [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n    [\">>\", \"<<\", \">>>\"],\n    [\"+\", \"-\"],\n    [\"*\", \"/\", \"%\"],\n    [\"**\"],\n].forEach(function (tier, i) {\n    tier.forEach(function (op) {\n        PRECEDENCE[op] = i;\n    });\n});\nvar FastPath = function FastPath(value) {\n    (0, tiny_invariant_1.default)(this instanceof FastPath);\n    this.stack = [value];\n};\nvar FPp = FastPath.prototype;\n// Static convenience function for coercing a value to a FastPath.\nFastPath.from = function (obj) {\n    if (obj instanceof FastPath) {\n        // Return a defensive copy of any existing FastPath instances.\n        return obj.copy();\n    }\n    if (obj instanceof types.NodePath) {\n        // For backwards compatibility, unroll NodePath instances into\n        // lightweight FastPath [..., name, value] stacks.\n        var copy = Object.create(FastPath.prototype);\n        var stack = [obj.value];\n        for (var pp = void 0; (pp = obj.parentPath); obj = pp)\n            stack.push(obj.name, pp.value);\n        copy.stack = stack.reverse();\n        return copy;\n    }\n    // Otherwise use obj as the value of the new FastPath instance.\n    return new FastPath(obj);\n};\nFPp.copy = function copy() {\n    var copy = Object.create(FastPath.prototype);\n    copy.stack = this.stack.slice(0);\n    return copy;\n};\n// The name of the current property is always the penultimate element of\n// this.stack, and always a String.\nFPp.getName = function getName() {\n    var s = this.stack;\n    var len = s.length;\n    if (len > 1) {\n        return s[len - 2];\n    }\n    // Since the name is always a string, null is a safe sentinel value to\n    // return if we do not know the name of the (root) value.\n    return null;\n};\n// The value of the current property is always the final element of\n// this.stack.\nFPp.getValue = function getValue() {\n    var s = this.stack;\n    return s[s.length - 1];\n};\nFPp.valueIsDuplicate = function () {\n    var s = this.stack;\n    var valueIndex = s.length - 1;\n    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;\n};\nfunction getNodeHelper(path, count) {\n    var s = path.stack;\n    for (var i = s.length - 1; i >= 0; i -= 2) {\n        var value = s[i];\n        if (n.Node.check(value) && --count < 0) {\n            return value;\n        }\n    }\n    return null;\n}\nFPp.getNode = function getNode(count) {\n    if (count === void 0) { count = 0; }\n    return getNodeHelper(this, ~~count);\n};\nFPp.getParentNode = function getParentNode(count) {\n    if (count === void 0) { count = 0; }\n    return getNodeHelper(this, ~~count + 1);\n};\n// The length of the stack can be either even or odd, depending on whether\n// or not we have a name for the root value. The difference between the\n// index of the root value and the index of the final value is always\n// even, though, which allows us to return the root value in constant time\n// (i.e. without iterating backwards through the stack).\nFPp.getRootValue = function getRootValue() {\n    var s = this.stack;\n    if (s.length % 2 === 0) {\n        return s[1];\n    }\n    return s[0];\n};\n// Temporarily push properties named by string arguments given after the\n// callback function onto this.stack, then call the callback with a\n// reference to this (modified) FastPath object. Note that the stack will\n// be restored to its original state after the callback is finished, so it\n// is probably a mistake to retain a reference to the path.\nFPp.call = function call(callback /*, name1, name2, ... */) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n    for (var i = 1; i < argc; ++i) {\n        var name = arguments[i];\n        value = value[name];\n        s.push(name, value);\n    }\n    var result = callback(this);\n    s.length = origLen;\n    return result;\n};\n// Similar to FastPath.prototype.call, except that the value obtained by\n// accessing this.getValue()[name1][name2]... should be array-like. The\n// callback will be called with a reference to this path object for each\n// element of the array.\nFPp.each = function each(callback /*, name1, name2, ... */) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n    for (var i = 1; i < argc; ++i) {\n        var name = arguments[i];\n        value = value[name];\n        s.push(name, value);\n    }\n    for (var i = 0; i < value.length; ++i) {\n        if (i in value) {\n            s.push(i, value[i]);\n            // If the callback needs to know the value of i, call\n            // path.getName(), assuming path is the parameter name.\n            callback(this);\n            s.length -= 2;\n        }\n    }\n    s.length = origLen;\n};\n// Similar to FastPath.prototype.each, except that the results of the\n// callback function invocations are stored in an array and returned at\n// the end of the iteration.\nFPp.map = function map(callback /*, name1, name2, ... */) {\n    var s = this.stack;\n    var origLen = s.length;\n    var value = s[origLen - 1];\n    var argc = arguments.length;\n    for (var i = 1; i < argc; ++i) {\n        var name = arguments[i];\n        value = value[name];\n        s.push(name, value);\n    }\n    var result = new Array(value.length);\n    for (var i = 0; i < value.length; ++i) {\n        if (i in value) {\n            s.push(i, value[i]);\n            result[i] = callback(this, i);\n            s.length -= 2;\n        }\n    }\n    s.length = origLen;\n    return result;\n};\n// Returns true if the node at the tip of the path is wrapped with\n// parentheses, OR if the only reason the node needed parentheses was that\n// it couldn't be the first expression in the enclosing statement (see\n// FastPath#canBeFirstInStatement), and it has an opening `(` character.\n// For example, the FunctionExpression in `(function(){}())` appears to\n// need parentheses only because it's the first expression in the AST, but\n// since it happens to be preceded by a `(` (which is not apparent from\n// the AST but can be determined using FastPath#getPrevToken), there is no\n// ambiguity about how to parse it, so it counts as having parentheses,\n// even though it is not immediately followed by a `)`.\nFPp.hasParens = function () {\n    var node = this.getNode();\n    var prevToken = this.getPrevToken(node);\n    if (!prevToken) {\n        return false;\n    }\n    var nextToken = this.getNextToken(node);\n    if (!nextToken) {\n        return false;\n    }\n    if (prevToken.value === \"(\") {\n        if (nextToken.value === \")\") {\n            // If the node preceded by a `(` token and followed by a `)` token,\n            // then of course it has parentheses.\n            return true;\n        }\n        // If this is one of the few Expression types that can't come first in\n        // the enclosing statement because of parsing ambiguities (namely,\n        // FunctionExpression, ObjectExpression, and ClassExpression) and\n        // this.firstInStatement() returns true, and the node would not need\n        // parentheses in an expression context because this.needsParens(true)\n        // returns false, then it just needs an opening parenthesis to resolve\n        // the parsing ambiguity that made it appear to need parentheses.\n        var justNeedsOpeningParen = !this.canBeFirstInStatement() &&\n            this.firstInStatement() &&\n            !this.needsParens(true);\n        if (justNeedsOpeningParen) {\n            return true;\n        }\n    }\n    return false;\n};\nFPp.getPrevToken = function (node) {\n    node = node || this.getNode();\n    var loc = node && node.loc;\n    var tokens = loc && loc.tokens;\n    if (tokens && loc.start.token > 0) {\n        var token = tokens[loc.start.token - 1];\n        if (token) {\n            // Do not return tokens that fall outside the root subtree.\n            var rootLoc = this.getRootValue().loc;\n            if (util.comparePos(rootLoc.start, token.loc.start) <= 0) {\n                return token;\n            }\n        }\n    }\n    return null;\n};\nFPp.getNextToken = function (node) {\n    node = node || this.getNode();\n    var loc = node && node.loc;\n    var tokens = loc && loc.tokens;\n    if (tokens && loc.end.token < tokens.length) {\n        var token = tokens[loc.end.token];\n        if (token) {\n            // Do not return tokens that fall outside the root subtree.\n            var rootLoc = this.getRootValue().loc;\n            if (util.comparePos(token.loc.end, rootLoc.end) <= 0) {\n                return token;\n            }\n        }\n    }\n    return null;\n};\n// Inspired by require(\"ast-types\").NodePath.prototype.needsParens, but\n// more efficient because we're iterating backwards through a stack.\nFPp.needsParens = function (assumeExpressionContext) {\n    var node = this.getNode();\n    // This needs to come before `if (!parent) { return false }` because\n    // an object destructuring assignment requires parens for\n    // correctness even when it's the topmost expression.\n    if (node.type === \"AssignmentExpression\" &&\n        node.left.type === \"ObjectPattern\") {\n        return true;\n    }\n    var parent = this.getParentNode();\n    var name = this.getName();\n    // If the value of this path is some child of a Node and not a Node\n    // itself, then it doesn't need parentheses. Only Node objects (in fact,\n    // only Expression nodes) need parentheses.\n    if (this.getValue() !== node) {\n        return false;\n    }\n    // Only statements don't need parentheses.\n    if (n.Statement.check(node)) {\n        return false;\n    }\n    // Identifiers never need parentheses.\n    if (node.type === \"Identifier\") {\n        return false;\n    }\n    if (parent && parent.type === \"ParenthesizedExpression\") {\n        return false;\n    }\n    if (node.extra && node.extra.parenthesized) {\n        return true;\n    }\n    if (!parent)\n        return false;\n    // Wrap e.g. `-1` in parentheses inside `(-1) ** 2`.\n    if (node.type === \"UnaryExpression\" &&\n        parent.type === \"BinaryExpression\" &&\n        name === \"left\" &&\n        parent.left === node &&\n        parent.operator === \"**\") {\n        return true;\n    }\n    switch (node.type) {\n        case \"UnaryExpression\":\n        case \"SpreadElement\":\n        case \"SpreadProperty\":\n            return (parent.type === \"MemberExpression\" &&\n                name === \"object\" &&\n                parent.object === node);\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n            switch (parent.type) {\n                case \"CallExpression\":\n                    return name === \"callee\" && parent.callee === node;\n                case \"UnaryExpression\":\n                case \"SpreadElement\":\n                case \"SpreadProperty\":\n                    return true;\n                case \"MemberExpression\":\n                    return name === \"object\" && parent.object === node;\n                case \"BinaryExpression\":\n                case \"LogicalExpression\": {\n                    var po = parent.operator;\n                    var pp = PRECEDENCE[po];\n                    var no = node.operator;\n                    var np = PRECEDENCE[no];\n                    if (pp > np) {\n                        return true;\n                    }\n                    if (pp === np && name === \"right\") {\n                        (0, tiny_invariant_1.default)(parent.right === node);\n                        return true;\n                    }\n                    break;\n                }\n                default:\n                    return false;\n            }\n            break;\n        case \"SequenceExpression\":\n            switch (parent.type) {\n                case \"ReturnStatement\":\n                    return false;\n                case \"ForStatement\":\n                    // Although parentheses wouldn't hurt around sequence expressions in\n                    // the head of for loops, traditional style dictates that e.g. i++,\n                    // j++ should not be wrapped with parentheses.\n                    return false;\n                case \"ExpressionStatement\":\n                    return name !== \"expression\";\n                default:\n                    // Otherwise err on the side of overparenthesization, adding\n                    // explicit exceptions above if this proves overzealous.\n                    return true;\n            }\n        case \"OptionalIndexedAccessType\":\n            return node.optional && parent.type === \"IndexedAccessType\";\n        case \"IntersectionTypeAnnotation\":\n        case \"UnionTypeAnnotation\":\n            return parent.type === \"NullableTypeAnnotation\";\n        case \"Literal\":\n            return (parent.type === \"MemberExpression\" &&\n                isNumber.check(node.value) &&\n                name === \"object\" &&\n                parent.object === node);\n        // Babel 6 Literal split\n        case \"NumericLiteral\":\n            return (parent.type === \"MemberExpression\" &&\n                name === \"object\" &&\n                parent.object === node);\n        case \"YieldExpression\":\n        case \"AwaitExpression\":\n        case \"AssignmentExpression\":\n        case \"ConditionalExpression\":\n            switch (parent.type) {\n                case \"UnaryExpression\":\n                case \"SpreadElement\":\n                case \"SpreadProperty\":\n                case \"BinaryExpression\":\n                case \"LogicalExpression\":\n                    return true;\n                case \"CallExpression\":\n                case \"NewExpression\":\n                    return name === \"callee\" && parent.callee === node;\n                case \"ConditionalExpression\":\n                    return name === \"test\" && parent.test === node;\n                case \"MemberExpression\":\n                    return name === \"object\" && parent.object === node;\n                default:\n                    return false;\n            }\n        case \"ArrowFunctionExpression\":\n            if (n.CallExpression.check(parent) &&\n                name === \"callee\" &&\n                parent.callee === node) {\n                return true;\n            }\n            if (n.MemberExpression.check(parent) &&\n                name === \"object\" &&\n                parent.object === node) {\n                return true;\n            }\n            if (n.TSAsExpression &&\n                n.TSAsExpression.check(parent) &&\n                name === \"expression\" &&\n                parent.expression === node) {\n                return true;\n            }\n            return isBinary(parent);\n        case \"ObjectExpression\":\n            if (parent.type === \"ArrowFunctionExpression\" &&\n                name === \"body\" &&\n                parent.body === node) {\n                return true;\n            }\n            break;\n        case \"TSAsExpression\":\n            if (parent.type === \"ArrowFunctionExpression\" &&\n                name === \"body\" &&\n                parent.body === node &&\n                node.expression.type === \"ObjectExpression\") {\n                return true;\n            }\n            break;\n        case \"CallExpression\":\n            if (name === \"declaration\" &&\n                n.ExportDefaultDeclaration.check(parent) &&\n                n.FunctionExpression.check(node.callee)) {\n                return true;\n            }\n    }\n    if (parent.type === \"NewExpression\" &&\n        name === \"callee\" &&\n        parent.callee === node) {\n        return containsCallExpression(node);\n    }\n    if (assumeExpressionContext !== true &&\n        !this.canBeFirstInStatement() &&\n        this.firstInStatement()) {\n        return true;\n    }\n    return false;\n};\nfunction isBinary(node) {\n    return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);\n}\n// @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]\nfunction isUnaryLike(node) {\n    return (n.UnaryExpression.check(node) ||\n        // I considered making SpreadElement and SpreadProperty subtypes of\n        // UnaryExpression, but they're not really Expression nodes.\n        (n.SpreadElement && n.SpreadElement.check(node)) ||\n        (n.SpreadProperty && n.SpreadProperty.check(node)));\n}\nfunction containsCallExpression(node) {\n    if (n.CallExpression.check(node)) {\n        return true;\n    }\n    if (isArray.check(node)) {\n        return node.some(containsCallExpression);\n    }\n    if (n.Node.check(node)) {\n        return types.someField(node, function (_name, child) {\n            return containsCallExpression(child);\n        });\n    }\n    return false;\n}\nFPp.canBeFirstInStatement = function () {\n    var node = this.getNode();\n    if (n.FunctionExpression.check(node)) {\n        return false;\n    }\n    if (n.ObjectExpression.check(node)) {\n        return false;\n    }\n    if (n.ClassExpression.check(node)) {\n        return false;\n    }\n    return true;\n};\nFPp.firstInStatement = function () {\n    var s = this.stack;\n    var parentName, parent;\n    var childName, child;\n    for (var i = s.length - 1; i >= 0; i -= 2) {\n        if (n.Node.check(s[i])) {\n            childName = parentName;\n            child = parent;\n            parentName = s[i - 1];\n            parent = s[i];\n        }\n        if (!parent || !child) {\n            continue;\n        }\n        if (n.BlockStatement.check(parent) &&\n            parentName === \"body\" &&\n            childName === 0) {\n            (0, tiny_invariant_1.default)(parent.body[0] === child);\n            return true;\n        }\n        if (n.ExpressionStatement.check(parent) && childName === \"expression\") {\n            (0, tiny_invariant_1.default)(parent.expression === child);\n            return true;\n        }\n        if (n.AssignmentExpression.check(parent) && childName === \"left\") {\n            (0, tiny_invariant_1.default)(parent.left === child);\n            return true;\n        }\n        if (n.ArrowFunctionExpression.check(parent) && childName === \"body\") {\n            (0, tiny_invariant_1.default)(parent.body === child);\n            return true;\n        }\n        // s[i + 1] and s[i + 2] represent the array between the parent\n        // SequenceExpression node and its child nodes\n        if (n.SequenceExpression.check(parent) &&\n            s[i + 1] === \"expressions\" &&\n            childName === 0) {\n            (0, tiny_invariant_1.default)(parent.expressions[0] === child);\n            continue;\n        }\n        if (n.CallExpression.check(parent) && childName === \"callee\") {\n            (0, tiny_invariant_1.default)(parent.callee === child);\n            continue;\n        }\n        if (n.MemberExpression.check(parent) && childName === \"object\") {\n            (0, tiny_invariant_1.default)(parent.object === child);\n            continue;\n        }\n        if (n.ConditionalExpression.check(parent) && childName === \"test\") {\n            (0, tiny_invariant_1.default)(parent.test === child);\n            continue;\n        }\n        if (isBinary(parent) && childName === \"left\") {\n            (0, tiny_invariant_1.default)(parent.left === child);\n            continue;\n        }\n        if (n.UnaryExpression.check(parent) &&\n            !parent.prefix &&\n            childName === \"argument\") {\n            (0, tiny_invariant_1.default)(parent.argument === child);\n            continue;\n        }\n        return false;\n    }\n    return true;\n};\nexports.default = FastPath;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getReprinter = exports.Patcher = void 0;\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar linesModule = tslib_1.__importStar(require(\"./lines\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nvar Printable = types.namedTypes.Printable;\nvar Expression = types.namedTypes.Expression;\nvar ReturnStatement = types.namedTypes.ReturnStatement;\nvar SourceLocation = types.namedTypes.SourceLocation;\nvar util_1 = require(\"./util\");\nvar fast_path_1 = tslib_1.__importDefault(require(\"./fast-path\"));\nvar isObject = types.builtInTypes.object;\nvar isArray = types.builtInTypes.array;\nvar isString = types.builtInTypes.string;\nvar riskyAdjoiningCharExp = /[0-9a-z_$]/i;\nvar Patcher = function Patcher(lines) {\n    (0, tiny_invariant_1.default)(this instanceof Patcher);\n    (0, tiny_invariant_1.default)(lines instanceof linesModule.Lines);\n    var self = this, replacements = [];\n    self.replace = function (loc, lines) {\n        if (isString.check(lines))\n            lines = linesModule.fromString(lines);\n        replacements.push({\n            lines: lines,\n            start: loc.start,\n            end: loc.end,\n        });\n    };\n    self.get = function (loc) {\n        // If no location is provided, return the complete Lines object.\n        loc = loc || {\n            start: { line: 1, column: 0 },\n            end: { line: lines.length, column: lines.getLineLength(lines.length) },\n        };\n        var sliceFrom = loc.start, toConcat = [];\n        function pushSlice(from, to) {\n            (0, tiny_invariant_1.default)((0, util_1.comparePos)(from, to) <= 0);\n            toConcat.push(lines.slice(from, to));\n        }\n        replacements\n            .sort(function (a, b) { return (0, util_1.comparePos)(a.start, b.start); })\n            .forEach(function (rep) {\n            if ((0, util_1.comparePos)(sliceFrom, rep.start) > 0) {\n                // Ignore nested replacement ranges.\n            }\n            else {\n                pushSlice(sliceFrom, rep.start);\n                toConcat.push(rep.lines);\n                sliceFrom = rep.end;\n            }\n        });\n        pushSlice(sliceFrom, loc.end);\n        return linesModule.concat(toConcat);\n    };\n};\nexports.Patcher = Patcher;\nvar Pp = Patcher.prototype;\nPp.tryToReprintComments = function (newNode, oldNode, print) {\n    var patcher = this;\n    if (!newNode.comments && !oldNode.comments) {\n        // We were (vacuously) able to reprint all the comments!\n        return true;\n    }\n    var newPath = fast_path_1.default.from(newNode);\n    var oldPath = fast_path_1.default.from(oldNode);\n    newPath.stack.push(\"comments\", getSurroundingComments(newNode));\n    oldPath.stack.push(\"comments\", getSurroundingComments(oldNode));\n    var reprints = [];\n    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);\n    // No need to pop anything from newPath.stack or oldPath.stack, since\n    // newPath and oldPath are fresh local variables.\n    if (ableToReprintComments && reprints.length > 0) {\n        reprints.forEach(function (reprint) {\n            var oldComment = reprint.oldPath.getValue();\n            (0, tiny_invariant_1.default)(oldComment.leading || oldComment.trailing);\n            patcher.replace(oldComment.loc, \n            // Comments can't have .comments, so it doesn't matter whether we\n            // print with comments or without.\n            print(reprint.newPath).indentTail(oldComment.loc.indent));\n        });\n    }\n    return ableToReprintComments;\n};\n// Get all comments that are either leading or trailing, ignoring any\n// comments that occur inside node.loc. Returns an empty array for nodes\n// with no leading or trailing comments.\nfunction getSurroundingComments(node) {\n    var result = [];\n    if (node.comments && node.comments.length > 0) {\n        node.comments.forEach(function (comment) {\n            if (comment.leading || comment.trailing) {\n                result.push(comment);\n            }\n        });\n    }\n    return result;\n}\nPp.deleteComments = function (node) {\n    if (!node.comments) {\n        return;\n    }\n    var patcher = this;\n    node.comments.forEach(function (comment) {\n        if (comment.leading) {\n            // Delete leading comments along with any trailing whitespace they\n            // might have.\n            patcher.replace({\n                start: comment.loc.start,\n                end: node.loc.lines.skipSpaces(comment.loc.end, false, false),\n            }, \"\");\n        }\n        else if (comment.trailing) {\n            // Delete trailing comments along with any leading whitespace they\n            // might have.\n            patcher.replace({\n                start: node.loc.lines.skipSpaces(comment.loc.start, true, false),\n                end: comment.loc.end,\n            }, \"\");\n        }\n    });\n};\nfunction getReprinter(path) {\n    (0, tiny_invariant_1.default)(path instanceof fast_path_1.default);\n    // Make sure that this path refers specifically to a Node, rather than\n    // some non-Node subproperty of a Node.\n    var node = path.getValue();\n    if (!Printable.check(node))\n        return;\n    var orig = node.original;\n    var origLoc = orig && orig.loc;\n    var lines = origLoc && origLoc.lines;\n    var reprints = [];\n    if (!lines || !findReprints(path, reprints))\n        return;\n    return function (print) {\n        var patcher = new Patcher(lines);\n        reprints.forEach(function (reprint) {\n            var newNode = reprint.newPath.getValue();\n            var oldNode = reprint.oldPath.getValue();\n            SourceLocation.assert(oldNode.loc, true);\n            var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);\n            if (needToPrintNewPathWithComments) {\n                // Since we were not able to preserve all leading/trailing\n                // comments, we delete oldNode's comments, print newPath with\n                // comments, and then patch the resulting lines where oldNode used\n                // to be.\n                patcher.deleteComments(oldNode);\n            }\n            var newLines = print(reprint.newPath, {\n                includeComments: needToPrintNewPathWithComments,\n                // If the oldNode we're replacing already had parentheses, we may\n                // not need to print the new node with any extra parentheses,\n                // because the existing parentheses will suffice. However, if the\n                // newNode has a different type than the oldNode, let the printer\n                // decide if reprint.newPath needs parentheses, as usual.\n                avoidRootParens: oldNode.type === newNode.type && reprint.oldPath.hasParens(),\n            }).indentTail(oldNode.loc.indent);\n            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);\n            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);\n            // If we try to replace the argument of a ReturnStatement like\n            // return\"asdf\" with e.g. a literal null expression, we run the risk\n            // of ending up with returnnull, so we need to add an extra leading\n            // space in situations where that might happen. Likewise for\n            // \"asdf\"in obj. See #170.\n            if (nls || nts) {\n                var newParts = [];\n                nls && newParts.push(\" \");\n                newParts.push(newLines);\n                nts && newParts.push(\" \");\n                newLines = linesModule.concat(newParts);\n            }\n            patcher.replace(oldNode.loc, newLines);\n        });\n        // Recall that origLoc is the .loc of an ancestor node that is\n        // guaranteed to contain all the reprinted nodes and comments.\n        var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);\n        if (path.needsParens()) {\n            return linesModule.concat([\"(\", patchedLines, \")\"]);\n        }\n        return patchedLines;\n    };\n}\nexports.getReprinter = getReprinter;\n// If the last character before oldLoc and the first character of newLines\n// are both identifier characters, they must be separated by a space,\n// otherwise they will most likely get fused together into a single token.\nfunction needsLeadingSpace(oldLines, oldLoc, newLines) {\n    var posBeforeOldLoc = (0, util_1.copyPos)(oldLoc.start);\n    // The character just before the location occupied by oldNode.\n    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) && oldLines.charAt(posBeforeOldLoc);\n    // First character of the reprinted node.\n    var newFirstChar = newLines.charAt(newLines.firstPos());\n    return (charBeforeOldLoc &&\n        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&\n        newFirstChar &&\n        riskyAdjoiningCharExp.test(newFirstChar));\n}\n// If the last character of newLines and the first character after oldLoc\n// are both identifier characters, they must be separated by a space,\n// otherwise they will most likely get fused together into a single token.\nfunction needsTrailingSpace(oldLines, oldLoc, newLines) {\n    // The character just after the location occupied by oldNode.\n    var charAfterOldLoc = oldLines.charAt(oldLoc.end);\n    var newLastPos = newLines.lastPos();\n    // Last character of the reprinted node.\n    var newLastChar = newLines.prevPos(newLastPos) && newLines.charAt(newLastPos);\n    return (newLastChar &&\n        riskyAdjoiningCharExp.test(newLastChar) &&\n        charAfterOldLoc &&\n        riskyAdjoiningCharExp.test(charAfterOldLoc));\n}\nfunction findReprints(newPath, reprints) {\n    var newNode = newPath.getValue();\n    Printable.assert(newNode);\n    var oldNode = newNode.original;\n    Printable.assert(oldNode);\n    (0, tiny_invariant_1.default)(reprints.length === 0);\n    if (newNode.type !== oldNode.type) {\n        return false;\n    }\n    var oldPath = new fast_path_1.default(oldNode);\n    var canReprint = findChildReprints(newPath, oldPath, reprints);\n    if (!canReprint) {\n        // Make absolutely sure the calling code does not attempt to reprint\n        // any nodes.\n        reprints.length = 0;\n    }\n    return canReprint;\n}\nfunction findAnyReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    var oldNode = oldPath.getValue();\n    if (newNode === oldNode)\n        return true;\n    if (isArray.check(newNode))\n        return findArrayReprints(newPath, oldPath, reprints);\n    if (isObject.check(newNode))\n        return findObjectReprints(newPath, oldPath, reprints);\n    return false;\n}\nfunction findArrayReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    var oldNode = oldPath.getValue();\n    if (newNode === oldNode ||\n        newPath.valueIsDuplicate() ||\n        oldPath.valueIsDuplicate()) {\n        return true;\n    }\n    isArray.assert(newNode);\n    var len = newNode.length;\n    if (!(isArray.check(oldNode) && oldNode.length === len))\n        return false;\n    for (var i = 0; i < len; ++i) {\n        newPath.stack.push(i, newNode[i]);\n        oldPath.stack.push(i, oldNode[i]);\n        var canReprint = findAnyReprints(newPath, oldPath, reprints);\n        newPath.stack.length -= 2;\n        oldPath.stack.length -= 2;\n        if (!canReprint) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction findObjectReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    isObject.assert(newNode);\n    if (newNode.original === null) {\n        // If newNode.original node was set to null, reprint the node.\n        return false;\n    }\n    var oldNode = oldPath.getValue();\n    if (!isObject.check(oldNode))\n        return false;\n    if (newNode === oldNode ||\n        newPath.valueIsDuplicate() ||\n        oldPath.valueIsDuplicate()) {\n        return true;\n    }\n    if (Printable.check(newNode)) {\n        if (!Printable.check(oldNode)) {\n            return false;\n        }\n        var newParentNode = newPath.getParentNode();\n        var oldParentNode = oldPath.getParentNode();\n        if (oldParentNode !== null &&\n            oldParentNode.type === \"FunctionTypeAnnotation\" &&\n            newParentNode !== null &&\n            newParentNode.type === \"FunctionTypeAnnotation\") {\n            var oldNeedsParens = oldParentNode.params.length !== 1 || !!oldParentNode.params[0].name;\n            var newNeedParens = newParentNode.params.length !== 1 || !!newParentNode.params[0].name;\n            if (!oldNeedsParens && newNeedParens) {\n                return false;\n            }\n        }\n        // Here we need to decide whether the reprinted code for newNode is\n        // appropriate for patching into the location of oldNode.\n        if (newNode.type === oldNode.type) {\n            var childReprints = [];\n            if (findChildReprints(newPath, oldPath, childReprints)) {\n                reprints.push.apply(reprints, childReprints);\n            }\n            else if (oldNode.loc) {\n                // If we have no .loc information for oldNode, then we won't be\n                // able to reprint it.\n                reprints.push({\n                    oldPath: oldPath.copy(),\n                    newPath: newPath.copy(),\n                });\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        if (Expression.check(newNode) &&\n            Expression.check(oldNode) &&\n            // If we have no .loc information for oldNode, then we won't be\n            // able to reprint it.\n            oldNode.loc) {\n            // If both nodes are subtypes of Expression, then we should be able\n            // to fill the location occupied by the old node with code printed\n            // for the new node with no ill consequences.\n            reprints.push({\n                oldPath: oldPath.copy(),\n                newPath: newPath.copy(),\n            });\n            return true;\n        }\n        // The nodes have different types, and at least one of the types is\n        // not a subtype of the Expression type, so we cannot safely assume\n        // the nodes are syntactically interchangeable.\n        return false;\n    }\n    return findChildReprints(newPath, oldPath, reprints);\n}\nfunction findChildReprints(newPath, oldPath, reprints) {\n    var newNode = newPath.getValue();\n    var oldNode = oldPath.getValue();\n    isObject.assert(newNode);\n    isObject.assert(oldNode);\n    if (newNode.original === null) {\n        // If newNode.original node was set to null, reprint the node.\n        return false;\n    }\n    // If this node needs parentheses and will not be wrapped with\n    // parentheses when reprinted, then return false to skip reprinting and\n    // let it be printed generically.\n    if (newPath.needsParens() && !oldPath.hasParens()) {\n        return false;\n    }\n    var keys = (0, util_1.getUnionOfKeys)(oldNode, newNode);\n    if (oldNode.type === \"File\" || newNode.type === \"File\") {\n        // Don't bother traversing file.tokens, an often very large array\n        // returned by Babylon, and useless for our purposes.\n        delete keys.tokens;\n    }\n    // Don't bother traversing .loc objects looking for reprintable nodes.\n    delete keys.loc;\n    var originalReprintCount = reprints.length;\n    for (var k in keys) {\n        if (k.charAt(0) === \"_\") {\n            // Ignore \"private\" AST properties added by e.g. Babel plugins and\n            // parsers like Babylon.\n            continue;\n        }\n        newPath.stack.push(k, types.getFieldValue(newNode, k));\n        oldPath.stack.push(k, types.getFieldValue(oldNode, k));\n        var canReprint = findAnyReprints(newPath, oldPath, reprints);\n        newPath.stack.length -= 2;\n        oldPath.stack.length -= 2;\n        if (!canReprint) {\n            return false;\n        }\n    }\n    // Return statements might end up running into ASI issues due to\n    // comments inserted deep within the tree, so reprint them if anything\n    // changed within them.\n    if (ReturnStatement.check(newPath.getNode()) &&\n        reprints.length > originalReprintCount) {\n        return false;\n    }\n    return true;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Printer = void 0;\nvar tslib_1 = require(\"tslib\");\nvar tiny_invariant_1 = tslib_1.__importDefault(require(\"tiny-invariant\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nvar comments_1 = require(\"./comments\");\nvar fast_path_1 = tslib_1.__importDefault(require(\"./fast-path\"));\nvar lines_1 = require(\"./lines\");\nvar options_1 = require(\"./options\");\nvar patcher_1 = require(\"./patcher\");\nvar util = tslib_1.__importStar(require(\"./util\"));\nvar namedTypes = types.namedTypes;\nvar isString = types.builtInTypes.string;\nvar isObject = types.builtInTypes.object;\nvar PrintResult = function PrintResult(code, sourceMap) {\n    (0, tiny_invariant_1.default)(this instanceof PrintResult);\n    isString.assert(code);\n    this.code = code;\n    if (sourceMap) {\n        isObject.assert(sourceMap);\n        this.map = sourceMap;\n    }\n};\nvar PRp = PrintResult.prototype;\nvar warnedAboutToString = false;\nPRp.toString = function () {\n    if (!warnedAboutToString) {\n        console.warn(\"Deprecation warning: recast.print now returns an object with \" +\n            \"a .code property. You appear to be treating the object as a \" +\n            \"string, which might still work but is strongly discouraged.\");\n        warnedAboutToString = true;\n    }\n    return this.code;\n};\nvar emptyPrintResult = new PrintResult(\"\");\nvar Printer = function Printer(config) {\n    (0, tiny_invariant_1.default)(this instanceof Printer);\n    var explicitTabWidth = config && config.tabWidth;\n    config = (0, options_1.normalize)(config);\n    // It's common for client code to pass the same options into both\n    // recast.parse and recast.print, but the Printer doesn't need (and\n    // can be confused by) config.sourceFileName, so we null it out.\n    config.sourceFileName = null;\n    // Non-destructively modifies options with overrides, and returns a\n    // new print function that uses the modified options.\n    function makePrintFunctionWith(options, overrides) {\n        options = Object.assign({}, options, overrides);\n        return function (path) { return print(path, options); };\n    }\n    function print(path, options) {\n        (0, tiny_invariant_1.default)(path instanceof fast_path_1.default);\n        options = options || {};\n        if (options.includeComments) {\n            return (0, comments_1.printComments)(path, makePrintFunctionWith(options, {\n                includeComments: false,\n            }));\n        }\n        var oldTabWidth = config.tabWidth;\n        if (!explicitTabWidth) {\n            var loc = path.getNode().loc;\n            if (loc && loc.lines && loc.lines.guessTabWidth) {\n                config.tabWidth = loc.lines.guessTabWidth();\n            }\n        }\n        var reprinter = (0, patcher_1.getReprinter)(path);\n        var lines = reprinter\n            ? // Since the print function that we pass to the reprinter will\n                // be used to print \"new\" nodes, it's tempting to think we\n                // should pass printRootGenerically instead of print, to avoid\n                // calling maybeReprint again, but that would be a mistake\n                // because the new nodes might not be entirely new, but merely\n                // moved from elsewhere in the AST. The print function is the\n                // right choice because it gives us the opportunity to reprint\n                // such nodes using their original source.\n                reprinter(print)\n            : genericPrint(path, config, options, makePrintFunctionWith(options, {\n                includeComments: true,\n                avoidRootParens: false,\n            }));\n        config.tabWidth = oldTabWidth;\n        return lines;\n    }\n    this.print = function (ast) {\n        if (!ast) {\n            return emptyPrintResult;\n        }\n        var lines = print(fast_path_1.default.from(ast), {\n            includeComments: true,\n            avoidRootParens: false,\n        });\n        return new PrintResult(lines.toString(config), util.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));\n    };\n    this.printGenerically = function (ast) {\n        if (!ast) {\n            return emptyPrintResult;\n        }\n        // Print the entire AST generically.\n        function printGenerically(path) {\n            return (0, comments_1.printComments)(path, function (path) {\n                return genericPrint(path, config, {\n                    includeComments: true,\n                    avoidRootParens: false,\n                }, printGenerically);\n            });\n        }\n        var path = fast_path_1.default.from(ast);\n        var oldReuseWhitespace = config.reuseWhitespace;\n        // Do not reuse whitespace (or anything else, for that matter)\n        // when printing generically.\n        config.reuseWhitespace = false;\n        // TODO Allow printing of comments?\n        var pr = new PrintResult(printGenerically(path).toString(config));\n        config.reuseWhitespace = oldReuseWhitespace;\n        return pr;\n    };\n};\nexports.Printer = Printer;\nfunction genericPrint(path, config, options, printPath) {\n    (0, tiny_invariant_1.default)(path instanceof fast_path_1.default);\n    var node = path.getValue();\n    var parts = [];\n    var linesWithoutParens = genericPrintNoParens(path, config, printPath);\n    if (!node || linesWithoutParens.isEmpty()) {\n        return linesWithoutParens;\n    }\n    var shouldAddParens = false;\n    var decoratorsLines = printDecorators(path, printPath);\n    if (decoratorsLines.isEmpty()) {\n        // Nodes with decorators can't have parentheses, so we can avoid\n        // computing path.needsParens() except in this case.\n        if (!options.avoidRootParens) {\n            shouldAddParens = path.needsParens();\n        }\n    }\n    else {\n        parts.push(decoratorsLines);\n    }\n    if (shouldAddParens) {\n        parts.unshift(\"(\");\n    }\n    parts.push(linesWithoutParens);\n    if (shouldAddParens) {\n        parts.push(\")\");\n    }\n    return (0, lines_1.concat)(parts);\n}\n// Note that the `options` parameter of this function is what other\n// functions in this file call the `config` object (that is, the\n// configuration object originally passed into the Printer constructor).\n// Its properties are documented in lib/options.js.\nfunction genericPrintNoParens(path, options, print) {\n    var n = path.getValue();\n    if (!n) {\n        return (0, lines_1.fromString)(\"\");\n    }\n    if (typeof n === \"string\") {\n        return (0, lines_1.fromString)(n, options);\n    }\n    namedTypes.Printable.assert(n);\n    var parts = [];\n    switch (n.type) {\n        case \"File\":\n            return path.call(print, \"program\");\n        case \"Program\":\n            // Babel 6\n            if (n.directives) {\n                path.each(function (childPath) {\n                    parts.push(print(childPath), \";\\n\");\n                }, \"directives\");\n            }\n            if (n.interpreter) {\n                parts.push(path.call(print, \"interpreter\"));\n            }\n            parts.push(path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, \"body\"));\n            return (0, lines_1.concat)(parts);\n        case \"Noop\": // Babel extension.\n        case \"EmptyStatement\":\n            return (0, lines_1.fromString)(\"\");\n        case \"ExpressionStatement\":\n            return (0, lines_1.concat)([path.call(print, \"expression\"), \";\"]);\n        case \"ParenthesizedExpression\": // Babel extension.\n            return (0, lines_1.concat)([\"(\", path.call(print, \"expression\"), \")\"]);\n        case \"BinaryExpression\":\n        case \"LogicalExpression\":\n        case \"AssignmentExpression\":\n            return (0, lines_1.fromString)(\" \").join([\n                path.call(print, \"left\"),\n                n.operator,\n                path.call(print, \"right\"),\n            ]);\n        case \"AssignmentPattern\":\n            return (0, lines_1.concat)([\n                path.call(print, \"left\"),\n                \" = \",\n                path.call(print, \"right\"),\n            ]);\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\": {\n            parts.push(path.call(print, \"object\"));\n            var property = path.call(print, \"property\");\n            // Like n.optional, except with defaults applied, so optional\n            // defaults to true for OptionalMemberExpression nodes.\n            var optional = types.getFieldValue(n, \"optional\");\n            if (n.computed) {\n                parts.push(optional ? \"?.[\" : \"[\", property, \"]\");\n            }\n            else {\n                parts.push(optional ? \"?.\" : \".\", property);\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ChainExpression\":\n            return path.call(print, \"expression\");\n        case \"MetaProperty\":\n            return (0, lines_1.concat)([\n                path.call(print, \"meta\"),\n                \".\",\n                path.call(print, \"property\"),\n            ]);\n        case \"BindExpression\":\n            if (n.object) {\n                parts.push(path.call(print, \"object\"));\n            }\n            parts.push(\"::\", path.call(print, \"callee\"));\n            return (0, lines_1.concat)(parts);\n        case \"Path\":\n            return (0, lines_1.fromString)(\".\").join(n.body);\n        case \"Identifier\":\n            return (0, lines_1.concat)([\n                (0, lines_1.fromString)(n.name, options),\n                n.optional ? \"?\" : \"\",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"SpreadElement\":\n        case \"SpreadElementPattern\":\n        case \"RestProperty\": // Babel 6 for ObjectPattern\n        case \"SpreadProperty\":\n        case \"SpreadPropertyPattern\":\n        case \"ObjectTypeSpreadProperty\":\n        case \"RestElement\":\n            return (0, lines_1.concat)([\n                \"...\",\n                path.call(print, \"argument\"),\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"TSDeclareFunction\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            if (n.async) {\n                parts.push(\"async \");\n            }\n            parts.push(\"function\");\n            if (n.generator)\n                parts.push(\"*\");\n            if (n.id) {\n                parts.push(\" \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\n            }\n            else {\n                if (n.typeParameters) {\n                    parts.push(path.call(print, \"typeParameters\"));\n                }\n            }\n            parts.push(\"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"returnType\"));\n            if (n.body) {\n                parts.push(\" \", path.call(print, \"body\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"ArrowFunctionExpression\":\n            if (n.async) {\n                parts.push(\"async \");\n            }\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            if (!options.arrowParensAlways &&\n                n.params.length === 1 &&\n                !n.rest &&\n                n.params[0].type === \"Identifier\" &&\n                !n.params[0].typeAnnotation &&\n                !n.returnType) {\n                parts.push(path.call(print, \"params\", 0));\n            }\n            else {\n                parts.push(\"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"returnType\"));\n            }\n            parts.push(\" => \", path.call(print, \"body\"));\n            return (0, lines_1.concat)(parts);\n        case \"MethodDefinition\":\n            return printMethod(path, options, print);\n        case \"YieldExpression\":\n            parts.push(\"yield\");\n            if (n.delegate)\n                parts.push(\"*\");\n            if (n.argument)\n                parts.push(\" \", path.call(print, \"argument\"));\n            return (0, lines_1.concat)(parts);\n        case \"AwaitExpression\":\n            parts.push(\"await\");\n            if (n.all)\n                parts.push(\"*\");\n            if (n.argument)\n                parts.push(\" \", path.call(print, \"argument\"));\n            return (0, lines_1.concat)(parts);\n        case \"ModuleExpression\":\n            return (0, lines_1.concat)([\n                \"module {\\n\",\n                path.call(print, \"body\").indent(options.tabWidth),\n                \"\\n}\",\n            ]);\n        case \"ModuleDeclaration\":\n            parts.push(\"module\", path.call(print, \"id\"));\n            if (n.source) {\n                (0, tiny_invariant_1.default)(!n.body);\n                parts.push(\"from\", path.call(print, \"source\"));\n            }\n            else {\n                parts.push(path.call(print, \"body\"));\n            }\n            return (0, lines_1.fromString)(\" \").join(parts);\n        case \"ImportSpecifier\":\n            if (n.importKind && n.importKind !== \"value\") {\n                parts.push(n.importKind + \" \");\n            }\n            if (n.imported) {\n                parts.push(path.call(print, \"imported\"));\n                if (n.local && n.local.name !== n.imported.name) {\n                    parts.push(\" as \", path.call(print, \"local\"));\n                }\n            }\n            else if (n.id) {\n                parts.push(path.call(print, \"id\"));\n                if (n.name) {\n                    parts.push(\" as \", path.call(print, \"name\"));\n                }\n            }\n            return (0, lines_1.concat)(parts);\n        case \"ExportSpecifier\":\n            if (n.exportKind && n.exportKind !== \"value\") {\n                parts.push(n.exportKind + \" \");\n            }\n            if (n.local) {\n                parts.push(path.call(print, \"local\"));\n                if (n.exported && n.exported.name !== n.local.name) {\n                    parts.push(\" as \", path.call(print, \"exported\"));\n                }\n            }\n            else if (n.id) {\n                parts.push(path.call(print, \"id\"));\n                if (n.name) {\n                    parts.push(\" as \", path.call(print, \"name\"));\n                }\n            }\n            return (0, lines_1.concat)(parts);\n        case \"ExportBatchSpecifier\":\n            return (0, lines_1.fromString)(\"*\");\n        case \"ImportNamespaceSpecifier\":\n            parts.push(\"* as \");\n            if (n.local) {\n                parts.push(path.call(print, \"local\"));\n            }\n            else if (n.id) {\n                parts.push(path.call(print, \"id\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"ImportDefaultSpecifier\":\n            if (n.local) {\n                return path.call(print, \"local\");\n            }\n            return path.call(print, \"id\");\n        case \"TSExportAssignment\":\n            return (0, lines_1.concat)([\"export = \", path.call(print, \"expression\")]);\n        case \"ExportDeclaration\":\n        case \"ExportDefaultDeclaration\":\n        case \"ExportNamedDeclaration\":\n            return printExportDeclaration(path, options, print);\n        case \"ExportAllDeclaration\":\n            parts.push(\"export *\");\n            if (n.exported) {\n                parts.push(\" as \", path.call(print, \"exported\"));\n            }\n            parts.push(\" from \", path.call(print, \"source\"), \";\");\n            return (0, lines_1.concat)(parts);\n        case \"TSNamespaceExportDeclaration\":\n            parts.push(\"export as namespace \", path.call(print, \"id\"));\n            return maybeAddSemicolon((0, lines_1.concat)(parts));\n        case \"ExportNamespaceSpecifier\":\n            return (0, lines_1.concat)([\"* as \", path.call(print, \"exported\")]);\n        case \"ExportDefaultSpecifier\":\n            return path.call(print, \"exported\");\n        case \"Import\":\n            return (0, lines_1.fromString)(\"import\", options);\n        // Recast and ast-types currently support dynamic import(...) using\n        // either this dedicated ImportExpression type or a CallExpression\n        // whose callee has type Import.\n        // https://github.com/benjamn/ast-types/pull/365#issuecomment-605214486\n        case \"ImportExpression\":\n            return (0, lines_1.concat)([\"import(\", path.call(print, \"source\"), \")\"]);\n        case \"ImportDeclaration\": {\n            parts.push(\"import \");\n            if (n.importKind && n.importKind !== \"value\") {\n                parts.push(n.importKind + \" \");\n            }\n            if (n.specifiers && n.specifiers.length > 0) {\n                var unbracedSpecifiers_1 = [];\n                var bracedSpecifiers_1 = [];\n                path.each(function (specifierPath) {\n                    var spec = specifierPath.getValue();\n                    if (spec.type === \"ImportSpecifier\") {\n                        bracedSpecifiers_1.push(print(specifierPath));\n                    }\n                    else if (spec.type === \"ImportDefaultSpecifier\" ||\n                        spec.type === \"ImportNamespaceSpecifier\") {\n                        unbracedSpecifiers_1.push(print(specifierPath));\n                    }\n                }, \"specifiers\");\n                unbracedSpecifiers_1.forEach(function (lines, i) {\n                    if (i > 0) {\n                        parts.push(\", \");\n                    }\n                    parts.push(lines);\n                });\n                if (bracedSpecifiers_1.length > 0) {\n                    var lines = (0, lines_1.fromString)(\", \").join(bracedSpecifiers_1);\n                    if (lines.getLineLength(1) > options.wrapColumn) {\n                        lines = (0, lines_1.concat)([\n                            (0, lines_1.fromString)(\",\\n\").join(bracedSpecifiers_1).indent(options.tabWidth),\n                            \",\",\n                        ]);\n                    }\n                    if (unbracedSpecifiers_1.length > 0) {\n                        parts.push(\", \");\n                    }\n                    if (lines.length > 1) {\n                        parts.push(\"{\\n\", lines, \"\\n}\");\n                    }\n                    else if (options.objectCurlySpacing) {\n                        parts.push(\"{ \", lines, \" }\");\n                    }\n                    else {\n                        parts.push(\"{\", lines, \"}\");\n                    }\n                }\n                parts.push(\" from \");\n            }\n            parts.push(path.call(print, \"source\"), maybePrintImportAssertions(path, options, print), \";\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ImportAttribute\":\n            return (0, lines_1.concat)([path.call(print, \"key\"), \": \", path.call(print, \"value\")]);\n        case \"StaticBlock\":\n            parts.push(\"static \");\n        // Intentionally fall through to BlockStatement below.\n        case \"BlockStatement\": {\n            var naked_1 = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, \"body\");\n            if (naked_1.isEmpty()) {\n                if (!n.directives || n.directives.length === 0) {\n                    parts.push(\"{}\");\n                    return (0, lines_1.concat)(parts);\n                }\n            }\n            parts.push(\"{\\n\");\n            // Babel 6\n            if (n.directives) {\n                path.each(function (childPath) {\n                    parts.push(maybeAddSemicolon(print(childPath).indent(options.tabWidth)), n.directives.length > 1 || !naked_1.isEmpty() ? \"\\n\" : \"\");\n                }, \"directives\");\n            }\n            parts.push(naked_1.indent(options.tabWidth));\n            parts.push(\"\\n}\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ReturnStatement\": {\n            parts.push(\"return\");\n            if (n.argument) {\n                var argLines = path.call(print, \"argument\");\n                if (argLines.startsWithComment() ||\n                    (argLines.length > 1 &&\n                        namedTypes.JSXElement &&\n                        namedTypes.JSXElement.check(n.argument))) {\n                    parts.push(\" (\\n\", argLines.indent(options.tabWidth), \"\\n)\");\n                }\n                else {\n                    parts.push(\" \", argLines);\n                }\n            }\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"CallExpression\":\n        case \"OptionalCallExpression\":\n            parts.push(path.call(print, \"callee\"));\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            if (n.typeArguments) {\n                parts.push(path.call(print, \"typeArguments\"));\n            }\n            // Like n.optional, but defaults to true for OptionalCallExpression\n            // nodes that are missing an n.optional property (unusual),\n            // according to the OptionalCallExpression definition in ast-types.\n            if (types.getFieldValue(n, \"optional\")) {\n                parts.push(\"?.\");\n            }\n            parts.push(printArgumentsList(path, options, print));\n            return (0, lines_1.concat)(parts);\n        case \"RecordExpression\":\n            parts.push(\"#\");\n        // Intentionally fall through to printing the object literal...\n        case \"ObjectExpression\":\n        case \"ObjectPattern\":\n        case \"ObjectTypeAnnotation\": {\n            var isTypeAnnotation_1 = n.type === \"ObjectTypeAnnotation\";\n            var separator_1 = options.flowObjectCommas\n                ? \",\"\n                : isTypeAnnotation_1\n                    ? \";\"\n                    : \",\";\n            var fields = [];\n            var allowBreak_1 = false;\n            if (isTypeAnnotation_1) {\n                fields.push(\"indexers\", \"callProperties\");\n                if (n.internalSlots != null) {\n                    fields.push(\"internalSlots\");\n                }\n            }\n            fields.push(\"properties\");\n            var len_1 = 0;\n            fields.forEach(function (field) {\n                len_1 += n[field].length;\n            });\n            var oneLine_1 = (isTypeAnnotation_1 && len_1 === 1) || len_1 === 0;\n            var leftBrace = n.exact ? \"{|\" : \"{\";\n            var rightBrace = n.exact ? \"|}\" : \"}\";\n            parts.push(oneLine_1 ? leftBrace : leftBrace + \"\\n\");\n            var leftBraceIndex = parts.length - 1;\n            var i_1 = 0;\n            fields.forEach(function (field) {\n                path.each(function (childPath) {\n                    var lines = print(childPath);\n                    if (!oneLine_1) {\n                        lines = lines.indent(options.tabWidth);\n                    }\n                    var multiLine = !isTypeAnnotation_1 && lines.length > 1;\n                    if (multiLine && allowBreak_1) {\n                        // Similar to the logic for BlockStatement.\n                        parts.push(\"\\n\");\n                    }\n                    parts.push(lines);\n                    if (i_1 < len_1 - 1) {\n                        // Add an extra line break if the previous object property\n                        // had a multi-line value.\n                        parts.push(separator_1 + (multiLine ? \"\\n\\n\" : \"\\n\"));\n                        allowBreak_1 = !multiLine;\n                    }\n                    else if (len_1 !== 1 && isTypeAnnotation_1) {\n                        parts.push(separator_1);\n                    }\n                    else if (!oneLine_1 &&\n                        util.isTrailingCommaEnabled(options, \"objects\") &&\n                        childPath.getValue().type !== \"RestElement\") {\n                        parts.push(separator_1);\n                    }\n                    i_1++;\n                }, field);\n            });\n            if (n.inexact) {\n                var line = (0, lines_1.fromString)(\"...\", options);\n                if (oneLine_1) {\n                    if (len_1 > 0) {\n                        parts.push(separator_1, \" \");\n                    }\n                    parts.push(line);\n                }\n                else {\n                    // No trailing separator after ... to maintain parity with prettier.\n                    parts.push(\"\\n\", line.indent(options.tabWidth));\n                }\n            }\n            parts.push(oneLine_1 ? rightBrace : \"\\n\" + rightBrace);\n            if (i_1 !== 0 && oneLine_1 && options.objectCurlySpacing) {\n                parts[leftBraceIndex] = leftBrace + \" \";\n                parts[parts.length - 1] = \" \" + rightBrace;\n            }\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"PropertyPattern\":\n            return (0, lines_1.concat)([\n                path.call(print, \"key\"),\n                \": \",\n                path.call(print, \"pattern\"),\n            ]);\n        case \"ObjectProperty\": // Babel 6\n        case \"Property\": {\n            // Non-standard AST node type.\n            if (n.method || n.kind === \"get\" || n.kind === \"set\") {\n                return printMethod(path, options, print);\n            }\n            if (n.shorthand && n.value.type === \"AssignmentPattern\") {\n                return path.call(print, \"value\");\n            }\n            var key = path.call(print, \"key\");\n            if (n.computed) {\n                parts.push(\"[\", key, \"]\");\n            }\n            else {\n                parts.push(key);\n            }\n            if (!n.shorthand || n.key.name !== n.value.name) {\n                parts.push(\": \", path.call(print, \"value\"));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ClassMethod\": // Babel 6\n        case \"ObjectMethod\": // Babel 6\n        case \"ClassPrivateMethod\":\n        case \"TSDeclareMethod\":\n            return printMethod(path, options, print);\n        case \"PrivateName\":\n            return (0, lines_1.concat)([\"#\", path.call(print, \"id\")]);\n        case \"Decorator\":\n            return (0, lines_1.concat)([\"@\", path.call(print, \"expression\")]);\n        case \"TupleExpression\":\n            parts.push(\"#\");\n        // Intentionally fall through to printing the tuple elements...\n        case \"ArrayExpression\":\n        case \"ArrayPattern\": {\n            var elems = n.elements;\n            var len_2 = elems.length;\n            var printed_1 = path.map(print, \"elements\");\n            var joined = (0, lines_1.fromString)(\", \").join(printed_1);\n            var oneLine_2 = joined.getLineLength(1) <= options.wrapColumn;\n            if (oneLine_2) {\n                if (options.arrayBracketSpacing) {\n                    parts.push(\"[ \");\n                }\n                else {\n                    parts.push(\"[\");\n                }\n            }\n            else {\n                parts.push(\"[\\n\");\n            }\n            path.each(function (elemPath) {\n                var i = elemPath.getName();\n                var elem = elemPath.getValue();\n                if (!elem) {\n                    // If the array expression ends with a hole, that hole\n                    // will be ignored by the interpreter, but if it ends with\n                    // two (or more) holes, we need to write out two (or more)\n                    // commas so that the resulting code is interpreted with\n                    // both (all) of the holes.\n                    parts.push(\",\");\n                }\n                else {\n                    var lines = printed_1[i];\n                    if (oneLine_2) {\n                        if (i > 0)\n                            parts.push(\" \");\n                    }\n                    else {\n                        lines = lines.indent(options.tabWidth);\n                    }\n                    parts.push(lines);\n                    if (i < len_2 - 1 ||\n                        (!oneLine_2 && util.isTrailingCommaEnabled(options, \"arrays\")))\n                        parts.push(\",\");\n                    if (!oneLine_2)\n                        parts.push(\"\\n\");\n                }\n            }, \"elements\");\n            if (oneLine_2 && options.arrayBracketSpacing) {\n                parts.push(\" ]\");\n            }\n            else {\n                parts.push(\"]\");\n            }\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"SequenceExpression\":\n            return (0, lines_1.fromString)(\", \").join(path.map(print, \"expressions\"));\n        case \"ThisExpression\":\n            return (0, lines_1.fromString)(\"this\");\n        case \"Super\":\n            return (0, lines_1.fromString)(\"super\");\n        case \"NullLiteral\": // Babel 6 Literal split\n            return (0, lines_1.fromString)(\"null\");\n        case \"RegExpLiteral\": // Babel 6 Literal split\n            return (0, lines_1.fromString)(getPossibleRaw(n) || \"/\".concat(n.pattern, \"/\").concat(n.flags || \"\"), options);\n        case \"BigIntLiteral\": // Babel 7 Literal split\n            return (0, lines_1.fromString)(getPossibleRaw(n) || n.value + \"n\", options);\n        case \"NumericLiteral\": // Babel 6 Literal Split\n            return (0, lines_1.fromString)(getPossibleRaw(n) || n.value, options);\n        case \"DecimalLiteral\":\n            return (0, lines_1.fromString)(getPossibleRaw(n) || n.value + \"m\", options);\n        case \"StringLiteral\":\n            return (0, lines_1.fromString)(nodeStr(n.value, options));\n        case \"BooleanLiteral\": // Babel 6 Literal split\n        case \"Literal\":\n            return (0, lines_1.fromString)(getPossibleRaw(n) ||\n                (typeof n.value === \"string\" ? nodeStr(n.value, options) : n.value), options);\n        case \"Directive\": // Babel 6\n            return path.call(print, \"value\");\n        case \"DirectiveLiteral\": // Babel 6\n            return (0, lines_1.fromString)(getPossibleRaw(n) || nodeStr(n.value, options), options);\n        case \"InterpreterDirective\":\n            return (0, lines_1.fromString)(\"#!\".concat(n.value, \"\\n\"), options);\n        case \"ModuleSpecifier\":\n            if (n.local) {\n                throw new Error(\"The ESTree ModuleSpecifier type should be abstract\");\n            }\n            // The Esprima ModuleSpecifier type is just a string-valued\n            // Literal identifying the imported-from module.\n            return (0, lines_1.fromString)(nodeStr(n.value, options), options);\n        case \"UnaryExpression\":\n            parts.push(n.operator);\n            if (/[a-z]$/.test(n.operator))\n                parts.push(\" \");\n            parts.push(path.call(print, \"argument\"));\n            return (0, lines_1.concat)(parts);\n        case \"UpdateExpression\":\n            parts.push(path.call(print, \"argument\"), n.operator);\n            if (n.prefix)\n                parts.reverse();\n            return (0, lines_1.concat)(parts);\n        case \"ConditionalExpression\":\n            return (0, lines_1.concat)([\n                path.call(print, \"test\"),\n                \" ? \",\n                path.call(print, \"consequent\"),\n                \" : \",\n                path.call(print, \"alternate\"),\n            ]);\n        case \"NewExpression\": {\n            parts.push(\"new \", path.call(print, \"callee\"));\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            if (n.typeArguments) {\n                parts.push(path.call(print, \"typeArguments\"));\n            }\n            var args = n.arguments;\n            if (args) {\n                parts.push(printArgumentsList(path, options, print));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"VariableDeclaration\": {\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            parts.push(n.kind, \" \");\n            var maxLen_1 = 0;\n            var printed = path.map(function (childPath) {\n                var lines = print(childPath);\n                maxLen_1 = Math.max(lines.length, maxLen_1);\n                return lines;\n            }, \"declarations\");\n            if (maxLen_1 === 1) {\n                parts.push((0, lines_1.fromString)(\", \").join(printed));\n            }\n            else if (printed.length > 1) {\n                parts.push((0, lines_1.fromString)(\",\\n\")\n                    .join(printed)\n                    .indentTail(n.kind.length + 1));\n            }\n            else {\n                parts.push(printed[0]);\n            }\n            // We generally want to terminate all variable declarations with a\n            // semicolon, except when they are children of for loops.\n            var parentNode = path.getParentNode();\n            if (!namedTypes.ForStatement.check(parentNode) &&\n                !namedTypes.ForInStatement.check(parentNode) &&\n                !(namedTypes.ForOfStatement &&\n                    namedTypes.ForOfStatement.check(parentNode)) &&\n                !(namedTypes.ForAwaitStatement &&\n                    namedTypes.ForAwaitStatement.check(parentNode))) {\n                parts.push(\";\");\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"VariableDeclarator\":\n            return n.init\n                ? (0, lines_1.fromString)(\" = \").join([\n                    path.call(print, \"id\"),\n                    path.call(print, \"init\"),\n                ])\n                : path.call(print, \"id\");\n        case \"WithStatement\":\n            return (0, lines_1.concat)([\n                \"with (\",\n                path.call(print, \"object\"),\n                \") \",\n                path.call(print, \"body\"),\n            ]);\n        case \"IfStatement\": {\n            var con = adjustClause(path.call(print, \"consequent\"), options);\n            parts.push(\"if (\", path.call(print, \"test\"), \")\", con);\n            if (n.alternate)\n                parts.push(endsWithBrace(con) ? \" else\" : \"\\nelse\", adjustClause(path.call(print, \"alternate\"), options));\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ForStatement\": {\n            // TODO Get the for (;;) case right.\n            var init = path.call(print, \"init\");\n            var sep = init.length > 1 ? \";\\n\" : \"; \";\n            var forParen = \"for (\";\n            var indented = (0, lines_1.fromString)(sep)\n                .join([init, path.call(print, \"test\"), path.call(print, \"update\")])\n                .indentTail(forParen.length);\n            var head = (0, lines_1.concat)([forParen, indented, \")\"]);\n            var clause = adjustClause(path.call(print, \"body\"), options);\n            parts.push(head);\n            if (head.length > 1) {\n                parts.push(\"\\n\");\n                clause = clause.trimLeft();\n            }\n            parts.push(clause);\n            return (0, lines_1.concat)(parts);\n        }\n        case \"WhileStatement\":\n            return (0, lines_1.concat)([\n                \"while (\",\n                path.call(print, \"test\"),\n                \")\",\n                adjustClause(path.call(print, \"body\"), options),\n            ]);\n        case \"ForInStatement\":\n            // Note: esprima can't actually parse \"for each (\".\n            return (0, lines_1.concat)([\n                n.each ? \"for each (\" : \"for (\",\n                path.call(print, \"left\"),\n                \" in \",\n                path.call(print, \"right\"),\n                \")\",\n                adjustClause(path.call(print, \"body\"), options),\n            ]);\n        case \"ForOfStatement\":\n        case \"ForAwaitStatement\":\n            parts.push(\"for \");\n            if (n.await || n.type === \"ForAwaitStatement\") {\n                parts.push(\"await \");\n            }\n            parts.push(\"(\", path.call(print, \"left\"), \" of \", path.call(print, \"right\"), \")\", adjustClause(path.call(print, \"body\"), options));\n            return (0, lines_1.concat)(parts);\n        case \"DoWhileStatement\": {\n            var doBody = (0, lines_1.concat)([\n                \"do\",\n                adjustClause(path.call(print, \"body\"), options),\n            ]);\n            parts.push(doBody);\n            if (endsWithBrace(doBody))\n                parts.push(\" while\");\n            else\n                parts.push(\"\\nwhile\");\n            parts.push(\" (\", path.call(print, \"test\"), \");\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"DoExpression\": {\n            var statements = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, \"body\");\n            return (0, lines_1.concat)([\"do {\\n\", statements.indent(options.tabWidth), \"\\n}\"]);\n        }\n        case \"BreakStatement\":\n            parts.push(\"break\");\n            if (n.label)\n                parts.push(\" \", path.call(print, \"label\"));\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        case \"ContinueStatement\":\n            parts.push(\"continue\");\n            if (n.label)\n                parts.push(\" \", path.call(print, \"label\"));\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        case \"LabeledStatement\":\n            return (0, lines_1.concat)([\n                path.call(print, \"label\"),\n                \":\\n\",\n                path.call(print, \"body\"),\n            ]);\n        case \"TryStatement\":\n            parts.push(\"try \", path.call(print, \"block\"));\n            if (n.handler) {\n                parts.push(\" \", path.call(print, \"handler\"));\n            }\n            else if (n.handlers) {\n                path.each(function (handlerPath) {\n                    parts.push(\" \", print(handlerPath));\n                }, \"handlers\");\n            }\n            if (n.finalizer) {\n                parts.push(\" finally \", path.call(print, \"finalizer\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"CatchClause\":\n            parts.push(\"catch \");\n            if (n.param) {\n                parts.push(\"(\", path.call(print, \"param\"));\n            }\n            if (n.guard) {\n                // Note: esprima does not recognize conditional catch clauses.\n                parts.push(\" if \", path.call(print, \"guard\"));\n            }\n            if (n.param) {\n                parts.push(\") \");\n            }\n            parts.push(path.call(print, \"body\"));\n            return (0, lines_1.concat)(parts);\n        case \"ThrowStatement\":\n            return (0, lines_1.concat)([\"throw \", path.call(print, \"argument\"), \";\"]);\n        case \"SwitchStatement\":\n            return (0, lines_1.concat)([\n                \"switch (\",\n                path.call(print, \"discriminant\"),\n                \") {\\n\",\n                (0, lines_1.fromString)(\"\\n\").join(path.map(print, \"cases\")),\n                \"\\n}\",\n            ]);\n        // Note: ignoring n.lexical because it has no printing consequences.\n        case \"SwitchCase\":\n            if (n.test)\n                parts.push(\"case \", path.call(print, \"test\"), \":\");\n            else\n                parts.push(\"default:\");\n            if (n.consequent.length > 0) {\n                parts.push(\"\\n\", path\n                    .call(function (consequentPath) {\n                    return printStatementSequence(consequentPath, options, print);\n                }, \"consequent\")\n                    .indent(options.tabWidth));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"DebuggerStatement\":\n            return (0, lines_1.fromString)(\"debugger;\");\n        // JSX extensions below.\n        case \"JSXAttribute\":\n            parts.push(path.call(print, \"name\"));\n            if (n.value)\n                parts.push(\"=\", path.call(print, \"value\"));\n            return (0, lines_1.concat)(parts);\n        case \"JSXIdentifier\":\n            return (0, lines_1.fromString)(n.name, options);\n        case \"JSXNamespacedName\":\n            return (0, lines_1.fromString)(\":\").join([\n                path.call(print, \"namespace\"),\n                path.call(print, \"name\"),\n            ]);\n        case \"JSXMemberExpression\":\n            return (0, lines_1.fromString)(\".\").join([\n                path.call(print, \"object\"),\n                path.call(print, \"property\"),\n            ]);\n        case \"JSXSpreadAttribute\":\n            return (0, lines_1.concat)([\"{...\", path.call(print, \"argument\"), \"}\"]);\n        case \"JSXSpreadChild\":\n            return (0, lines_1.concat)([\"{...\", path.call(print, \"expression\"), \"}\"]);\n        case \"JSXExpressionContainer\":\n            return (0, lines_1.concat)([\"{\", path.call(print, \"expression\"), \"}\"]);\n        case \"JSXElement\":\n        case \"JSXFragment\": {\n            var openingPropName = \"opening\" + (n.type === \"JSXElement\" ? \"Element\" : \"Fragment\");\n            var closingPropName = \"closing\" + (n.type === \"JSXElement\" ? \"Element\" : \"Fragment\");\n            var openingLines = path.call(print, openingPropName);\n            if (n[openingPropName].selfClosing) {\n                (0, tiny_invariant_1.default)(!n[closingPropName], \"unexpected \" +\n                    closingPropName +\n                    \" element in self-closing \" +\n                    n.type);\n                return openingLines;\n            }\n            var childLines = (0, lines_1.concat)(path.map(function (childPath) {\n                var child = childPath.getValue();\n                if (namedTypes.Literal.check(child) &&\n                    typeof child.value === \"string\") {\n                    if (/\\S/.test(child.value)) {\n                        return child.value.replace(/^\\s+/g, \"\");\n                    }\n                    else if (/\\n/.test(child.value)) {\n                        return \"\\n\";\n                    }\n                }\n                return print(childPath);\n            }, \"children\")).indentTail(options.tabWidth);\n            var closingLines = path.call(print, closingPropName);\n            return (0, lines_1.concat)([openingLines, childLines, closingLines]);\n        }\n        case \"JSXOpeningElement\": {\n            parts.push(\"<\", path.call(print, \"name\"));\n            var typeDefPart = path.call(print, \"typeParameters\");\n            if (typeDefPart.length)\n                parts.push(typeDefPart);\n            var attrParts_1 = [];\n            path.each(function (attrPath) {\n                attrParts_1.push(\" \", print(attrPath));\n            }, \"attributes\");\n            var attrLines = (0, lines_1.concat)(attrParts_1);\n            var needLineWrap = attrLines.length > 1 || attrLines.getLineLength(1) > options.wrapColumn;\n            if (needLineWrap) {\n                attrParts_1.forEach(function (part, i) {\n                    if (part === \" \") {\n                        (0, tiny_invariant_1.default)(i % 2 === 0);\n                        attrParts_1[i] = \"\\n\";\n                    }\n                });\n                attrLines = (0, lines_1.concat)(attrParts_1).indentTail(options.tabWidth);\n            }\n            parts.push(attrLines, n.selfClosing ? \" />\" : \">\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"JSXClosingElement\":\n            return (0, lines_1.concat)([\"</\", path.call(print, \"name\"), \">\"]);\n        case \"JSXOpeningFragment\":\n            return (0, lines_1.fromString)(\"<>\");\n        case \"JSXClosingFragment\":\n            return (0, lines_1.fromString)(\"</>\");\n        case \"JSXText\":\n            return (0, lines_1.fromString)(n.value, options);\n        case \"JSXEmptyExpression\":\n            return (0, lines_1.fromString)(\"\");\n        case \"TypeAnnotatedIdentifier\":\n            return (0, lines_1.concat)([\n                path.call(print, \"annotation\"),\n                \" \",\n                path.call(print, \"identifier\"),\n            ]);\n        case \"ClassBody\":\n            if (n.body.length === 0) {\n                return (0, lines_1.fromString)(\"{}\");\n            }\n            return (0, lines_1.concat)([\n                \"{\\n\",\n                path\n                    .call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, \"body\")\n                    .indent(options.tabWidth),\n                \"\\n}\",\n            ]);\n        case \"ClassPropertyDefinition\":\n            parts.push(\"static \", path.call(print, \"definition\"));\n            if (!namedTypes.MethodDefinition.check(n.definition))\n                parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        case \"ClassProperty\": {\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            var access = n.accessibility || n.access;\n            if (typeof access === \"string\") {\n                parts.push(access, \" \");\n            }\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            if (n.abstract) {\n                parts.push(\"abstract \");\n            }\n            if (n.readonly) {\n                parts.push(\"readonly \");\n            }\n            var key = path.call(print, \"key\");\n            if (n.computed) {\n                key = (0, lines_1.concat)([\"[\", key, \"]\"]);\n            }\n            if (n.variance) {\n                key = (0, lines_1.concat)([printVariance(path, print), key]);\n            }\n            parts.push(key);\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            if (n.definite) {\n                parts.push(\"!\");\n            }\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            if (n.value) {\n                parts.push(\" = \", path.call(print, \"value\"));\n            }\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ClassPrivateProperty\":\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            parts.push(path.call(print, \"key\"));\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            if (n.value) {\n                parts.push(\" = \", path.call(print, \"value\"));\n            }\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        case \"ClassAccessorProperty\": {\n            parts.push.apply(parts, tslib_1.__spreadArray(tslib_1.__spreadArray([], printClassMemberModifiers(n), false), [\"accessor \"], false));\n            if (n.computed) {\n                parts.push(\"[\", path.call(print, \"key\"), \"]\");\n            }\n            else {\n                parts.push(path.call(print, \"key\"));\n            }\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            if (n.definite) {\n                parts.push(\"!\");\n            }\n            if (n.typeAnnotation) {\n                parts.push(path.call(print, \"typeAnnotation\"));\n            }\n            if (n.value) {\n                parts.push(\" = \", path.call(print, \"value\"));\n            }\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"ClassDeclaration\":\n        case \"ClassExpression\":\n        case \"DeclareClass\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            if (n.abstract) {\n                parts.push(\"abstract \");\n            }\n            parts.push(\"class\");\n            if (n.id) {\n                parts.push(\" \", path.call(print, \"id\"));\n            }\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            if (n.superClass) {\n                // ClassDeclaration and ClassExpression only\n                parts.push(\" extends \", path.call(print, \"superClass\"), path.call(print, \"superTypeParameters\"));\n            }\n            if (n.extends && n.extends.length > 0) {\n                // DeclareClass only\n                parts.push(\" extends \", (0, lines_1.fromString)(\", \").join(path.map(print, \"extends\")));\n            }\n            if (n[\"implements\"] && n[\"implements\"].length > 0) {\n                parts.push(\" implements \", (0, lines_1.fromString)(\", \").join(path.map(print, \"implements\")));\n            }\n            parts.push(\" \", path.call(print, \"body\"));\n            if (n.type === \"DeclareClass\") {\n                return printFlowDeclaration(path, parts);\n            }\n            else {\n                return (0, lines_1.concat)(parts);\n            }\n        case \"TemplateElement\":\n            return (0, lines_1.fromString)(n.value.raw, options).lockIndentTail();\n        case \"TemplateLiteral\": {\n            var expressions_1 = path.map(print, \"expressions\");\n            parts.push(\"`\");\n            path.each(function (childPath) {\n                var i = childPath.getName();\n                parts.push(print(childPath));\n                if (i < expressions_1.length) {\n                    parts.push(\"${\", expressions_1[i], \"}\");\n                }\n            }, \"quasis\");\n            parts.push(\"`\");\n            return (0, lines_1.concat)(parts).lockIndentTail();\n        }\n        case \"TaggedTemplateExpression\":\n            return (0, lines_1.concat)([path.call(print, \"tag\"), path.call(print, \"quasi\")]);\n        // These types are unprintable because they serve as abstract\n        // supertypes for other (printable) types.\n        case \"Node\":\n        case \"Printable\":\n        case \"SourceLocation\":\n        case \"Position\":\n        case \"Statement\":\n        case \"Function\":\n        case \"Pattern\":\n        case \"Expression\":\n        case \"Declaration\":\n        case \"Specifier\":\n        case \"NamedSpecifier\":\n        case \"Comment\": // Supertype of Block and Line\n        case \"Flow\": // Supertype of all Flow AST node types\n        case \"FlowType\": // Supertype of all Flow types\n        case \"FlowPredicate\": // Supertype of InferredPredicate and DeclaredPredicate\n        case \"MemberTypeAnnotation\": // Flow\n        case \"Type\": // Flow\n        case \"TSHasOptionalTypeParameterInstantiation\":\n        case \"TSHasOptionalTypeParameters\":\n        case \"TSHasOptionalTypeAnnotation\":\n        case \"ChainElement\": // Supertype of MemberExpression and CallExpression\n            throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\n        case \"CommentBlock\": // Babel block comment.\n        case \"Block\": // Esprima block comment.\n            return (0, lines_1.concat)([\"/*\", (0, lines_1.fromString)(n.value, options), \"*/\"]);\n        case \"CommentLine\": // Babel line comment.\n        case \"Line\": // Esprima line comment.\n            return (0, lines_1.concat)([\"//\", (0, lines_1.fromString)(n.value, options)]);\n        // Type Annotations for Facebook Flow, typically stripped out or\n        // transformed away before printing.\n        case \"TypeAnnotation\":\n            if (n.typeAnnotation) {\n                if (n.typeAnnotation.type !== \"FunctionTypeAnnotation\") {\n                    parts.push(\": \");\n                }\n                parts.push(path.call(print, \"typeAnnotation\"));\n                return (0, lines_1.concat)(parts);\n            }\n            return (0, lines_1.fromString)(\"\");\n        case \"ExistentialTypeParam\":\n        case \"ExistsTypeAnnotation\":\n            return (0, lines_1.fromString)(\"*\", options);\n        case \"EmptyTypeAnnotation\":\n            return (0, lines_1.fromString)(\"empty\", options);\n        case \"AnyTypeAnnotation\":\n            return (0, lines_1.fromString)(\"any\", options);\n        case \"MixedTypeAnnotation\":\n            return (0, lines_1.fromString)(\"mixed\", options);\n        case \"ArrayTypeAnnotation\":\n            return (0, lines_1.concat)([path.call(print, \"elementType\"), \"[]\"]);\n        case \"TupleTypeAnnotation\": {\n            var printed_2 = path.map(print, \"types\");\n            var joined = (0, lines_1.fromString)(\", \").join(printed_2);\n            var oneLine_3 = joined.getLineLength(1) <= options.wrapColumn;\n            if (oneLine_3) {\n                if (options.arrayBracketSpacing) {\n                    parts.push(\"[ \");\n                }\n                else {\n                    parts.push(\"[\");\n                }\n            }\n            else {\n                parts.push(\"[\\n\");\n            }\n            path.each(function (elemPath) {\n                var i = elemPath.getName();\n                var elem = elemPath.getValue();\n                if (!elem) {\n                    // If the array expression ends with a hole, that hole\n                    // will be ignored by the interpreter, but if it ends with\n                    // two (or more) holes, we need to write out two (or more)\n                    // commas so that the resulting code is interpreted with\n                    // both (all) of the holes.\n                    parts.push(\",\");\n                }\n                else {\n                    var lines = printed_2[i];\n                    if (oneLine_3) {\n                        if (i > 0)\n                            parts.push(\" \");\n                    }\n                    else {\n                        lines = lines.indent(options.tabWidth);\n                    }\n                    parts.push(lines);\n                    if (i < n.types.length - 1 ||\n                        (!oneLine_3 && util.isTrailingCommaEnabled(options, \"arrays\")))\n                        parts.push(\",\");\n                    if (!oneLine_3)\n                        parts.push(\"\\n\");\n                }\n            }, \"types\");\n            if (oneLine_3 && options.arrayBracketSpacing) {\n                parts.push(\" ]\");\n            }\n            else {\n                parts.push(\"]\");\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"BooleanTypeAnnotation\":\n            return (0, lines_1.fromString)(\"boolean\", options);\n        case \"BooleanLiteralTypeAnnotation\":\n            (0, tiny_invariant_1.default)(typeof n.value === \"boolean\");\n            return (0, lines_1.fromString)(\"\" + n.value, options);\n        case \"InterfaceTypeAnnotation\":\n            parts.push(\"interface\");\n            if (n.extends && n.extends.length > 0) {\n                parts.push(\" extends \", (0, lines_1.fromString)(\", \").join(path.map(print, \"extends\")));\n            }\n            parts.push(\" \", path.call(print, \"body\"));\n            return (0, lines_1.concat)(parts);\n        case \"DeclareFunction\":\n            return printFlowDeclaration(path, [\n                \"function \",\n                path.call(print, \"id\"),\n                \";\",\n            ]);\n        case \"DeclareModule\":\n            return printFlowDeclaration(path, [\n                \"module \",\n                path.call(print, \"id\"),\n                \" \",\n                path.call(print, \"body\"),\n            ]);\n        case \"DeclareModuleExports\":\n            return printFlowDeclaration(path, [\n                \"module.exports\",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"DeclareVariable\":\n            return printFlowDeclaration(path, [\"var \", path.call(print, \"id\"), \";\"]);\n        case \"DeclareExportDeclaration\":\n        case \"DeclareExportAllDeclaration\":\n            return (0, lines_1.concat)([\"declare \", printExportDeclaration(path, options, print)]);\n        case \"EnumDeclaration\":\n            return (0, lines_1.concat)([\n                \"enum \",\n                path.call(print, \"id\"),\n                path.call(print, \"body\"),\n            ]);\n        case \"EnumBooleanBody\":\n        case \"EnumNumberBody\":\n        case \"EnumStringBody\":\n        case \"EnumSymbolBody\": {\n            if (n.type === \"EnumSymbolBody\" || n.explicitType) {\n                parts.push(\" of \", \n                // EnumBooleanBody => boolean, etc.\n                n.type.slice(4, -4).toLowerCase());\n            }\n            parts.push(\" {\\n\", (0, lines_1.fromString)(\"\\n\")\n                .join(path.map(print, \"members\"))\n                .indent(options.tabWidth), \"\\n}\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"EnumDefaultedMember\":\n            return (0, lines_1.concat)([path.call(print, \"id\"), \",\"]);\n        case \"EnumBooleanMember\":\n        case \"EnumNumberMember\":\n        case \"EnumStringMember\":\n            return (0, lines_1.concat)([\n                path.call(print, \"id\"),\n                \" = \",\n                path.call(print, \"init\"),\n                \",\",\n            ]);\n        case \"InferredPredicate\":\n            return (0, lines_1.fromString)(\"%checks\", options);\n        case \"DeclaredPredicate\":\n            return (0, lines_1.concat)([\"%checks(\", path.call(print, \"value\"), \")\"]);\n        case \"FunctionTypeAnnotation\": {\n            // FunctionTypeAnnotation is ambiguous:\n            // declare function(a: B): void; OR\n            // const A: (a: B) => void;\n            var parent = path.getParentNode(0);\n            var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) ||\n                (namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method) ||\n                namedTypes.DeclareFunction.check(path.getParentNode(2)));\n            var needsColon = isArrowFunctionTypeAnnotation &&\n                !namedTypes.FunctionTypeParam.check(parent) &&\n                !namedTypes.TypeAlias.check(parent);\n            if (needsColon) {\n                parts.push(\": \");\n            }\n            var hasTypeParameters = !!n.typeParameters;\n            var needsParens = hasTypeParameters || n.params.length !== 1 || n.params[0].name;\n            parts.push(hasTypeParameters ? path.call(print, \"typeParameters\") : \"\", needsParens ? \"(\" : \"\", printFunctionParams(path, options, print), needsParens ? \")\" : \"\");\n            // The returnType is not wrapped in a TypeAnnotation, so the colon\n            // needs to be added separately.\n            if (n.returnType) {\n                parts.push(isArrowFunctionTypeAnnotation ? \" => \" : \": \", path.call(print, \"returnType\"));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"FunctionTypeParam\": {\n            var name = path.call(print, \"name\");\n            parts.push(name);\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            if (name.infos[0].line) {\n                parts.push(\": \");\n            }\n            parts.push(path.call(print, \"typeAnnotation\"));\n            return (0, lines_1.concat)(parts);\n        }\n        case \"GenericTypeAnnotation\":\n            return (0, lines_1.concat)([\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\"),\n            ]);\n        case \"DeclareInterface\":\n            parts.push(\"declare \");\n        // Fall through to InterfaceDeclaration...\n        case \"InterfaceDeclaration\":\n        case \"TSInterfaceDeclaration\":\n            if (n.declare) {\n                parts.push(\"declare \");\n            }\n            parts.push(\"interface \", path.call(print, \"id\"), path.call(print, \"typeParameters\"), \" \");\n            if (n[\"extends\"] && n[\"extends\"].length > 0) {\n                parts.push(\"extends \", (0, lines_1.fromString)(\", \").join(path.map(print, \"extends\")), \" \");\n            }\n            if (n.body) {\n                parts.push(path.call(print, \"body\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"ClassImplements\":\n        case \"InterfaceExtends\":\n            return (0, lines_1.concat)([\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\"),\n            ]);\n        case \"IntersectionTypeAnnotation\":\n            return (0, lines_1.fromString)(\" & \").join(path.map(print, \"types\"));\n        case \"NullableTypeAnnotation\":\n            return (0, lines_1.concat)([\"?\", path.call(print, \"typeAnnotation\")]);\n        case \"NullLiteralTypeAnnotation\":\n            return (0, lines_1.fromString)(\"null\", options);\n        case \"ThisTypeAnnotation\":\n            return (0, lines_1.fromString)(\"this\", options);\n        case \"NumberTypeAnnotation\":\n            return (0, lines_1.fromString)(\"number\", options);\n        case \"ObjectTypeCallProperty\":\n            return path.call(print, \"value\");\n        case \"ObjectTypeIndexer\":\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            parts.push(printVariance(path, print), \"[\");\n            if (n.id) {\n                parts.push(path.call(print, \"id\"), \": \");\n            }\n            parts.push(path.call(print, \"key\"), \"]: \", path.call(print, \"value\"));\n            return (0, lines_1.concat)(parts);\n        case \"ObjectTypeProperty\":\n            return (0, lines_1.concat)([\n                printVariance(path, print),\n                path.call(print, \"key\"),\n                n.optional ? \"?\" : \"\",\n                \": \",\n                path.call(print, \"value\"),\n            ]);\n        case \"ObjectTypeInternalSlot\":\n            return (0, lines_1.concat)([\n                n.static ? \"static \" : \"\",\n                \"[[\",\n                path.call(print, \"id\"),\n                \"]]\",\n                n.optional ? \"?\" : \"\",\n                n.value.type !== \"FunctionTypeAnnotation\" ? \": \" : \"\",\n                path.call(print, \"value\"),\n            ]);\n        case \"QualifiedTypeIdentifier\":\n            return (0, lines_1.concat)([\n                path.call(print, \"qualification\"),\n                \".\",\n                path.call(print, \"id\"),\n            ]);\n        case \"StringLiteralTypeAnnotation\":\n            return (0, lines_1.fromString)(nodeStr(n.value, options), options);\n        case \"NumberLiteralTypeAnnotation\":\n        case \"NumericLiteralTypeAnnotation\":\n            (0, tiny_invariant_1.default)(typeof n.value === \"number\");\n            return (0, lines_1.fromString)(JSON.stringify(n.value), options);\n        case \"BigIntLiteralTypeAnnotation\":\n            return (0, lines_1.fromString)(n.raw, options);\n        case \"StringTypeAnnotation\":\n            return (0, lines_1.fromString)(\"string\", options);\n        case \"DeclareTypeAlias\":\n            parts.push(\"declare \");\n        // Fall through to TypeAlias...\n        case \"TypeAlias\":\n            return (0, lines_1.concat)([\n                \"type \",\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\"),\n                \" = \",\n                path.call(print, \"right\"),\n                \";\",\n            ]);\n        case \"DeclareOpaqueType\":\n            parts.push(\"declare \");\n        // Fall through to OpaqueType...\n        case \"OpaqueType\":\n            parts.push(\"opaque type \", path.call(print, \"id\"), path.call(print, \"typeParameters\"));\n            if (n[\"supertype\"]) {\n                parts.push(\": \", path.call(print, \"supertype\"));\n            }\n            if (n[\"impltype\"]) {\n                parts.push(\" = \", path.call(print, \"impltype\"));\n            }\n            parts.push(\";\");\n            return (0, lines_1.concat)(parts);\n        case \"TypeCastExpression\":\n            return (0, lines_1.concat)([\n                \"(\",\n                path.call(print, \"expression\"),\n                path.call(print, \"typeAnnotation\"),\n                \")\",\n            ]);\n        case \"TypeParameterDeclaration\":\n        case \"TypeParameterInstantiation\":\n            return (0, lines_1.concat)([\n                \"<\",\n                (0, lines_1.fromString)(\", \").join(path.map(print, \"params\")),\n                \">\",\n            ]);\n        case \"Variance\":\n            if (n.kind === \"plus\") {\n                return (0, lines_1.fromString)(\"+\");\n            }\n            if (n.kind === \"minus\") {\n                return (0, lines_1.fromString)(\"-\");\n            }\n            return (0, lines_1.fromString)(\"\");\n        case \"TypeParameter\":\n            if (n.variance) {\n                parts.push(printVariance(path, print));\n            }\n            parts.push(path.call(print, \"name\"));\n            if (n.bound) {\n                parts.push(path.call(print, \"bound\"));\n            }\n            if (n[\"default\"]) {\n                parts.push(\"=\", path.call(print, \"default\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"TypeofTypeAnnotation\":\n            return (0, lines_1.concat)([\n                (0, lines_1.fromString)(\"typeof \", options),\n                path.call(print, \"argument\"),\n            ]);\n        case \"IndexedAccessType\":\n        case \"OptionalIndexedAccessType\":\n            return (0, lines_1.concat)([\n                path.call(print, \"objectType\"),\n                n.optional ? \"?.\" : \"\",\n                \"[\",\n                path.call(print, \"indexType\"),\n                \"]\",\n            ]);\n        case \"UnionTypeAnnotation\":\n            return (0, lines_1.fromString)(\" | \").join(path.map(print, \"types\"));\n        case \"VoidTypeAnnotation\":\n            return (0, lines_1.fromString)(\"void\", options);\n        case \"NullTypeAnnotation\":\n            return (0, lines_1.fromString)(\"null\", options);\n        case \"SymbolTypeAnnotation\":\n            return (0, lines_1.fromString)(\"symbol\", options);\n        case \"BigIntTypeAnnotation\":\n            return (0, lines_1.fromString)(\"bigint\", options);\n        // Type Annotations for TypeScript (when using Babylon as parser)\n        case \"TSType\":\n            throw new Error(\"unprintable type: \" + JSON.stringify(n.type));\n        case \"TSNumberKeyword\":\n            return (0, lines_1.fromString)(\"number\", options);\n        case \"TSBigIntKeyword\":\n            return (0, lines_1.fromString)(\"bigint\", options);\n        case \"TSObjectKeyword\":\n            return (0, lines_1.fromString)(\"object\", options);\n        case \"TSBooleanKeyword\":\n            return (0, lines_1.fromString)(\"boolean\", options);\n        case \"TSStringKeyword\":\n            return (0, lines_1.fromString)(\"string\", options);\n        case \"TSSymbolKeyword\":\n            return (0, lines_1.fromString)(\"symbol\", options);\n        case \"TSAnyKeyword\":\n            return (0, lines_1.fromString)(\"any\", options);\n        case \"TSVoidKeyword\":\n            return (0, lines_1.fromString)(\"void\", options);\n        case \"TSIntrinsicKeyword\":\n            return (0, lines_1.fromString)(\"intrinsic\", options);\n        case \"TSThisType\":\n            return (0, lines_1.fromString)(\"this\", options);\n        case \"TSNullKeyword\":\n            return (0, lines_1.fromString)(\"null\", options);\n        case \"TSUndefinedKeyword\":\n            return (0, lines_1.fromString)(\"undefined\", options);\n        case \"TSUnknownKeyword\":\n            return (0, lines_1.fromString)(\"unknown\", options);\n        case \"TSNeverKeyword\":\n            return (0, lines_1.fromString)(\"never\", options);\n        case \"TSArrayType\":\n            return (0, lines_1.concat)([path.call(print, \"elementType\"), \"[]\"]);\n        case \"TSLiteralType\":\n            return path.call(print, \"literal\");\n        case \"TSUnionType\":\n            return (0, lines_1.fromString)(\" | \").join(path.map(print, \"types\"));\n        case \"TSIntersectionType\":\n            return (0, lines_1.fromString)(\" & \").join(path.map(print, \"types\"));\n        case \"TSConditionalType\":\n            parts.push(path.call(print, \"checkType\"), \" extends \", path.call(print, \"extendsType\"), \" ? \", path.call(print, \"trueType\"), \" : \", path.call(print, \"falseType\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSInferType\":\n            parts.push(\"infer \", path.call(print, \"typeParameter\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSParenthesizedType\":\n            return (0, lines_1.concat)([\"(\", path.call(print, \"typeAnnotation\"), \")\"]);\n        case \"TSFunctionType\":\n            return (0, lines_1.concat)([\n                path.call(print, \"typeParameters\"),\n                \"(\",\n                printFunctionParams(path, options, print),\n                \") => \",\n                path.call(print, \"typeAnnotation\", \"typeAnnotation\"),\n            ]);\n        case \"TSConstructorType\":\n            return (0, lines_1.concat)([\n                \"new \",\n                path.call(print, \"typeParameters\"),\n                \"(\",\n                printFunctionParams(path, options, print),\n                \") => \",\n                path.call(print, \"typeAnnotation\", \"typeAnnotation\"),\n            ]);\n        case \"TSMappedType\": {\n            parts.push(n.readonly ? \"readonly \" : \"\", \"[\", path.call(print, \"typeParameter\"), \"]\", n.optional ? \"?\" : \"\");\n            if (n.typeAnnotation) {\n                parts.push(\": \", path.call(print, \"typeAnnotation\"), \";\");\n            }\n            return (0, lines_1.concat)([\"{\\n\", (0, lines_1.concat)(parts).indent(options.tabWidth), \"\\n}\"]);\n        }\n        case \"TSTupleType\":\n            return (0, lines_1.concat)([\n                \"[\",\n                (0, lines_1.fromString)(\", \").join(path.map(print, \"elementTypes\")),\n                \"]\",\n            ]);\n        case \"TSNamedTupleMember\":\n            parts.push(path.call(print, \"label\"));\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            parts.push(\": \", path.call(print, \"elementType\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSRestType\":\n            return (0, lines_1.concat)([\"...\", path.call(print, \"typeAnnotation\")]);\n        case \"TSOptionalType\":\n            return (0, lines_1.concat)([path.call(print, \"typeAnnotation\"), \"?\"]);\n        case \"TSIndexedAccessType\":\n            return (0, lines_1.concat)([\n                path.call(print, \"objectType\"),\n                \"[\",\n                path.call(print, \"indexType\"),\n                \"]\",\n            ]);\n        case \"TSTypeOperator\":\n            return (0, lines_1.concat)([\n                path.call(print, \"operator\"),\n                \" \",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"TSTypeLiteral\": {\n            var members = (0, lines_1.fromString)(\"\\n\").join(path.map(print, \"members\").map(function (member) {\n                if (lastNonSpaceCharacter(member) !== \";\") {\n                    return member.concat(\";\");\n                }\n                return member;\n            }));\n            if (members.isEmpty()) {\n                return (0, lines_1.fromString)(\"{}\", options);\n            }\n            parts.push(\"{\\n\", members.indent(options.tabWidth), \"\\n}\");\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSEnumMember\":\n            parts.push(path.call(print, \"id\"));\n            if (n.initializer) {\n                parts.push(\" = \", path.call(print, \"initializer\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"TSTypeQuery\":\n            return (0, lines_1.concat)([\"typeof \", path.call(print, \"exprName\")]);\n        case \"TSParameterProperty\":\n            if (n.accessibility) {\n                parts.push(n.accessibility, \" \");\n            }\n            if (n.export) {\n                parts.push(\"export \");\n            }\n            if (n.static) {\n                parts.push(\"static \");\n            }\n            if (n.readonly) {\n                parts.push(\"readonly \");\n            }\n            parts.push(path.call(print, \"parameter\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSTypeReference\":\n            return (0, lines_1.concat)([\n                path.call(print, \"typeName\"),\n                path.call(print, \"typeParameters\"),\n            ]);\n        case \"TSQualifiedName\":\n            return (0, lines_1.concat)([path.call(print, \"left\"), \".\", path.call(print, \"right\")]);\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\": {\n            var expression = path.call(print, \"expression\");\n            parts.push(expression, n.type === \"TSSatisfiesExpression\" ? \" satisfies \" : \" as \", path.call(print, \"typeAnnotation\"));\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSTypeCastExpression\":\n            return (0, lines_1.concat)([\n                path.call(print, \"expression\"),\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"TSNonNullExpression\":\n            return (0, lines_1.concat)([path.call(print, \"expression\"), \"!\"]);\n        case \"TSTypeAnnotation\":\n            return (0, lines_1.concat)([\": \", path.call(print, \"typeAnnotation\")]);\n        case \"TSIndexSignature\":\n            return (0, lines_1.concat)([\n                n.readonly ? \"readonly \" : \"\",\n                \"[\",\n                path.map(print, \"parameters\"),\n                \"]\",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"TSPropertySignature\":\n            parts.push(printVariance(path, print), n.readonly ? \"readonly \" : \"\");\n            if (n.computed) {\n                parts.push(\"[\", path.call(print, \"key\"), \"]\");\n            }\n            else {\n                parts.push(path.call(print, \"key\"));\n            }\n            parts.push(n.optional ? \"?\" : \"\", path.call(print, \"typeAnnotation\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSMethodSignature\":\n            if (n.kind === \"get\") {\n                parts.push(\"get \");\n            }\n            else if (n.kind === \"set\") {\n                parts.push(\"set \");\n            }\n            if (n.computed) {\n                parts.push(\"[\", path.call(print, \"key\"), \"]\");\n            }\n            else {\n                parts.push(path.call(print, \"key\"));\n            }\n            if (n.optional) {\n                parts.push(\"?\");\n            }\n            parts.push(path.call(print, \"typeParameters\"), \"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"typeAnnotation\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSTypePredicate\":\n            if (n.asserts) {\n                parts.push(\"asserts \");\n            }\n            parts.push(path.call(print, \"parameterName\"));\n            if (n.typeAnnotation) {\n                parts.push(\" is \", path.call(print, \"typeAnnotation\", \"typeAnnotation\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"TSCallSignatureDeclaration\":\n            return (0, lines_1.concat)([\n                path.call(print, \"typeParameters\"),\n                \"(\",\n                printFunctionParams(path, options, print),\n                \")\",\n                path.call(print, \"typeAnnotation\"),\n            ]);\n        case \"TSConstructSignatureDeclaration\":\n            if (n.typeParameters) {\n                parts.push(\"new\", path.call(print, \"typeParameters\"));\n            }\n            else {\n                parts.push(\"new \");\n            }\n            parts.push(\"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"typeAnnotation\"));\n            return (0, lines_1.concat)(parts);\n        case \"TSTypeAliasDeclaration\":\n            return (0, lines_1.concat)([\n                n.declare ? \"declare \" : \"\",\n                \"type \",\n                path.call(print, \"id\"),\n                path.call(print, \"typeParameters\"),\n                \" = \",\n                path.call(print, \"typeAnnotation\"),\n                \";\",\n            ]);\n        case \"TSTypeParameter\": {\n            parts.push(path.call(print, \"name\"));\n            // ambiguous because of TSMappedType\n            var parent = path.getParentNode(0);\n            var isInMappedType = namedTypes.TSMappedType.check(parent);\n            if (n.constraint) {\n                parts.push(isInMappedType ? \" in \" : \" extends \", path.call(print, \"constraint\"));\n            }\n            if (n[\"default\"]) {\n                parts.push(\" = \", path.call(print, \"default\"));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSTypeAssertion\": {\n            parts.push(\"<\", path.call(print, \"typeAnnotation\"), \"> \", path.call(print, \"expression\"));\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSTypeParameterDeclaration\":\n        case \"TSTypeParameterInstantiation\":\n            return (0, lines_1.concat)([\n                \"<\",\n                (0, lines_1.fromString)(\", \").join(path.map(print, \"params\")),\n                \">\",\n            ]);\n        case \"TSEnumDeclaration\": {\n            parts.push(n.declare ? \"declare \" : \"\", n.const ? \"const \" : \"\", \"enum \", path.call(print, \"id\"));\n            var memberLines = (0, lines_1.fromString)(\",\\n\").join(path.map(print, \"members\"));\n            if (memberLines.isEmpty()) {\n                parts.push(\" {}\");\n            }\n            else {\n                parts.push(\" {\\n\", memberLines.indent(options.tabWidth), \"\\n}\");\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSExpressionWithTypeArguments\":\n            return (0, lines_1.concat)([\n                path.call(print, \"expression\"),\n                path.call(print, \"typeParameters\"),\n            ]);\n        case \"TSInterfaceBody\": {\n            var lines = (0, lines_1.fromString)(\"\\n\").join(path.map(print, \"body\").map(function (element) {\n                if (lastNonSpaceCharacter(element) !== \";\") {\n                    return element.concat(\";\");\n                }\n                return element;\n            }));\n            if (lines.isEmpty()) {\n                return (0, lines_1.fromString)(\"{}\", options);\n            }\n            return (0, lines_1.concat)([\"{\\n\", lines.indent(options.tabWidth), \"\\n}\"]);\n        }\n        case \"TSImportType\":\n            parts.push(\"import(\", path.call(print, \"argument\"), \")\");\n            if (n.qualifier) {\n                parts.push(\".\", path.call(print, \"qualifier\"));\n            }\n            if (n.typeParameters) {\n                parts.push(path.call(print, \"typeParameters\"));\n            }\n            return (0, lines_1.concat)(parts);\n        case \"TSImportEqualsDeclaration\":\n            if (n.isExport) {\n                parts.push(\"export \");\n            }\n            parts.push(\"import \", path.call(print, \"id\"), \" = \", path.call(print, \"moduleReference\"));\n            return maybeAddSemicolon((0, lines_1.concat)(parts));\n        case \"TSExternalModuleReference\":\n            return (0, lines_1.concat)([\"require(\", path.call(print, \"expression\"), \")\"]);\n        case \"TSModuleDeclaration\": {\n            var parent = path.getParentNode();\n            if (parent.type === \"TSModuleDeclaration\") {\n                parts.push(\".\");\n            }\n            else {\n                if (n.declare) {\n                    parts.push(\"declare \");\n                }\n                if (!n.global) {\n                    var isExternal = n.id.type === \"StringLiteral\" ||\n                        (n.id.type === \"Literal\" && typeof n.id.value === \"string\");\n                    if (isExternal) {\n                        parts.push(\"module \");\n                    }\n                    else if (n.loc && n.loc.lines && n.id.loc) {\n                        var prefix = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);\n                        // These keywords are fundamentally ambiguous in the\n                        // Babylon parser, and not reflected in the AST, so\n                        // the best we can do is to match the original code,\n                        // when possible.\n                        if (prefix.indexOf(\"module\") >= 0) {\n                            parts.push(\"module \");\n                        }\n                        else {\n                            parts.push(\"namespace \");\n                        }\n                    }\n                    else {\n                        parts.push(\"namespace \");\n                    }\n                }\n            }\n            parts.push(path.call(print, \"id\"));\n            if (n.body) {\n                parts.push(\" \");\n                parts.push(path.call(print, \"body\"));\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSModuleBlock\": {\n            var naked = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, \"body\");\n            if (naked.isEmpty()) {\n                parts.push(\"{}\");\n            }\n            else {\n                parts.push(\"{\\n\", naked.indent(options.tabWidth), \"\\n}\");\n            }\n            return (0, lines_1.concat)(parts);\n        }\n        case \"TSInstantiationExpression\": {\n            parts.push(path.call(print, \"expression\"), path.call(print, \"typeParameters\"));\n            return (0, lines_1.concat)(parts);\n        }\n        // https://github.com/babel/babel/pull/10148\n        case \"V8IntrinsicIdentifier\":\n            return (0, lines_1.concat)([\"%\", path.call(print, \"name\")]);\n        // https://github.com/babel/babel/pull/13191\n        case \"TopicReference\":\n            return (0, lines_1.fromString)(\"#\");\n        // Unhandled types below. If encountered, nodes of these types should\n        // be either left alone or desugared into AST types that are fully\n        // supported by the pretty-printer.\n        case \"ClassHeritage\": // TODO\n        case \"ComprehensionBlock\": // TODO\n        case \"ComprehensionExpression\": // TODO\n        case \"Glob\": // TODO\n        case \"GeneratorExpression\": // TODO\n        case \"LetStatement\": // TODO\n        case \"LetExpression\": // TODO\n        case \"GraphExpression\": // TODO\n        case \"GraphIndexExpression\": // TODO\n        case \"XMLDefaultDeclaration\":\n        case \"XMLAnyName\":\n        case \"XMLQualifiedIdentifier\":\n        case \"XMLFunctionQualifiedIdentifier\":\n        case \"XMLAttributeSelector\":\n        case \"XMLFilterExpression\":\n        case \"XML\":\n        case \"XMLElement\":\n        case \"XMLList\":\n        case \"XMLEscape\":\n        case \"XMLText\":\n        case \"XMLStartTag\":\n        case \"XMLEndTag\":\n        case \"XMLPointTag\":\n        case \"XMLName\":\n        case \"XMLAttribute\":\n        case \"XMLCdata\":\n        case \"XMLComment\":\n        case \"XMLProcessingInstruction\":\n        default:\n            debugger;\n            throw new Error(\"unknown type: \" + JSON.stringify(n.type));\n    }\n}\nfunction printDecorators(path, printPath) {\n    var parts = [];\n    var node = path.getValue();\n    if (node.decorators &&\n        node.decorators.length > 0 &&\n        // If the parent node is an export declaration, it will be\n        // responsible for printing node.decorators.\n        !util.getParentExportDeclaration(path)) {\n        path.each(function (decoratorPath) {\n            parts.push(printPath(decoratorPath), \"\\n\");\n        }, \"decorators\");\n    }\n    else if (util.isExportDeclaration(node) &&\n        node.declaration &&\n        node.declaration.decorators) {\n        // Export declarations are responsible for printing any decorators\n        // that logically apply to node.declaration.\n        path.each(function (decoratorPath) {\n            parts.push(printPath(decoratorPath), \"\\n\");\n        }, \"declaration\", \"decorators\");\n    }\n    return (0, lines_1.concat)(parts);\n}\nfunction printStatementSequence(path, options, print) {\n    var filtered = [];\n    var sawComment = false;\n    var sawStatement = false;\n    path.each(function (stmtPath) {\n        var stmt = stmtPath.getValue();\n        // Just in case the AST has been modified to contain falsy\n        // \"statements,\" it's safer simply to skip them.\n        if (!stmt) {\n            return;\n        }\n        // Skip printing EmptyStatement nodes to avoid leaving stray\n        // semicolons lying around.\n        if (stmt.type === \"EmptyStatement\" &&\n            !(stmt.comments && stmt.comments.length > 0)) {\n            return;\n        }\n        if (namedTypes.Comment.check(stmt)) {\n            // The pretty printer allows a dangling Comment node to act as\n            // a Statement when the Comment can't be attached to any other\n            // non-Comment node in the tree.\n            sawComment = true;\n        }\n        else if (namedTypes.Statement.check(stmt)) {\n            sawStatement = true;\n        }\n        else {\n            // When the pretty printer encounters a string instead of an\n            // AST node, it just prints the string. This behavior can be\n            // useful for fine-grained formatting decisions like inserting\n            // blank lines.\n            isString.assert(stmt);\n        }\n        // We can't hang onto stmtPath outside of this function, because\n        // it's just a reference to a mutable FastPath object, so we have\n        // to go ahead and print it here.\n        filtered.push({\n            node: stmt,\n            printed: print(stmtPath),\n        });\n    });\n    if (sawComment) {\n        (0, tiny_invariant_1.default)(sawStatement === false, \"Comments may appear as statements in otherwise empty statement \" +\n            \"lists, but may not coexist with non-Comment nodes.\");\n    }\n    var prevTrailingSpace = null;\n    var len = filtered.length;\n    var parts = [];\n    filtered.forEach(function (info, i) {\n        var printed = info.printed;\n        var stmt = info.node;\n        var multiLine = printed.length > 1;\n        var notFirst = i > 0;\n        var notLast = i < len - 1;\n        var leadingSpace;\n        var trailingSpace;\n        var lines = stmt && stmt.loc && stmt.loc.lines;\n        var trueLoc = lines && options.reuseWhitespace && util.getTrueLoc(stmt, lines);\n        if (notFirst) {\n            if (trueLoc) {\n                var beforeStart = lines.skipSpaces(trueLoc.start, true);\n                var beforeStartLine = beforeStart ? beforeStart.line : 1;\n                var leadingGap = trueLoc.start.line - beforeStartLine;\n                leadingSpace = Array(leadingGap + 1).join(\"\\n\");\n            }\n            else {\n                leadingSpace = multiLine ? \"\\n\\n\" : \"\\n\";\n            }\n        }\n        else {\n            leadingSpace = \"\";\n        }\n        if (notLast) {\n            if (trueLoc) {\n                var afterEnd = lines.skipSpaces(trueLoc.end);\n                var afterEndLine = afterEnd ? afterEnd.line : lines.length;\n                var trailingGap = afterEndLine - trueLoc.end.line;\n                trailingSpace = Array(trailingGap + 1).join(\"\\n\");\n            }\n            else {\n                trailingSpace = multiLine ? \"\\n\\n\" : \"\\n\";\n            }\n        }\n        else {\n            trailingSpace = \"\";\n        }\n        parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);\n        if (notLast) {\n            prevTrailingSpace = trailingSpace;\n        }\n        else if (trailingSpace) {\n            parts.push(trailingSpace);\n        }\n    });\n    return (0, lines_1.concat)(parts);\n}\nfunction maxSpace(s1, s2) {\n    if (!s1 && !s2) {\n        return (0, lines_1.fromString)(\"\");\n    }\n    if (!s1) {\n        return (0, lines_1.fromString)(s2);\n    }\n    if (!s2) {\n        return (0, lines_1.fromString)(s1);\n    }\n    var spaceLines1 = (0, lines_1.fromString)(s1);\n    var spaceLines2 = (0, lines_1.fromString)(s2);\n    if (spaceLines2.length > spaceLines1.length) {\n        return spaceLines2;\n    }\n    return spaceLines1;\n}\nfunction printClassMemberModifiers(node) {\n    var parts = [];\n    if (node.declare) {\n        parts.push(\"declare \");\n    }\n    var access = node.accessibility || node.access;\n    if (typeof access === \"string\") {\n        parts.push(access, \" \");\n    }\n    if (node.static) {\n        parts.push(\"static \");\n    }\n    if (node.override) {\n        parts.push(\"override \");\n    }\n    if (node.abstract) {\n        parts.push(\"abstract \");\n    }\n    if (node.readonly) {\n        parts.push(\"readonly \");\n    }\n    return parts;\n}\nfunction printMethod(path, options, print) {\n    var node = path.getNode();\n    var kind = node.kind;\n    var parts = [];\n    var nodeValue = node.value;\n    if (!namedTypes.FunctionExpression.check(nodeValue)) {\n        nodeValue = node;\n    }\n    parts.push.apply(parts, printClassMemberModifiers(node));\n    if (nodeValue.async) {\n        parts.push(\"async \");\n    }\n    if (nodeValue.generator) {\n        parts.push(\"*\");\n    }\n    if (kind === \"get\" || kind === \"set\") {\n        parts.push(kind, \" \");\n    }\n    var key = path.call(print, \"key\");\n    if (node.computed) {\n        key = (0, lines_1.concat)([\"[\", key, \"]\"]);\n    }\n    parts.push(key);\n    if (node.optional) {\n        parts.push(\"?\");\n    }\n    if (node === nodeValue) {\n        parts.push(path.call(print, \"typeParameters\"), \"(\", printFunctionParams(path, options, print), \")\", path.call(print, \"returnType\"));\n        if (node.body) {\n            parts.push(\" \", path.call(print, \"body\"));\n        }\n        else {\n            parts.push(\";\");\n        }\n    }\n    else {\n        parts.push(path.call(print, \"value\", \"typeParameters\"), \"(\", path.call(function (valuePath) { return printFunctionParams(valuePath, options, print); }, \"value\"), \")\", path.call(print, \"value\", \"returnType\"));\n        if (nodeValue.body) {\n            parts.push(\" \", path.call(print, \"value\", \"body\"));\n        }\n        else {\n            parts.push(\";\");\n        }\n    }\n    return (0, lines_1.concat)(parts);\n}\nfunction printArgumentsList(path, options, print) {\n    var printed = path.map(print, \"arguments\");\n    var trailingComma = util.isTrailingCommaEnabled(options, \"parameters\");\n    var joined = (0, lines_1.fromString)(\", \").join(printed);\n    if (joined.getLineLength(1) > options.wrapColumn) {\n        joined = (0, lines_1.fromString)(\",\\n\").join(printed);\n        return (0, lines_1.concat)([\n            \"(\\n\",\n            joined.indent(options.tabWidth),\n            trailingComma ? \",\\n)\" : \"\\n)\",\n        ]);\n    }\n    return (0, lines_1.concat)([\"(\", joined, \")\"]);\n}\nfunction printFunctionParams(path, options, print) {\n    var fun = path.getValue();\n    var params;\n    var printed = [];\n    if (fun.params) {\n        params = fun.params;\n        printed = path.map(print, \"params\");\n    }\n    else if (fun.parameters) {\n        params = fun.parameters;\n        printed = path.map(print, \"parameters\");\n    }\n    if (fun.defaults) {\n        path.each(function (defExprPath) {\n            var i = defExprPath.getName();\n            var p = printed[i];\n            if (p && defExprPath.getValue()) {\n                printed[i] = (0, lines_1.concat)([p, \" = \", print(defExprPath)]);\n            }\n        }, \"defaults\");\n    }\n    if (fun.rest) {\n        printed.push((0, lines_1.concat)([\"...\", path.call(print, \"rest\")]));\n    }\n    var joined = (0, lines_1.fromString)(\", \").join(printed);\n    if (joined.length > 1 || joined.getLineLength(1) > options.wrapColumn) {\n        joined = (0, lines_1.fromString)(\",\\n\").join(printed);\n        if (util.isTrailingCommaEnabled(options, \"parameters\") &&\n            !fun.rest &&\n            params[params.length - 1].type !== \"RestElement\") {\n            joined = (0, lines_1.concat)([joined, \",\\n\"]);\n        }\n        else {\n            joined = (0, lines_1.concat)([joined, \"\\n\"]);\n        }\n        return (0, lines_1.concat)([\"\\n\", joined.indent(options.tabWidth)]);\n    }\n    return joined;\n}\nfunction maybePrintImportAssertions(path, options, print) {\n    var n = path.getValue();\n    if (n.assertions && n.assertions.length > 0) {\n        var parts = [\" assert {\"];\n        var printed = path.map(print, \"assertions\");\n        var flat = (0, lines_1.fromString)(\", \").join(printed);\n        if (flat.length > 1 || flat.getLineLength(1) > options.wrapColumn) {\n            parts.push(\"\\n\", (0, lines_1.fromString)(\",\\n\").join(printed).indent(options.tabWidth), \"\\n}\");\n        }\n        else {\n            parts.push(\" \", flat, \" }\");\n        }\n        return (0, lines_1.concat)(parts);\n    }\n    return (0, lines_1.fromString)(\"\");\n}\nfunction printExportDeclaration(path, options, print) {\n    var decl = path.getValue();\n    var parts = [\"export \"];\n    if (decl.exportKind && decl.exportKind === \"type\") {\n        if (!decl.declaration) {\n            parts.push(\"type \");\n        }\n    }\n    var shouldPrintSpaces = options.objectCurlySpacing;\n    namedTypes.Declaration.assert(decl);\n    if (decl[\"default\"] || decl.type === \"ExportDefaultDeclaration\") {\n        parts.push(\"default \");\n    }\n    if (decl.declaration) {\n        parts.push(path.call(print, \"declaration\"));\n    }\n    else if (decl.specifiers) {\n        if (decl.specifiers.length === 1 &&\n            decl.specifiers[0].type === \"ExportBatchSpecifier\") {\n            parts.push(\"*\");\n        }\n        else if (decl.specifiers.length === 0) {\n            parts.push(\"{}\");\n        }\n        else if (decl.specifiers[0].type === \"ExportDefaultSpecifier\" ||\n            decl.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n            var unbracedSpecifiers_2 = [];\n            var bracedSpecifiers_2 = [];\n            path.each(function (specifierPath) {\n                var spec = specifierPath.getValue();\n                if (spec.type === \"ExportDefaultSpecifier\" ||\n                    spec.type === \"ExportNamespaceSpecifier\") {\n                    unbracedSpecifiers_2.push(print(specifierPath));\n                }\n                else {\n                    bracedSpecifiers_2.push(print(specifierPath));\n                }\n            }, \"specifiers\");\n            unbracedSpecifiers_2.forEach(function (lines, i) {\n                if (i > 0) {\n                    parts.push(\", \");\n                }\n                parts.push(lines);\n            });\n            if (bracedSpecifiers_2.length > 0) {\n                var lines_2 = (0, lines_1.fromString)(\", \").join(bracedSpecifiers_2);\n                if (lines_2.getLineLength(1) > options.wrapColumn) {\n                    lines_2 = (0, lines_1.concat)([\n                        (0, lines_1.fromString)(\",\\n\").join(bracedSpecifiers_2).indent(options.tabWidth),\n                        \",\",\n                    ]);\n                }\n                if (unbracedSpecifiers_2.length > 0) {\n                    parts.push(\", \");\n                }\n                if (lines_2.length > 1) {\n                    parts.push(\"{\\n\", lines_2, \"\\n}\");\n                }\n                else if (options.objectCurlySpacing) {\n                    parts.push(\"{ \", lines_2, \" }\");\n                }\n                else {\n                    parts.push(\"{\", lines_2, \"}\");\n                }\n            }\n        }\n        else {\n            parts.push(shouldPrintSpaces ? \"{ \" : \"{\", (0, lines_1.fromString)(\", \").join(path.map(print, \"specifiers\")), shouldPrintSpaces ? \" }\" : \"}\");\n        }\n        if (decl.source) {\n            parts.push(\" from \", path.call(print, \"source\"), maybePrintImportAssertions(path, options, print));\n        }\n    }\n    var lines = (0, lines_1.concat)(parts);\n    if (lastNonSpaceCharacter(lines) !== \";\" &&\n        !(decl.declaration &&\n            (decl.declaration.type === \"FunctionDeclaration\" ||\n                decl.declaration.type === \"ClassDeclaration\" ||\n                decl.declaration.type === \"TSModuleDeclaration\" ||\n                decl.declaration.type === \"TSInterfaceDeclaration\" ||\n                decl.declaration.type === \"TSEnumDeclaration\"))) {\n        lines = (0, lines_1.concat)([lines, \";\"]);\n    }\n    return lines;\n}\nfunction printFlowDeclaration(path, parts) {\n    var parentExportDecl = util.getParentExportDeclaration(path);\n    if (parentExportDecl) {\n        (0, tiny_invariant_1.default)(parentExportDecl.type === \"DeclareExportDeclaration\");\n    }\n    else {\n        // If the parent node has type DeclareExportDeclaration, then it\n        // will be responsible for printing the \"declare\" token. Otherwise\n        // it needs to be printed with this non-exported declaration node.\n        parts.unshift(\"declare \");\n    }\n    return (0, lines_1.concat)(parts);\n}\nfunction printVariance(path, print) {\n    return path.call(function (variancePath) {\n        var value = variancePath.getValue();\n        if (value) {\n            if (value === \"plus\") {\n                return (0, lines_1.fromString)(\"+\");\n            }\n            if (value === \"minus\") {\n                return (0, lines_1.fromString)(\"-\");\n            }\n            return print(variancePath);\n        }\n        return (0, lines_1.fromString)(\"\");\n    }, \"variance\");\n}\nfunction adjustClause(clause, options) {\n    if (clause.length > 1)\n        return (0, lines_1.concat)([\" \", clause]);\n    return (0, lines_1.concat)([\"\\n\", maybeAddSemicolon(clause).indent(options.tabWidth)]);\n}\nfunction lastNonSpaceCharacter(lines) {\n    var pos = lines.lastPos();\n    do {\n        var ch = lines.charAt(pos);\n        if (/\\S/.test(ch))\n            return ch;\n    } while (lines.prevPos(pos));\n}\nfunction endsWithBrace(lines) {\n    return lastNonSpaceCharacter(lines) === \"}\";\n}\nfunction swapQuotes(str) {\n    return str.replace(/['\"]/g, function (m) { return (m === '\"' ? \"'\" : '\"'); });\n}\nfunction getPossibleRaw(node) {\n    var value = types.getFieldValue(node, \"value\");\n    var extra = types.getFieldValue(node, \"extra\");\n    if (extra && typeof extra.raw === \"string\" && value == extra.rawValue) {\n        return extra.raw;\n    }\n    if (node.type === \"Literal\") {\n        var raw = node.raw;\n        if (typeof raw === \"string\" && value == raw) {\n            return raw;\n        }\n    }\n}\nfunction jsSafeStringify(str) {\n    return JSON.stringify(str).replace(/[\\u2028\\u2029]/g, function (m) {\n        return \"\\\\u\" + m.charCodeAt(0).toString(16);\n    });\n}\nfunction nodeStr(str, options) {\n    isString.assert(str);\n    switch (options.quote) {\n        case \"auto\": {\n            var double = jsSafeStringify(str);\n            var single = swapQuotes(jsSafeStringify(swapQuotes(str)));\n            return double.length > single.length ? single : double;\n        }\n        case \"single\":\n            return swapQuotes(jsSafeStringify(swapQuotes(str)));\n        case \"double\":\n        default:\n            return jsSafeStringify(str);\n    }\n}\nfunction maybeAddSemicolon(lines) {\n    var eoc = lastNonSpaceCharacter(lines);\n    if (!eoc || \"\\n};\".indexOf(eoc) < 0)\n        return (0, lines_1.concat)([lines, \";\"]);\n    return lines;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = exports.prettyPrint = exports.print = exports.visit = exports.types = exports.parse = void 0;\nvar tslib_1 = require(\"tslib\");\nvar fs_1 = tslib_1.__importDefault(require(\"fs\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nexports.types = types;\nvar parser_1 = require(\"./lib/parser\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parser_1.parse; } });\nvar printer_1 = require(\"./lib/printer\");\n/**\n * Traverse and potentially modify an abstract syntax tree using a\n * convenient visitor syntax:\n *\n *   recast.visit(ast, {\n *     names: [],\n *     visitIdentifier: function(path) {\n *       var node = path.value;\n *       this.visitor.names.push(node.name);\n *       this.traverse(path);\n *     }\n *   });\n */\nvar ast_types_1 = require(\"ast-types\");\nObject.defineProperty(exports, \"visit\", { enumerable: true, get: function () { return ast_types_1.visit; } });\n/**\n * Reprint a modified syntax tree using as much of the original source\n * code as possible.\n */\nfunction print(node, options) {\n    return new printer_1.Printer(options).print(node);\n}\nexports.print = print;\n/**\n * Print without attempting to reuse any original source code.\n */\nfunction prettyPrint(node, options) {\n    return new printer_1.Printer(options).printGenerically(node);\n}\nexports.prettyPrint = prettyPrint;\n/**\n * Convenient command-line interface (see e.g. example/add-braces).\n */\nfunction run(transformer, options) {\n    return runFile(process.argv[2], transformer, options);\n}\nexports.run = run;\nfunction runFile(path, transformer, options) {\n    fs_1.default.readFile(path, \"utf-8\", function (err, code) {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        runString(code, transformer, options);\n    });\n}\nfunction defaultWriteback(output) {\n    process.stdout.write(output);\n}\nfunction runString(code, transformer, options) {\n    var writeback = (options && options.writeback) || defaultWriteback;\n    transformer((0, parser_1.parse)(code, options), function (node) {\n        writeback(print(node, options).code);\n    });\n}\n"],
  "mappings": "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",
  "names": ["module", "exports", "CommentHandler", "JSXParser", "JSXClosingElement", "JSXElement", "JSXEmptyExpression", "JSXExpressionContainer", "JSXIdentifier", "JSXMemberExpression", "JSXAttribute", "JSXNamespacedName", "JSXOpeningElement", "JSXSpreadAttribute", "JSXText", "ArrayExpression", "ArrayPattern", "ArrowFunctionExpression", "AssignmentExpression", "AssignmentPattern", "AsyncArrowFunctionExpression", "AsyncFunctionDeclaration", "AsyncFunctionExpression", "AwaitExpression", "BinaryExpression", "BlockStatement", "BreakStatement", "CallExpression", "CatchClause", "ClassBody", "ClassDeclaration", "ClassExpression", "ComputedMemberExpression", "ConditionalExpression", "ContinueStatement", "DebuggerStatement", "Directive", "DoWhileStatement", "EmptyStatement", "ExportAllDeclaration", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ExportSpecifier", "ExpressionStatement", "ForInStatement", "ForOfStatement", "ForStatement", "FunctionDeclaration", "FunctionExpression", "Identifier", "IfStatement", "ImportDeclaration", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ImportSpecifier", "LabeledStatement", "Literal", "MetaProperty", "MethodDefinition", "Module", "NewExpression", "ObjectExpression", "ObjectPattern", "Property", "RegexLiteral", "RestElement", "ReturnStatement", "Script", "SequenceExpression", "SpreadElement", "StaticMemberExpression", "Super", "SwitchCase", "SwitchStatement", "TaggedTemplateExpression", "TemplateElement", "TemplateLiteral", "ThisExpression", "ThrowStatement", "TryStatement", "UnaryExpression", "UpdateExpression", "VariableDeclaration", "VariableDeclarator", "WhileStatement", "WithStatement", "YieldExpression", "Parser", "ErrorHandler", "Scanner", "Reader", "Tokenizer", "require_esprima", "Mapping", "Lines", "sliced", "info", "lines", "comment", "TreeCopier", "i", "FastPath", "copy", "Patcher", "lines", "PrintResult", "Printer", "path", "lines", "require_main"]
}
