{
  "version": 3,
  "sources": ["../../recast/parsers/_babel_options.js", "../../@babel/parser/src/util/location.ts", "../../@babel/parser/src/parse-error/module-errors.ts", "../../@babel/parser/src/parse-error/to-node-description.ts", "../../@babel/parser/src/parse-error/standard-errors.ts", "../../@babel/parser/src/parse-error/strict-mode-errors.ts", "../../@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../../@babel/parser/src/parse-error.ts", "../../@babel/parser/src/plugins/estree.ts", "../../@babel/parser/src/tokenizer/context.ts", "../../@babel/parser/src/tokenizer/types.ts", "../../@babel/babel-helper-validator-identifier/src/identifier.ts", "../../@babel/babel-helper-validator-identifier/src/keyword.ts", "../../@babel/parser/src/util/identifier.ts", "../../@babel/parser/src/util/scope.ts", "../../@babel/parser/src/plugins/flow/scope.ts", "../../@babel/parser/src/parser/base.ts", "../../@babel/parser/src/parser/comments.ts", "../../@babel/parser/src/util/whitespace.ts", "../../@babel/parser/src/tokenizer/state.ts", "../../@babel/babel-helper-string-parser/src/index.ts", "../../@babel/parser/src/tokenizer/index.ts", "../../@babel/parser/src/util/class-scope.ts", "../../@babel/parser/src/util/expression-scope.ts", "../../@babel/parser/src/util/production-parameter.ts", "../../@babel/parser/src/parser/util.ts", "../../@babel/parser/src/parser/node.ts", "../../@babel/parser/src/plugins/flow/index.ts", "../../@babel/parser/src/plugins/jsx/xhtml.ts", "../../@babel/parser/src/plugins/jsx/index.ts", "../../@babel/parser/src/plugins/typescript/scope.ts", "../../@babel/parser/src/parser/lval.ts", "../../@babel/parser/src/plugins/typescript/index.ts", "../../@babel/parser/src/plugins/placeholders.ts", "../../@babel/parser/src/plugins/v8intrinsic.ts", "../../@babel/parser/src/plugin-utils.ts", "../../@babel/parser/src/options.ts", "../../@babel/parser/src/parser/expression.ts", "../../@babel/parser/src/parser/statement.ts", "../../@babel/parser/src/parser/index.ts", "../../@babel/parser/src/index.ts", "../../recast/parsers/babel.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../lib/util\");\nfunction getBabelOptions(options) {\n    // The goal here is to tolerate as much syntax as possible, since Recast\n    // is not in the business of forbidding anything. If you want your\n    // parser to be more restrictive for some reason, you can always pass\n    // your own parser object to recast.parse.\n    return {\n        sourceType: (0, util_1.getOption)(options, \"sourceType\", \"module\"),\n        strictMode: (0, util_1.getOption)(options, \"strictMode\", false),\n        allowImportExportEverywhere: true,\n        allowReturnOutsideFunction: true,\n        startLine: 1,\n        tokens: true,\n        plugins: [\n            \"asyncGenerators\",\n            \"bigInt\",\n            \"classPrivateMethods\",\n            \"classPrivateProperties\",\n            \"classProperties\",\n            \"classStaticBlock\",\n            \"decimal\",\n            \"decorators-legacy\",\n            \"doExpressions\",\n            \"dynamicImport\",\n            \"exportDefaultFrom\",\n            \"exportExtensions\",\n            \"exportNamespaceFrom\",\n            \"functionBind\",\n            \"functionSent\",\n            \"importAssertions\",\n            \"importMeta\",\n            \"nullishCoalescingOperator\",\n            \"numericSeparator\",\n            \"objectRestSpread\",\n            \"optionalCatchBinding\",\n            \"optionalChaining\",\n            [\n                \"pipelineOperator\",\n                {\n                    proposal: \"minimal\",\n                },\n            ],\n            [\n                \"recordAndTuple\",\n                {\n                    syntaxType: \"hash\",\n                },\n            ],\n            \"throwExpressions\",\n            \"topLevelAwait\",\n            \"v8intrinsic\",\n        ],\n    };\n}\nexports.default = getBabelOptions;\n", "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        if (\n          this.hasPlugin(\"importAttributes\") ||\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\"))\n        ) {\n          (node as N.Node as N.EstreeImportExpression).options =\n            (node.arguments[1] as N.Expression) ?? null;\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            (node.arguments[1] as N.Expression) ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport type { Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.state.lastTokEndLoc.index,\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (\n        (process.env.BABEL_8_BREAKING || this.plugins.get(\"flow\").enums) &&\n        this.isContextual(tt._enum)\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        ((process.env.BABEL_8_BREAKING || this.plugins.get(\"flow\").enums) &&\n          type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        ((process.env.BABEL_8_BREAKING || this.plugins.get(\"flow\").enums) &&\n          type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (\n        (process.env.BABEL_8_BREAKING || this.plugins.get(\"flow\").enums) &&\n        this.isContextual(tt._enum)\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.includes(node.start)) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (\n        (process.env.BABEL_8_BREAKING || this.plugins.get(\"flow\").enums) &&\n        this.isContextual(tt._enum)\n      ) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (this.state.noArrowParamsConversionAt.includes(node.start)) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(node.start)\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && !this.state.noArrowAt.includes(this.state.start),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        (elt as unknown as RestElement).type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      if (\n        this.hasPlugin(\"importAttributes\") ||\n        (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\"))\n      ) {\n        node.options = null;\n      }\n      if (this.eat(tt.comma)) {\n        if (\n          process.env.BABEL_8_BREAKING ||\n          !this.hasPlugin(\"importAssertions\")\n        ) {\n          this.expectPlugin(\"importAttributes\");\n        }\n        if (!this.match(tt.parenR)) {\n          node.options = super.parseMaybeAssignAllowIn();\n          this.eat(tt.comma);\n        }\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<\n            N.TSClassImplements | N.TSInterfaceHeritage\n          >();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(\n            node,\n            // @ts-expect-error Babel 7 vs Babel 8\n            process.env.BABEL_8_BREAKING\n              ? token === \"extends\"\n                ? \"TSInterfaceHeritage\"\n                : \"TSClassImplements\"\n              : \"TSExpressionWithTypeArguments\",\n          );\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        const nodeImportEquals = node as Undone<N.TsImportEqualsDeclaration>;\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n        case \"TSInstantiationExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n          ) as N.CallExpression;\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = process.env.BABEL_8_BREAKING\n      ? pluginsMap.has(\"recordAndTuple\")\n      : pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"importAttributes\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedAssertSyntax: true` option of those plugins.\",\n      );\n    } else if (pluginsMap.has(\"importAttributes\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and importAttributes plugins.\",\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  sourceType?: SourceType;\n  sourceFilename?: string;\n  startColumn?: number;\n  startLine?: number;\n  allowAwaitOutsideFunction?: boolean;\n  allowReturnOutsideFunction?: boolean;\n  allowNewTargetOutsideFunction?: boolean;\n  allowImportExportEverywhere?: boolean;\n  allowSuperOutsideMethod?: boolean;\n  allowUndeclaredExports?: boolean;\n  plugins?: PluginList;\n  strictMode?: boolean | undefined | null;\n  ranges?: boolean;\n  tokens?: boolean;\n  createImportExpressions?: boolean;\n  createParenthesizedExpressions?: boolean;\n  errorRecovery?: boolean;\n  attachComment?: boolean;\n  annexB?: boolean;\n}\n\ntype OptionsWithDefaults = { [P in keyof Options]-?: Options[P] };\n\nexport const defaultOptions: OptionsWithDefaults = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ImportExpression AST nodes (if false\n  // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n  createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  if (opts == null) {\n    return { ...defaultOptions };\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions) as (keyof Options)[]) {\n    options[key] = opts[key] ?? defaultOptions[key];\n  }\n  return options;\n}\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type { SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          // @ts-expect-error Remove this in Babel 8\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          // @ts-expect-error Remove this in Babel 8\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (\n          process.env.BABEL_8_BREAKING ||\n          !(\n            this.hasPlugin(\"moduleAttributes\") ||\n            this.hasPlugin(\"importAssertions\")\n          )\n        ) {\n          this.expectPlugin(\"importAttributes\");\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node, {\n          maxArgumentCount:\n            this.hasPlugin(\"importAttributes\") ||\n            (!process.env.BABEL_8_BREAKING &&\n              (this.hasPlugin(\"importAssertions\") ||\n                this.hasPlugin(\"moduleAttributes\")))\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAttributes\") &&\n            (process.env.BABEL_8_BREAKING ||\n              (!this.hasPlugin(\"importAssertions\") &&\n                !this.hasPlugin(\"moduleAttributes\")))\n          ) {\n            this.raise(\n              Errors.ImportCallArgumentTrailingComma,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      // TODO: The proposal doesn't mention import.defer yet because it was\n      // pending on a decision for import.source. Wait to enable it until it's\n      // included in the proposal.\n      if (!isSource) this.unexpected();\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!this.options.createImportExpressions) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.options.allowAwaitOutsideFunction && !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    if (\n      this.hasPlugin(\"importAttributes\") ||\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\"))\n    ) {\n      node.options = null;\n    }\n    if (this.eat(tt.comma)) {\n      if (\n        process.env.BABEL_8_BREAKING ||\n        !(\n          this.hasPlugin(\"moduleAttributes\") ||\n          this.hasPlugin(\"importAssertions\")\n        )\n      ) {\n        this.expectPlugin(\"importAttributes\");\n      }\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport type { SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !this.options.allowUndeclaredExports &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode<N.CallExpression>(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node2.source = null;\n      node2.declaration = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (process.env.BABEL_8_BREAKING) {\n        this.expectPlugin(\"importAttributes\");\n        attributes = this.parseImportAttributes();\n      } else if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n      } else {\n        if (!this.hasPlugin(\"importAssertions\")) {\n          this.expectPlugin(\"importAttributes\");\n        }\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (\n          this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !==\n          true\n        ) {\n          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else if (process.env.BABEL_8_BREAKING) {\n        this.expectPlugin(\"importAttributes\");\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else if (\n      this.hasPlugin(\"importAttributes\") ||\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\"))\n    ) {\n      attributes = [];\n    } else if (!process.env.BABEL_8_BREAKING) {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    } else return;\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\nexport type { Expression, File };\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = exports.parser = void 0;\nvar tslib_1 = require(\"tslib\");\nvar _babel_options_1 = tslib_1.__importDefault(require(\"./_babel_options\"));\n// Prefer the new @babel/parser package, but fall back to babylon if\n// that's what's available.\nexports.parser = (function () {\n    try {\n        return require(\"@babel/parser\");\n    }\n    catch (_a) {\n        try {\n            return require(\"babylon\");\n        }\n        catch (_b) {\n            throw new Error(\"Install @babel/parser to use the `typescript`, `flow`, or `babel` parsers\");\n        }\n    }\n})();\n// This module is suitable for passing as options.parser when calling\n// recast.parse to process JavaScript code with Babel:\n//\n//   const ast = recast.parse(source, {\n//     parser: require(\"recast/parsers/babel\")\n//   });\n//\nfunction parse(source, options) {\n    var babelOptions = (0, _babel_options_1.default)(options);\n    babelOptions.plugins.push(\"jsx\", \"flow\", \"decoratorAutoAccessors\");\n    return exports.parser.parse(source, babelOptions);\n}\nexports.parse = parse;\n"],
  "mappings": "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AE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,IAAG,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,IAAG,KAAI,MAAK,KAAI,MAAK,MAAK,GAAE,IAAI;AAEhkD,QAAMC,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,MAAK,GAAE,GAAE,IAAG,OAAM,IAAG,MAAK,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,OAAM,GAAE,MAAK,GAAE,KAAI,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,MAAK,IAAG,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,KAAI,IAAG,KAAI,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,MAAK,GAAE,QAAO,GAAG;AAK90B,aAASC,cAAcvnB,OAAc0Q,KAAiC;AACpE,UAAIN,MAAM;AACV,eAASoX,IAAI,GAAGrO,SAASzI,IAAIyI,QAAQqO,IAAIrO,QAAQqO,KAAK,GAAG;AACvDpX,eAAOM,IAAI8W,CAAC;AACZ,YAAIpX,MAAMpQ,MAAM,QAAO;AAEvBoQ,eAAOM,IAAI8W,IAAI,CAAC;AAChB,YAAIpX,OAAOpQ,MAAM,QAAO;MAC1B;AACA,aAAO;IACT;AAIO,aAASynB,kBAAkBznB,OAAuB;AACvD,UAAIA,QAAI,GAAyB,QAAOA,UAA6B;AACrE,UAAIA,SAAI,GAA0B,QAAO;AACzC,UAAIA,QAAI,GAAyB,QAAOA,UAA6B;AACrE,UAAIA,SAAI,IAA0B,QAAO;AACzC,UAAIA,SAAQ,OAAQ;AAClB,eACEA,SAAQ,OAAQmnB,wBAAwBO,KAAK3U,OAAO4U,aAAa3nB,KAAI,CAAC;MAE1E;AACA,aAAOunB,cAAcvnB,OAAMqnB,0BAA0B;IACvD;AAIO,aAASO,iBAAiB5nB,OAAuB;AACtD,UAAIA,QAAI,GAAqB,QAAOA,UAA6B;AACjE,UAAIA,QAAI,GAAoB,QAAO;AACnC,UAAIA,QAAI,GAAyB,QAAO;AACxC,UAAIA,SAAI,GAA0B,QAAO;AACzC,UAAIA,QAAI,GAAyB,QAAOA,UAA6B;AACrE,UAAIA,SAAI,IAA0B,QAAO;AACzC,UAAIA,SAAQ,OAAQ;AAClB,eAAOA,SAAQ,OAAQonB,mBAAmBM,KAAK3U,OAAO4U,aAAa3nB,KAAI,CAAC;MAC1E;AACA,aACEunB,cAAcvnB,OAAMqnB,0BAA0B,KAC9CE,cAAcvnB,OAAMsnB,qBAAqB;IAE7C;AClFA,QAAMO,gBAAgB;MACpB1c,SAAS,CACP,SACA,QACA,SACA,YACA,YACA,WACA,MACA,QACA,WACA,OACA,YACA,MACA,UACA,UACA,SACA,OACA,OACA,SACA,SACA,QACA,OACA,QACA,SACA,SACA,WACA,UACA,UACA,QACA,QACA,SACA,MACA,cACA,UACA,QACA,QAAQ;MAEV2c,QAAQ,CACN,cACA,aACA,OACA,WACA,WACA,aACA,UACA,UACA,OAAO;MAETC,YAAY,CAAC,QAAQ,WAAW;IAClC;AACA,QAAMvM,WAAW,IAAI1N,IAAI+Z,cAAc1c,OAAO;AAC9C,QAAM6c,yBAAyB,IAAIla,IAAI+Z,cAAcC,MAAM;AAC3D,QAAMG,6BAA6B,IAAIna,IAAI+Z,cAAcE,UAAU;AAK5D,aAASG,eAAeC,MAAcC,UAA4B;AACvE,aAAQA,YAAYD,SAAS,WAAYA,SAAS;IACpD;AAOO,aAASE,qBAAqBF,MAAcC,UAA4B;AAC7E,aAAOF,eAAeC,MAAMC,QAAQ,KAAKJ,uBAAuBM,IAAIH,IAAI;IAC1E;AAMO,aAASI,6BAA6BJ,MAAuB;AAClE,aAAOF,2BAA2BK,IAAIH,IAAI;IAC5C;AAOO,aAASK,yBACdL,MACAC,UACS;AACT,aACEC,qBAAqBF,MAAMC,QAAQ,KAAKG,6BAA6BJ,IAAI;IAE7E;AAEO,aAASM,UAAUN,MAAuB;AAC/C,aAAO3M,SAAS8M,IAAIH,IAAI;IAC1B;AC9EO,aAASO,gBACdC,SACAC,MACAC,OACS;AACT,aACEF,YAAO,MACPC,SAAI,MACJnB,kBAAkBoB,KAAK;IAE3B;AAOA,QAAMC,sBAAsB,oBAAIhb,IAAI,CAClC,SACA,QACA,SACA,YACA,YACA,WACA,MACA,QACA,WACA,OACA,YACA,MACA,UACA,UACA,SACA,OACA,OACA,SACA,SACA,QACA,OACA,QACA,SACA,SACA,WACA,UACA,UACA,QACA,QACA,SACA,MACA,cACA,UACA,QACA,UAEA,cACA,aACA,OACA,WACA,WACA,aACA,UACA,UACA,SAEA,QACA,aAEA,QACA,OAAO,CACR;AAEM,aAASib,kBAAkBZ,MAAuB;AACvD,aAAOW,oBAAoBR,IAAIH,IAAI;IACrC;AC1EO,QAAMa,QAAN,MAAY;MAKjB7pB,YAAYkT,OAAkB;AAAA,aAJ9BA,QAAmB;AAAC,aACpB4W,QAA+B,oBAAIxN,IAAG;AAAE,aACxCyN,mBAAmB;AAGjB,aAAK7W,QAAQA;MACf;IACF;AAIe,QAAM8W,eAAN,MAAiD;MAM9DhqB,YAAYiqB,QAAmBhB,UAAmB;AAAA,aALlDgB,SAAM;AAAA,aACNC,aAA4B,CAAA;AAAE,aAC9BjB,WAAQ;AAAA,aACRkB,mBAA0C,oBAAI7N,IAAG;AAG/C,aAAK2N,SAASA;AACd,aAAKhB,WAAWA;MAClB;MAEA,IAAImB,aAAa;AACf,gBAAQ,KAAKC,aAAc,EAACnX,QAAK,KAAwB;MAC3D;MACA,IAAIoX,aAAa;AACf,gBAAQ,KAAKC,qBAAoB,IAAE,KAAyB;MAC9D;MACA,IAAIC,aAAa;AACf,gBAAQ,KAAKC,sBAAqB,IAAE,MAAsB;MAC5D;MACA,IAAIzT,mBAAmB;AACrB,gBAAQ,KAAKyT,sBAAqB,IAAE,MAA6B;MACnE;MACA,IAAIC,UAAU;AACZ,gBAAQ,KAAKD,sBAAqB,IAAE,MAAsB;MAC5D;MACA,IAAIE,kCAAkC;AACpC,cAAMzX,QAAQ,KAAKuX,sBAAqB;AACxC,gBAAQvX,QAAK,MAAsB,MAAMA,QAAK,OAA2B;MAC3E;MACA,IAAI0X,gBAAgB;AAClB,iBAASvC,IAAI,KAAK6B,WAAWlQ,SAAS,KAAKqO,KAAK;AAC9C,gBAAM;YAAEnV;UAAM,IAAI,KAAKgX,WAAW7B,CAAC;AACnC,cAAInV,QAAK,KAA2B;AAClC,mBAAO;UACT;AACA,cAAIA,SAAS2X,MAAAA,KAAkC;AAE7C,mBAAO;UACT;QACF;MACF;MACA,IAAIC,qBAAqB;AACvB,gBAAQ,KAAKL,sBAAqB,IAAE,KAAyB;MAC/D;MACA,IAAIM,sBAAsB;AACxB,eAAO,KAAKC,2BAA2B,KAAKX,aAAc,CAAA;MAC5D;MAEAY,YAAY/X,OAAyB;AACnC,eAAO,IAAI2W,MAAM3W,KAAK;MACxB;MAEAgY,MAAMhY,OAAkB;AAGtB,aAAKgX,WAAW5T,KAAK,KAAK2U,YAAY/X,KAAK,CAAC;MAC9C;MAEAiY,OAAkB;AAChB,cAAMC,QAAQ,KAAKlB,WAAWtC,IAAG;AACjC,eAAOwD,MAAMlY;MACf;MAKA8X,2BAA2BI,OAAwB;AACjD,eAAO,CAAC,EACNA,MAAMlY,SAAS2X,IAAAA,QACd,CAAC,KAAKZ,OAAOhB,YAAYmC,MAAMlY,QAAK;MAEzC;MAEAmY,YAAYtiB,MAAcuiB,aAA0Bza,KAAe;AACjE,YAAIua,QAAQ,KAAKf,aAAY;AAC7B,YACEiB,cAAW,KACXA,cAAW,IACX;AACA,eAAKC,0BAA0BH,OAAOriB,MAAMuiB,aAAaza,GAAG;AAE5D,cAAIlO,OAAOyoB,MAAMtB,MAAMxY,IAAIvI,IAAI,KAAK;AAEpC,cAAIuiB,cAAW,IAA+B;AAC5C3oB,mBAAOA,OAAI;UACb,OAAO;AACL,gBAAI,CAACyoB,MAAMrB,kBAAkB;AAC3BqB,oBAAMrB,mBAAmBhhB;YAC3B;AACApG,mBAAOA,OAAI;UACb;AAEAyoB,gBAAMtB,MAAMvY,IAAIxI,MAAMpG,IAAI;AAE1B,cAAI2oB,cAAW,GAA8B;AAC3C,iBAAKE,mBAAmBJ,OAAOriB,IAAI;UACrC;QACF,WAAWuiB,cAAW,GAA0B;AAC9C,mBAASjD,IAAI,KAAK6B,WAAWlQ,SAAS,GAAGqO,KAAK,GAAG,EAAEA,GAAG;AACpD+C,oBAAQ,KAAKlB,WAAW7B,CAAC;AACzB,iBAAKkD,0BAA0BH,OAAOriB,MAAMuiB,aAAaza,GAAG;AAC5Dua,kBAAMtB,MAAMvY,IAAIxI,OAAOqiB,MAAMtB,MAAMxY,IAAIvI,IAAI,KAAK,KAAC,CAAgB;AACjE,iBAAKyiB,mBAAmBJ,OAAOriB,IAAI;AAEnC,gBAAIqiB,MAAMlY,QAAK,IAAkB;UACnC;QACF;AACA,YAAI,KAAK+W,OAAOhB,YAAYmC,MAAMlY,QAAK,GAAsB;AAC3D,eAAKiX,iBAAiBsB,OAAO1iB,IAAI;QACnC;MACF;MAEAyiB,mBAAmBJ,OAAeriB,MAAc;AAC9C,YAAI,KAAKkhB,OAAOhB,YAAYmC,MAAMlY,QAAK,GAAsB;AAC3D,eAAKiX,iBAAiBsB,OAAO1iB,IAAI;QACnC;MACF;MAEAwiB,0BACEH,OACAriB,MACAuiB,aACAza,KACA;AACA,YAAI,KAAK6a,oBAAoBN,OAAOriB,MAAMuiB,WAAW,GAAG;AACtD,eAAKrB,OAAOnR,MAAMzG,OAAOzE,kBAAkBiD,KAAK;YAC9CpQ,gBAAgBsI;UAClB,CAAC;QACH;MACF;MAEA2iB,oBACEN,OACAriB,MACAuiB,aACS;AACT,YAAI,EAAEA,cAAW,GAA4B,QAAO;AAEpD,YAAIA,cAAW,GAA8B;AAC3C,iBAAOF,MAAMtB,MAAMX,IAAIpgB,IAAI;QAC7B;AAEA,cAAMpG,OAAOyoB,MAAMtB,MAAMxY,IAAIvI,IAAI;AAEjC,YAAIuiB,cAAW,IAA+B;AAC5C,kBACG3oB,OAAI,KAAuB,KAC3B,CAAC,KAAKqoB,2BAA2BI,KAAK,MAAMzoB,OAAI,KAAmB;QAExE;AAEA,gBACIA,OAAI,KAAuB,KAG3B,EACEyoB,MAAMlY,QAAK,KACXkY,MAAMrB,qBAAqBhhB,SAE9B,CAAC,KAAKiiB,2BAA2BI,KAAK,MACpCzoB,OAAI,KAAwB;MAEnC;MAEAgpB,iBAAiBhV,IAAkB;AACjC,cAAM;UAAE5N;QAAM,IAAG4N;AACjB,cAAMiV,gBAAgB,KAAK1B,WAAW,CAAC;AACvC,YAAI,CAAC0B,cAAc9B,MAAMX,IAAIpgB,IAAI,GAAG;AAClC,eAAKohB,iBAAiB5Y,IAAIxI,MAAM4N,GAAG9F,IAAIvQ,KAAK;QAC9C;MACF;MAEA+pB,eAAuB;AACrB,eAAO,KAAKH,WAAW,KAAKA,WAAWlQ,SAAS,CAAC;MACnD;MAEAuQ,uBAAkC;AAChC,iBAASlC,IAAI,KAAK6B,WAAWlQ,SAAS,KAAKqO,KAAK;AAC9C,gBAAM;YAAEnV;UAAM,IAAI,KAAKgX,WAAW7B,CAAC;AACnC,cAAInV,QAAK,KAAkB;AACzB,mBAAOA;UACT;QACF;MACF;MAGAuX,wBAAmC;AACjC,iBAASpC,IAAI,KAAK6B,WAAWlQ,SAAS,KAAKqO,KAAK;AAC9C,gBAAM;YAAEnV;UAAM,IAAI,KAAKgX,WAAW7B,CAAC;AACnC,cACEnV,SAAS2X,MAAAA,OACT,EAAE3X,QAAK,IACP;AACA,mBAAOA;UACT;QACF;MACF;IACF;AC5NA,QAAM2Y,YAAN,cAAwBhC,MAAM;MAAA7pB,eAAAwX,MAAA;AAAA,cAAA,GAAAA,IAAA;AAAA,aAE5BsU,mBAAgC,oBAAInd,IAAG;MAAE;IAC3C;AAEe,QAAMod,mBAAN,cAA+B/B,aAAwB;MACpEiB,YAAY/X,OAA6B;AACvC,eAAO,IAAI2Y,UAAU3Y,KAAK;MAC5B;MAEAmY,YAAYtiB,MAAcuiB,aAA0Bza,KAAe;AACjE,cAAMua,QAAQ,KAAKf,aAAY;AAC/B,YAAIiB,cAAW,MAAqC;AAClD,eAAKC,0BAA0BH,OAAOriB,MAAMuiB,aAAaza,GAAG;AAC5D,eAAK2a,mBAAmBJ,OAAOriB,IAAI;AACnCqiB,gBAAMU,iBAAiBE,IAAIjjB,IAAI;AAC/B;QACF;AAEA,cAAMsiB,YAAYtiB,MAAMuiB,aAAaza,GAAG;MAC1C;MAEA6a,oBACEN,OACAriB,MACAuiB,aACS;AACT,YAAI,MAAMI,oBAAoBN,OAAOriB,MAAMuiB,WAAW,EAAG,QAAO;AAEhE,YACEA,cAAW,QACX,CAACF,MAAMU,iBAAiB3C,IAAIpgB,IAAI,GAChC;AACA,gBAAMpG,OAAOyoB,MAAMtB,MAAMxY,IAAIvI,IAAI;AACjC,kBAAQpG,OAAI,KAAwB,MAAMA,OAAI,KAAuB;QACvE;AAEA,eAAO;MACT;MAEAgpB,iBAAiBhV,IAAkB;AACjC,YAAI,CAAC,KAAKuT,WAAW,CAAC,EAAE4B,iBAAiB3C,IAAIxS,GAAG5N,IAAI,GAAG;AACrD,gBAAM4iB,iBAAiBhV,EAAE;QAC3B;MACF;IACF;ACrCe,QAAMsV,aAAN,MAAiB;MAAAjsB,cAAA;AAAA,aAa9BksB,oBAA6B;AAAK,aAClCC,8BAAuC;MAAK;MAe5C9S,UAAU+S,cAAqC;AAC7C,YAAI,OAAOA,iBAAiB,UAAU;AACpC,iBAAO,KAAKC,QAAQlD,IAAIiD,YAAY;QACtC,OAAO;AACL,gBAAM,CAACE,YAAYC,aAAa,IAAIH;AACpC,cAAI,CAAC,KAAK/S,UAAUiT,UAAU,GAAG;AAC/B,mBAAO;UACT;AACA,gBAAME,gBAAgB,KAAKH,QAAQ/a,IAAIgb,UAAU;AACjD,qBAAW7iB,OAAOoG,OAAOkC,KACvBwa,aACF,GAAqC;AACnC,iBAAIC,iBAAAA,OAAAA,SAAAA,cAAgB/iB,GAAG,OAAM8iB,cAAc9iB,GAAG,GAAG;AAC/C,qBAAO;YACT;UACF;AACA,iBAAO;QACT;MACF;MAEA+M,gBAGEiW,QAAoB1jB,MAAkB;AAAA,YAAA2jB;AACtC,gBAAAA,oBAAQ,KAAKL,QAAQ/a,IAAImb,MAAM,MAAC,OAAA,SAAzBC,kBACL3jB,IAAI;MAER;IACF;AC7BA,aAAS4jB,oBAAoBjqB,MAAoBkqB,UAA0B;AACzE,UAAIlqB,KAAKmqB,qBAAqBC,QAAW;AACvCpqB,aAAKmqB,mBAAmBD;MAC1B,OAAO;AACLlqB,aAAKmqB,iBAAiBE,QAAQ,GAAGH,QAAQ;MAC3C;IACF;AAOA,aAASI,mBAAmBtqB,MAAoBkqB,UAA0B;AACxE,UAAIlqB,KAAKuqB,oBAAoBH,QAAW;AACtCpqB,aAAKuqB,kBAAkBL;MACzB,OAAO;AACLlqB,aAAKuqB,gBAAgBF,QAAQ,GAAGH,QAAQ;MAC1C;IACF;AAOO,aAASM,iBACdxqB,MACAkqB,UACA;AACA,UAAIlqB,KAAKyqB,kBAAkBL,QAAW;AACpCpqB,aAAKyqB,gBAAgBP;MACvB,OAAO;AACLlqB,aAAKyqB,cAAcJ,QAAQ,GAAGH,QAAQ;MACxC;IACF;AAOA,aAASQ,oBACP1qB,MACA2qB,UACAC,WACA;AACA,UAAIC,cAAc;AAClB,UAAIlF,IAAIgF,SAASrT;AACjB,aAAOuT,gBAAgB,QAAQlF,IAAI,GAAG;AACpCkF,sBAAcF,SAAS,EAAEhF,CAAC;MAC5B;AACA,UAAIkF,gBAAgB,QAAQA,YAAYjtB,QAAQgtB,UAAUhtB,OAAO;AAC/D4sB,yBAAiBxqB,MAAM4qB,UAAUV,QAAQ;MAC3C,OAAO;AACLD,4BAAoBY,aAAaD,UAAUV,QAAQ;MACrD;IACF;AAEe,QAAMY,iBAAN,cAA6BvB,WAAW;MACrDwB,WAAWC,SAAwB;AACjC,YAAI,KAAKltB,SAAUktB,SAAQ7c,IAAIrQ,WAAW,KAAKA;AAC/C,cAAM;UAAEmtB;YAAgB,KAAK/T;AAC7B,YAAI,KAAKgT,SAAS5S,WAAW2T,aAAa;AACxC,eAAKf,SAAS5S,SAAS2T;QACzB;AACA,aAAKf,SAAStW,KAAKoX,OAAO;AAC1B,aAAK9T,MAAM+T;MACb;MAMAC,eAAelrB,MAAkB;AAC/B,cAAM;UAAEmrB;YAAiB,KAAKjU;AAC9B,cAAMkU,qBAAqBD,aAAa7T;AACxC,YAAI8T,uBAAuB,EAAG;AAC9B,YAAIzF,IAAIyF,qBAAqB;AAC7B,cAAMC,gBAAgBF,aAAaxF,CAAC;AAEpC,YAAI0F,cAAcztB,UAAUoC,KAAKnC,KAAK;AACpCwtB,wBAAcC,cAActrB;AAC5B2lB;QACF;AAEA,cAAM;UAAE/nB,OAAO2tB;QAAW,IAAGvrB;AAE7B,eAAO2lB,KAAK,GAAGA,KAAK;AAClB,gBAAMiF,YAAYO,aAAaxF,CAAC;AAChC,gBAAM6F,aAAaZ,UAAU/sB;AAC7B,cAAI2tB,aAAaD,WAAW;AAO1BX,sBAAUa,iBAAiBzrB;AAC3B,iBAAK0rB,gBAAgBd,SAAS;AAC9BO,yBAAaQ,OAAOhG,GAAG,CAAC;UAC1B,OAAO;AACL,gBAAI6F,eAAeD,WAAW;AAC5BX,wBAAUgB,eAAe5rB;YAC3B;AAEA;UACF;QACF;MACF;MAMA0rB,gBAAgBd,WAA8B;AAC5C,cAAM;UAAEV;QAAU,IAAGU;AACrB,YAAIA,UAAUU,gBAAgB,QAAQV,UAAUgB,iBAAiB,MAAM;AACrE,cAAIhB,UAAUU,gBAAgB,MAAM;AAClCrB,gCAAoBW,UAAUU,aAAapB,QAAQ;UACrD;AACA,cAAIU,UAAUgB,iBAAiB,MAAM;AACnCtB,+BAAmBM,UAAUgB,cAAc1B,QAAQ;UACrD;QACF,OAAO;AAEL,gBAAM;YAAEuB,gBAAgBzrB;YAAMpC,OAAOiuB;UAAc,IAAGjB;AACtD,cAAI,KAAKkB,MAAMC,WAAWF,eAAe,CAAC,MAAC,IAAsB;AAI/D,oBAAQ7rB,KAAKC,MAAI;cACf,KAAK;cACL,KAAK;cACL,KAAK;AACHyqB,oCAAoB1qB,MAAMA,KAAKgsB,YAAYpB,SAAS;AACpD;cACF,KAAK;cACL,KAAK;AACHF,oCAAoB1qB,MAAMA,KAAK0W,WAAWkU,SAAS;AACnD;cACF,KAAK;cACL,KAAK;cACL,KAAK;cACL,KAAK;cACL,KAAK;cACL,KAAK;AACHF,oCAAoB1qB,MAAMA,KAAKwS,QAAQoY,SAAS;AAChD;cACF,KAAK;cACL,KAAK;cACL,KAAK;AACHF,oCAAoB1qB,MAAMA,KAAK2qB,UAAUC,SAAS;AAClD;cACF,KAAK;cACL,KAAK;AACHF,oCAAoB1qB,MAAMA,KAAKqX,YAAYuT,SAAS;AACpD;cACF,SAAS;AACPJ,iCAAiBxqB,MAAMkqB,QAAQ;cACjC;YACF;UACF,OAAO;AACLM,6BAAiBxqB,MAAMkqB,QAAQ;UACjC;QACF;MACF;MAQA+B,4BAA4B;AAC1B,cAAM;UAAEd;YAAiB,KAAKjU;AAC9B,iBAASyO,IAAIwF,aAAa7T,SAAS,GAAGqO,KAAK,GAAGA,KAAK;AACjD,eAAK+F,gBAAgBP,aAAaxF,CAAC,CAAC;QACtC;AACA,aAAKzO,MAAMiU,eAAe,CAAA;MAC5B;MAqBAe,kCAAkClsB,MAAY;AAC5C,cAAM;UAAEmrB;YAAiB,KAAKjU;AAC9B,cAAM;UAAEI;QAAQ,IAAG6T;AACnB,YAAI7T,WAAW,EAAG;AAClB,cAAMsT,YAAYO,aAAa7T,SAAS,CAAC;AACzC,YAAIsT,UAAUU,gBAAgBtrB,MAAM;AAClC4qB,oBAAUU,cAAc;QAC1B;MACF;MAsBAa,uCAAuCnsB,MAAkB;AACvD,cAAM;UAAEmrB;YAAiB,KAAKjU;AAC9B,cAAM;UAAEI;QAAQ,IAAG6T;AACnB,YAAI7T,WAAW,EAAG;AAElB,YAAI6T,aAAa7T,SAAS,CAAC,EAAEsU,iBAAiB5rB,MAAM;AAClDmrB,uBAAa7T,SAAS,CAAC,EAAEsU,eAAe;QAC1C,WAAWtU,UAAU,KAAK6T,aAAa7T,SAAS,CAAC,EAAEsU,iBAAiB5rB,MAAM;AACxEmrB,uBAAa7T,SAAS,CAAC,EAAEsU,eAAe;QAC1C;MACF;MASAQ,wBAAwBpsB,MAAYpC,OAAeC,KAAa;AAC9D,cAAM;UAAEstB;YAAiB,KAAKjU;AAC9B,cAAMkU,qBAAqBD,aAAa7T;AACxC,YAAI8T,uBAAuB,EAAG;AAC9B,YAAIzF,IAAIyF,qBAAqB;AAE7B,eAAOzF,KAAK,GAAGA,KAAK;AAClB,gBAAMiF,YAAYO,aAAaxF,CAAC;AAChC,gBAAM6F,aAAaZ,UAAU/sB;AAC7B,gBAAMguB,eAAejB,UAAUhtB;AAE/B,cAAIiuB,iBAAiBhuB,KAAK;AACxB+sB,sBAAUU,cAActrB;UAC1B,WAAWwrB,eAAe5tB,OAAO;AAC/BgtB,sBAAUgB,eAAe5rB;UAC3B,WAAWwrB,aAAa5tB,OAAO;AAC7B;UACF;QACF;MACF;IACF;ACpTO,QAAMyuB,YAAY;AAClB,QAAMC,aAAa,IAAI5b,OAAO2b,UAAU5V,QAAQ,GAAG;AAGnD,aAAS8V,UAAUpuB,OAAuB;AAC/C,cAAQA,OAAI;QACV,KAAA;QACA,KAAA;QACA,KAAA;QACA,KAAA;AACE,iBAAO;QAET;AACE,iBAAO;MACX;IACF;AAEO,aAASquB,WAAWV,OAAeluB,OAAeC,KAAsB;AAC7E,eAAS8nB,IAAI/nB,OAAO+nB,IAAI9nB,KAAK8nB,KAAK;AAChC,YAAI4G,UAAUT,MAAMC,WAAWpG,CAAC,CAAC,GAAG;AAClC,iBAAO;QACT;MACF;AACA,aAAO;IACT;AAEO,QAAM8G,iBAAiB;AAEvB,QAAMC,uBACX;AAGK,aAASC,aAAaxuB,OAAuB;AAClD,cAAQA,OAAI;QACV,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAA;QACA,KAAA;QACA,KAAA;QACA,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;AACH,iBAAO;QAET;AACE,iBAAO;MACX;IACF;AChCe,QAAMyuB,QAAN,MAAMA,OAAM;MAAAtvB,cAAA;AAAA,aACZkT,QAAK;AAAA,aAIlBqc,UAAO;AAAA,aACPC,YAAS;AAAA,aAITvX,WAAQ;AAAA,aACR+C,SAAM;AAAA,aAeNyU,SAA4B,CAAA;AAAE,aAG9BC,mBAA2B;AAAE,aAM7BC,YAAsB,CAAA;AAAE,aAQxBC,4BAAsC,CAAA;AAAE,aAYxCC,eAAkC;UAChCC,0BAA0B;UAC1BC,eAAe;;AAChB,aAODC,SAIK,CAAA;AAAE,aAEPrC,cAAc;AAAC,aAEfE,eAAyC,CAAA;AAAE,aAG3C5c,MAAc;AAAC,aAIftO,OAAI;AAAA,aAGJiN,QAAa;AAAI,aAGjBtP,QAAgB;AAAC,aACjBC,MAAc;AAAC,aAIf2a,gBAA0B;AAAI,aAE9BrB,kBAA4B;AAAI,aAIhC8N,UAA6B,CAACsI,MAAG3U,KAAK;AAAC,aAYvC4U,gCAAiD;AAAI,aAYrDC,eAA6D,oBAAI7T,IAAG;AAAE,aAGtE8T,eAAuB;MAAC;MAAA,IAzHVzH,SAAM;AAAA,gBAAA,KAFPzV,QAAK,KAAA;MAAA;MAAA,IAEJyV,OAAM0H,GAAA;AAAA,YAAAA,EAAA,MAFPnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAYlBod,KAAK;QAAEC;QAAYC;QAAYC;QAAWC;MAAqB,GAAS;AACtE,aAAK/H,SACH4H,eAAe,QACX,QACAA,eAAe,OACb,OACAC,eAAe;AAEvB,aAAKjB,UAAUkB;AACf,aAAKjB,YAAY,CAACkB;AAClB,aAAKzY,WAAW,KAAK+C,SAAS,IAAIjb,SAAS0wB,WAAWC,aAAa,CAAC;MACtE;MAAC,IAsBaC,yBAAsB;AAAA,gBAAA,KA7CvBzd,QAAK,KAAA;MAAA;MAAA,IA6CJyd,uBAAsBN,GAAA;AAAA,YAAAA,EAAA,MA7CvBnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IA8CJ0d,SAAM;AAAA,gBAAA,KA9CP1d,QAAK,KAAA;MAAA;MAAA,IA8CJ0d,OAAMP,GAAA;AAAA,YAAAA,EAAA,MA9CPnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IA+CJ2d,qBAAkB;AAAA,gBAAA,KA/CnB3d,QAAK,KAAA;MAAA;MAAA,IA+CJ2d,mBAAkBR,GAAA;AAAA,YAAAA,EAAA,MA/CnBnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IAgDJ4d,iBAAc;AAAA,gBAAA,KAhDf5d,QAAK,MAAA;MAAA;MAAA,IAgDJ4d,eAAcT,GAAA;AAAA,YAAAA,EAAA,MAhDfnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IAiDJ6d,mBAAgB;AAAA,gBAAA,KAjDjB7d,QAAK,MAAA;MAAA;MAAA,IAiDJ6d,iBAAgBV,GAAA;AAAA,YAAAA,EAAA,MAjDjBnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IAkDJ8d,kBAAe;AAAA,gBAAA,KAlDhB9d,QAAK,MAAA;MAAA;MAAA,IAkDJ8d,gBAAeX,GAAA;AAAA,YAAAA,EAAA,MAlDhBnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IAmDJ+d,oCAAiC;AAAA,gBAAA,KAnDlC/d,QAAK,OAAA;MAAA;MAAA,IAmDJ+d,kCAAiCZ,GAAA;AAAA,YAAAA,EAAA,MAnDlCnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IA4DJge,YAAS;AAAA,gBAAA,KA5DVhe,QAAK,OAAA;MAAA;MAAA,IA4DJge,UAASb,GAAA;AAAA,YAAAA,EAAA,MA5DVnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IA6DJie,6BAA0B;AAAA,gBAAA,KA7D3Bje,QAAK,OAAA;MAAA;MAAA,IA6DJie,2BAA0Bd,GAAA;AAAA,YAAAA,EAAA,MA7D3Bnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IAmGJke,qBAAkB;AAAA,gBAAA,KAnGnBle,QAAK,QAAA;MAAA;MAAA,IAmGJke,mBAAkBf,GAAA;AAAA,YAAAA,EAAA,MAnGnBnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IAwGJme,cAAW;AAAA,gBAAA,KAxGZne,QAAK,QAAA;MAAA;MAAA,IAwGJme,YAAWhB,GAAA;AAAA,YAAAA,EAAA,MAxGZnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAAA,IA8GJoe,mBAAgB;AAAA,gBAAA,KA9GjBpe,QAAK,QAAA;MAAA;MAAA,IA8GJoe,iBAAgBjB,GAAA;AAAA,YAAAA,EAAA,MA9GjBnd,SAAK;YAAA,MAALA,SAAK;MAAA;MAkIlBqe,cAAwB;AACtB,eAAO,IAAIxxB,SAAS,KAAKwvB,SAAS,KAAKte,MAAM,KAAKue,WAAW,KAAKve,GAAG;MACvE;MAEAC,QAAe;AACb,cAAM0I,QAAQ,IAAI0V,OAAK;AACvB1V,cAAM1G,QAAQ,KAAKA;AACnB0G,cAAM2V,UAAU,KAAKA;AACrB3V,cAAM4V,YAAY,KAAKA;AACvB5V,cAAM3B,WAAW,KAAKA;AACtB2B,cAAMoB,SAAS,KAAKA;AACpBpB,cAAM6V,SAAS,KAAKA,OAAO+B,MAAK;AAChC5X,cAAM8V,mBAAmB,KAAKA;AAC9B9V,cAAM+V,YAAY,KAAKA,UAAU6B,MAAK;AACtC5X,cAAMgW,4BAA4B,KAAKA,0BAA0B4B,MAAK;AACtE5X,cAAMiW,eAAe,KAAKA;AAC1BjW,cAAMoW,SAAS,KAAKA,OAAOwB,MAAK;AAChC5X,cAAM+T,cAAc,KAAKA;AACzB/T,cAAMiU,eAAe,KAAKA,aAAa2D,MAAK;AAC5C5X,cAAM3I,MAAM,KAAKA;AACjB2I,cAAMjX,OAAO,KAAKA;AAClBiX,cAAMhK,QAAQ,KAAKA;AACnBgK,cAAMtZ,QAAQ,KAAKA;AACnBsZ,cAAMrZ,MAAM,KAAKA;AACjBqZ,cAAMsB,gBAAgB,KAAKA;AAC3BtB,cAAMC,kBAAkB,KAAKA;AAC7BD,cAAM+N,UAAU,KAAKA,QAAQ6J,MAAK;AAClC5X,cAAMsW,gCAAgC,KAAKA;AAC3CtW,cAAMuW,eAAe,KAAKA;AAC1BvW,cAAMwW,eAAe,KAAKA;AAE1B,eAAOxW;MACT;IACF;mBCpMA,SAAS6X,QAAQ5wB,OAAM;AACrB,aAAOA,SAAI,MAAcA,SAAc;IACzC;AAIA,QAAM6wB,oCAAoC;MACxCC,WAAW,oBAAIhjB,IAAY,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,GAAA,CAS1B;MACDijB,KAAK,oBAAIjjB,IAAY,CAKpB,IAAA,IAAA,IAAA,GAAA,CAAA;IACH;AAEA,QAAMkjB,mCAAmC;MAEvCC,KAAMC,QAAeA,OAAuB,MAAIA,OAAuB;MAGvEC,KAAMD,QAAeA,MAAsB,MAAIA,MAAsB;MAGrEE,KAAMF,QAAeA,MAAsB,MAAIA,MAAsB;MAGrEH,KAAMG,QACHA,MAAsB,MAAIA,MAAsB,MAChDA,MAAE,MAA4BA,MAAE,MAChCA,MAAE,MAA4BA,MAAE;IACrC;AAUO,aAASG,mBACdvvB,MACA6rB,OACAvd,KACAue,WACAD,SACAE,QACA;AACA,YAAM0C,aAAalhB;AACnB,YAAMmhB,mBAAmB5C;AACzB,YAAM6C,iBAAiB9C;AAEvB,UAAI+C,MAAM;AACV,UAAIC,kBAAkB;AACtB,UAAIC,aAAavhB;AACjB,YAAM;QAAE+I;MAAQ,IAAGwU;AACnB,iBAAS;AACP,YAAIvd,OAAO+I,QAAQ;AACjByV,iBAAOgD,aAAaN,YAAYC,kBAAkBC,cAAc;AAChEC,iBAAO9D,MAAMgD,MAAMgB,YAAYvhB,GAAG;AAClC;QACF;AACA,cAAM8gB,KAAKvD,MAAMC,WAAWxd,GAAG;AAC/B,YAAIyhB,YAAY/vB,MAAMovB,IAAIvD,OAAOvd,GAAG,GAAG;AACrCqhB,iBAAO9D,MAAMgD,MAAMgB,YAAYvhB,GAAG;AAClC;QACF;AACA,YAAI8gB,OAAE,IAA0B;AAC9BO,iBAAO9D,MAAMgD,MAAMgB,YAAYvhB,GAAG;AAClC,gBAAM0hB,MAAMC,gBACVpE,OACAvd,KACAue,WACAD,SACA5sB,SAAS,YACT8sB,MACF;AACA,cAAIkD,IAAIZ,OAAO,QAAQ,CAACQ,iBAAiB;AACvCA,8BAAkB;cAAEthB;cAAKue;cAAWD;;UACtC,OAAO;AACL+C,mBAAOK,IAAIZ;UACb;AACA,WAAC;YAAE9gB;YAAKue;YAAWD;UAAS,IAAGoD;AAC/BH,uBAAavhB;QACd,WACC8gB,OAAE,QACFA,OAAE,MACF;AACA,YAAE9gB;AACF,YAAEse;AACFC,sBAAYve;QACb,WAAU8gB,OAAE,MAA2BA,OAAE,IAA+B;AACvE,cAAIpvB,SAAS,YAAY;AACvB2vB,mBAAO9D,MAAMgD,MAAMgB,YAAYvhB,GAAG,IAAI;AACtC,cAAEA;AACF,gBACE8gB,OAA+B,MAC/BvD,MAAMC,WAAWxd,GAAG,MAAC,IACrB;AACA,gBAAEA;YACJ;AACA,cAAEse;AACFiD,yBAAahD,YAAYve;UAC3B,OAAO;AACLwe,mBAAOgD,aAAaN,YAAYC,kBAAkBC,cAAc;UAClE;QACF,OAAO;AACL,YAAEphB;QACJ;MACF;AACA,aAEI;QACEA;QACA4hB,KAAKP;QACLC;QACA/C;QACAD;QACAuD,iBAAiB,CAAC,CAACP;;IAE3B;AAEA,aAASG,YACP/vB,MACAovB,IACAvD,OACAvd,KACA;AACA,UAAItO,SAAS,YAAY;AACvB,eACEovB,OAAE,MACDA,OAAE,MACDvD,MAAMC,WAAWxd,MAAM,CAAC,MAA+B;MAE7D;AACA,aACE8gB,QAAQpvB,SAAS,WAAQ,KAAA;IAE7B;AAOA,aAASiwB,gBACPpE,OACAvd,KACAue,WACAD,SACAwD,YACAtD,QACA;AACA,YAAMuD,iBAAiB,CAACD;AACxB9hB;AAEA,YAAM0hB,MAAOZ,CAAAA,SAAuB;QAAE9gB;QAAK8gB,IAAAA;QAAIvC;QAAWD;MAAQ;AAElE,YAAMwC,KAAKvD,MAAMC,WAAWxd,KAAK;AACjC,cAAQ8gB,IAAE;QACR,KAAA;AACE,iBAAOY,IAAI,IAAI;QACjB,KAAA;AACE,iBAAOA,IAAI,IAAI;QACjB,KAAA,KAA2B;AACzB,cAAI9xB;AACJ,WAAC;YAAEA,MAAAA;YAAMoQ;UAAI,IAAIgiB,YACfzE,OACAvd,KACAue,WACAD,SACA,GACA,OACAyD,gBACAvD,MACF;AACA,iBAAOkD,IAAI9xB,UAAS,OAAO,OAAO+S,OAAO4U,aAAa3nB,KAAI,CAAC;QAC7D;QACA,KAAA,KAA2B;AACzB,cAAIA;AACJ,WAAC;YAAEA,MAAAA;YAAMoQ;UAAI,IAAIiiB,cACf1E,OACAvd,KACAue,WACAD,SACAyD,gBACAvD,MACF;AACA,iBAAOkD,IAAI9xB,UAAS,OAAO,OAAO+S,OAAOuf,cAActyB,KAAI,CAAC;QAC9D;QACA,KAAA;AACE,iBAAO8xB,IAAI,GAAI;QACjB,KAAA;AACE,iBAAOA,IAAI,IAAI;QACjB,KAAA;AACE,iBAAOA,IAAI,IAAQ;QACrB,KAAA;AACE,iBAAOA,IAAI,IAAI;QACjB,KAAA;AACE,cAAInE,MAAMC,WAAWxd,GAAG,MAAC,IAAyB;AAChD,cAAEA;UACJ;QAEF,KAAA;AACEue,sBAAYve;AACZ,YAAEse;QAEJ,KAAA;QACA,KAAA;AACE,iBAAOoD,IAAI,EAAE;QACf,KAAA;QACA,KAAA;AACE,cAAII,YAAY;AACd,mBAAOJ,IAAI,IAAI;UACjB,OAAO;AACLlD,mBAAO2D,oBAAoBniB,MAAM,GAAGue,WAAWD,OAAO;UACxD;QAEF;AACE,cAAIwC,MAAE,MAAwBA,MAAE,IAAsB;AACpD,kBAAMsB,WAAWpiB,MAAM;AACvB,kBAAMqiB,QAAQ,UAAUC,KAAK/E,MAAMgD,MAAM6B,UAAUpiB,MAAM,CAAC,CAAC;AAE3D,gBAAIuiB,WAAWF,MAAM,CAAC;AAEtB,gBAAIG,QAAQC,SAASF,UAAU,CAAC;AAChC,gBAAIC,QAAQ,KAAK;AACfD,yBAAWA,SAAShC,MAAM,GAAG,EAAE;AAC/BiC,sBAAQC,SAASF,UAAU,CAAC;YAC9B;AACAviB,mBAAOuiB,SAASxZ,SAAS;AACzB,kBAAMyP,OAAO+E,MAAMC,WAAWxd,GAAG;AACjC,gBACEuiB,aAAa,OACb/J,SAAyB,MACzBA,SAAI,IACJ;AACA,kBAAIsJ,YAAY;AACd,uBAAOJ,IAAI,IAAI;cACjB,OAAO;AACLlD,uBAAO2D,oBAAoBC,UAAU7D,WAAWD,OAAO;cACzD;YACF;AAEA,mBAAOoD,IAAI/e,OAAO4U,aAAaiL,KAAK,CAAC;UACvC;AAEA,iBAAOd,IAAI/e,OAAO4U,aAAauJ,EAAE,CAAC;MACtC;IACF;AAOA,aAASkB,YACPzE,OACAvd,KACAue,WACAD,SACAoE,KACAC,UACAZ,gBACAvD,QACA;AACA,YAAM0C,aAAalhB;AACnB,UAAI4iB;AACJ,OAAC;QAAEA;QAAG5iB;MAAK,IAAG6iB,QACZtF,OACAvd,KACAue,WACAD,SACA,IACAoE,KACAC,UACA,OACAnE,QACkB,CAACuD,cACrB;AACA,UAAIa,MAAM,MAAM;AACd,YAAIb,gBAAgB;AAClBvD,iBAAOsE,sBAAsB5B,YAAY3C,WAAWD,OAAO;QAC7D,OAAO;AACLte,gBAAMkhB,aAAa;QACrB;MACF;AACA,aAAO;QAAEtxB,MAAMgzB;QAAG5iB;;IACpB;AAuBO,aAAS6iB,QACdtF,OACAvd,KACAue,WACAD,SACAtoB,OACA0sB,KACAC,UACAI,mBACAvE,QACAwE,aACA;AACA,YAAM3zB,QAAQ2Q;AACd,YAAMijB,oBACJjtB,UAAU,KACNyqB,kCAAkCE,MAClCF,kCAAkCC;AACxC,YAAMwC,mBACJltB,UAAU,KACN4qB,iCAAiCD,MACjC3qB,UAAU,KACR4qB,iCAAiCI,MACjChrB,UAAU,IACR4qB,iCAAiCG,MACjCH,iCAAiCC;AAE3C,UAAIsC,UAAU;AACd,UAAIC,QAAQ;AAEZ,eAAShM,IAAI,GAAGiM,IAAIX,OAAO,OAAOY,WAAWZ,KAAKtL,IAAIiM,GAAG,EAAEjM,GAAG;AAC5D,cAAMxnB,QAAO2tB,MAAMC,WAAWxd,GAAG;AACjC,YAAIujB;AAEJ,YAAI3zB,UAA6B,MAAImzB,sBAAsB,QAAQ;AACjE,gBAAMS,OAAOjG,MAAMC,WAAWxd,MAAM,CAAC;AACrC,gBAAMwY,OAAO+E,MAAMC,WAAWxd,MAAM,CAAC;AAErC,cAAI,CAAC+iB,mBAAmB;AACtB,gBAAIC,YAAa,QAAO;cAAEJ,GAAG;cAAM5iB;;AACnCwe,mBAAOiF,iCAAiCzjB,KAAKue,WAAWD,OAAO;UACjE,WACEoF,OAAOC,MAAMnL,IAAI,KACjB,CAAC0K,iBAAiB1K,IAAI,KACtByK,kBAAkB/K,IAAIsL,IAAI,KAC1BP,kBAAkB/K,IAAIM,IAAI,GAC1B;AACA,gBAAIwK,YAAa,QAAO;cAAEJ,GAAG;cAAM5iB;;AACnCwe,mBAAOoF,2BAA2B5jB,KAAKue,WAAWD,OAAO;UAC3D;AAGA,YAAEte;AACF;QACF;AAEA,YAAIpQ,SAAI,IAA0B;AAChC2zB,gBAAM3zB,QAAI,KAA4C;QACxD,WAAWA,SAAI,IAA0B;AACvC2zB,gBAAM3zB,QAAI,KAA4C;QACxD,WAAWi0B,SAAkBj0B,KAAI,GAAG;AAClC2zB,gBAAM3zB,QAAuB;QAC/B,OAAO;AACL2zB,gBAAMD;QACR;AACA,YAAIC,OAAOvtB,OAAO;AAGhB,cAAIutB,OAAO,KAAKP,aAAa;AAC3B,mBAAO;cAAEJ,GAAG;cAAM5iB;;UACpB,WACEujB,OAAO,KACP/E,OAAOsF,aAAa9jB,KAAKue,WAAWD,SAAStoB,KAAK,GAClD;AACAutB,kBAAM;UACP,WAAUZ,UAAU;AACnBY,kBAAM;AACNJ,sBAAU;UACZ,OAAO;AACL;UACF;QACF;AACA,UAAEnjB;AACFojB,gBAAQA,QAAQptB,QAAQutB;MAC1B;AACA,UAAIvjB,QAAQ3Q,SAAUqzB,OAAO,QAAQ1iB,MAAM3Q,UAAUqzB,OAAQS,SAAS;AACpE,eAAO;UAAEP,GAAG;UAAM5iB;;MACpB;AAEA,aAAO;QAAE4iB,GAAGQ;QAAOpjB;;IACrB;AAMO,aAASiiB,cACd1E,OACAvd,KACAue,WACAD,SACAyD,gBACAvD,QACA;AACA,YAAMsC,KAAKvD,MAAMC,WAAWxd,GAAG;AAC/B,UAAIpQ;AAEJ,UAAIkxB,OAAE,KAA+B;AACnC,UAAE9gB;AACF,SAAC;UAAEpQ,MAAAA;UAAMoQ;YAAQgiB,YACfzE,OACAvd,KACAue,WACAD,SACAf,MAAMwG,QAAQ,KAAK/jB,GAAG,IAAIA,KAC1B,MACA+hB,gBACAvD,MACF;AACA,UAAExe;AACF,YAAIpQ,UAAS,QAAQA,QAAO,SAAU;AACpC,cAAImyB,gBAAgB;AAClBvD,mBAAOwF,iBAAiBhkB,KAAKue,WAAWD,OAAO;UACjD,OAAO;AACL,mBAAO;cAAE1uB,MAAM;cAAMoQ;;UACvB;QACF;MACF,OAAO;AACL,SAAC;UAAEpQ,MAAAA;UAAMoQ;QAAI,IAAIgiB,YACfzE,OACAvd,KACAue,WACAD,SACA,GACA,OACAyD,gBACAvD,MACF;MACF;AACA,aAAO;QAAE5uB,MAAAA;QAAMoQ;;IACjB;AC5ZA,aAASikB,cAAcjkB,KAAaue,WAAmBD,SAAiB;AACtE,aAAO,IAAIxvB,SAASwvB,SAASte,MAAMue,WAAWve,GAAG;IACnD;AAEA,QAAMkkB,oBAAoB,oBAAIxmB,IAAI,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,GAAA,CASjC;AAMM,QAAMymB,QAAN,MAAY;MACjBp1B,YAAY4Z,OAAc;AACxB,aAAKjX,OAAOiX,MAAMjX;AAClB,aAAKiN,QAAQgK,MAAMhK;AACnB,aAAKtP,QAAQsZ,MAAMtZ;AACnB,aAAKC,MAAMqZ,MAAMrZ;AACjB,aAAKsQ,MAAM,IAAIxQ,eAAeuZ,MAAM3B,UAAU2B,MAAMoB,MAAM;MAC5D;IAOF;AAIe,QAAeqa,YAAf,cAAiC7H,eAAe;MAM7DxtB,YAAY8S,SAAkB0b,OAAe;AAC3C,cAAK;AAAG,aANV8G,cAAW;AAAA,aAGXviB,SAAmC,CAAA;AAAE,aA28CrCwiB,wBAA0C;UACxCR,cAAcA,CAAC9jB,KAAKue,WAAWD,SAAStoB,UAAU;AAChD,gBAAI,CAAC,KAAK6L,QAAQ0iB,cAAe,QAAO;AAExC,iBAAK1c,MAAMzG,OAAOrL,cAAckuB,cAAcjkB,KAAKue,WAAWD,OAAO,GAAG;cACtEtoB;YACF,CAAC;AAED,mBAAO;UACR;UACDytB,kCAAkC,KAAKe,aACrCpjB,OAAOnI,gCACT;UACA2qB,4BAA4B,KAAKY,aAC/BpjB,OAAOjG,0BACT;;AACD,aAEDspB,8BAA2B7lB,OAAAwB,OACtB,CAAA,GAAA,KAAKkkB,uBAAqB;UAC7BxB,uBAAuB,KAAK0B,aAAapjB,OAAOnL,qBAAqB;UACrE+tB,kBAAkB,KAAKQ,aAAapjB,OAAOxL,gBAAgB;QAAC,CAAA;AAAA,aAG9D8uB,0CAAuC9lB,OAAAwB,OAClC,CAAA,GAAA,KAAKqkB,6BAA2B;UACnCtC,qBAAqBA,CAACniB,KAAKue,WAAWD,YAAY;AAChD,iBAAKqG,uBACHvjB,OAAO9D,qBACP2mB,cAAcjkB,KAAKue,WAAWD,OAAO,CACvC;UACD;UACDkD,cAAcA,CAACxhB,KAAKue,WAAWD,YAAY;AACzC,kBAAM,KAAKzW,MACTzG,OAAO7E,oBACP0nB,cAAcjkB,MAAM,GAAGue,WAAWD,OAAO,CAC3C;UACF;QAAC,CAAA;AAAA,aAGHsG,4CAAyChmB,OAAAwB,OACpC,CAAA,GAAA,KAAKqkB,6BAA2B;UACnCtC,qBAAqB,KAAKqC,aAAapjB,OAAO9D,mBAAmB;UACjEkkB,cAAcA,CAACxhB,KAAKue,WAAWD,YAAY;AACzC,kBAAM,KAAKzW,MACTzG,OAAO5E,sBACPynB,cAAcjkB,KAAKue,WAAWD,OAAO,CACvC;UACF;QAAC,CAAA;AAv/CD,aAAK3V,QAAQ,IAAI0V,MAAK;AACtB,aAAK1V,MAAM0W,KAAKxd,OAAO;AACvB,aAAK0b,QAAQA;AACb,aAAKxU,SAASwU,MAAMxU;AACpB,aAAK4S,WAAW,CAAA;AAChB,aAAK0I,cAAc;MACrB;MAEAQ,UAAU7mB,OAA0B;AAGlC,aAAK8D,OAAOiH,SAAS,KAAKJ,MAAMwW;AAChC,aAAKrd,OAAOuD,KAAKrH,KAAK;AACtB,UAAE,KAAK2K,MAAMwW;MACf;MAIA3G,OAAa;AACX,aAAKsM,oBAAmB;AACxB,YAAI,KAAKjjB,QAAQC,QAAQ;AACvB,eAAK+iB,UAAU,IAAIV,MAAM,KAAKxb,KAAK,CAAC;QACtC;AAEA,aAAKA,MAAMsB,gBAAgB,KAAKtB,MAAMoB;AACtC,aAAKpB,MAAMC,kBAAkB,KAAKD,MAAM3B;AACxC,aAAK+d,UAAS;MAChB;MAEAC,IAAItzB,MAA0B;AAC5B,YAAI,KAAK2wB,MAAM3wB,IAAI,GAAG;AACpB,eAAK8mB,KAAI;AACT,iBAAO;QACT,OAAO;AACL,iBAAO;QACT;MACF;MAKA6J,MAAM3wB,MAA0B;AAC9B,eAAO,KAAKiX,MAAMjX,SAASA;MAC7B;MAKAuzB,qBAAqBtc,OAA8B;AACjD,eAAO;UACL3I,KAAK2I,MAAM3I;UACXrB,OAAO;UACPjN,MAAMiX,MAAMjX;UACZrC,OAAOsZ,MAAMtZ;UACbC,KAAKqZ,MAAMrZ;UACXonB,SAAS,CAAC,KAAKwO,WAAU,CAAE;UAC3BvF,QAAQhX,MAAMgX;UACd3Y,UAAU2B,MAAM3B;UAChBiD,eAAetB,MAAMsB;UACrBqU,SAAS3V,MAAM2V;UACfC,WAAW5V,MAAM4V;UACjB+B,aAAa3X,MAAM2X;;MAEvB;MAeA6E,YAA4B;AAC1B,cAAMC,MAAM,KAAKzc;AAEjB,aAAKA,QAAQ,KAAKsc,qBAAqBG,GAAG;AAE1C,aAAKf,cAAc;AACnB,aAAKU,UAAS;AACd,aAAKV,cAAc;AAEnB,cAAMgB,OAAO,KAAK1c;AAClB,aAAKA,QAAQyc;AACb,eAAOC;MACT;MAEAC,iBAAyB;AACvB,eAAO,KAAKC,oBAAoB,KAAK5c,MAAM3I,GAAG;MAChD;MAEAulB,oBAAoBvlB,KAAqB;AACvCke,uBAAesH,YAAYxlB;AAC3B,eAAOke,eAAe5G,KAAK,KAAKiG,KAAK,IAAIW,eAAesH,YAAYxlB;MACtE;MAEAylB,oBAA4B;AAC1B,eAAO,KAAKlI,MAAMC,WAAW,KAAK8H,eAAgB,CAAA;MACpD;MAQAI,uBAA+B;AAC7B,eAAO,KAAKC,0BAA0B,KAAKhd,MAAM3I,GAAG;MACtD;MAEA2lB,0BAA0B3lB,KAAqB;AAC7Cme,6BAAqBqH,YAAYxlB;AACjC,eAAOme,qBAAqB7G,KAAK,KAAKiG,KAAK,IACvCY,qBAAqBqH,YACrBxlB;MACN;MASA4lB,0BAAkC;AAChC,eAAO,KAAKrI,MAAMC,WAAW,KAAKkI,qBAAsB,CAAA;MAC1D;MAEAG,eAAe7lB,KAAqB;AAKlC,YAAI8lB,KAAK,KAAKvI,MAAMC,WAAWxd,GAAG;AAClC,aAAK8lB,KAAK,WAAY,SAAU,EAAE9lB,MAAM,KAAKud,MAAMxU,QAAQ;AACzD,gBAAMgd,QAAQ,KAAKxI,MAAMC,WAAWxd,GAAG;AACvC,eAAK+lB,QAAQ,WAAY,OAAQ;AAC/BD,iBAAK,UAAYA,KAAK,SAAU,OAAOC,QAAQ;UACjD;QACF;AACA,eAAOD;MACT;MAKAE,UAAUtO,QAAuB;AAC/B,aAAK/O,MAAM+O,SAASA;AACpB,YAAIA,QAAQ;AAKV,eAAK/O,MAAMuW,aAAa+G,QAAQ,CAAC,CAACC,cAAc/X,EAAE,MAChD,KAAKtG,MAAMqe,cAAc/X,EAAE,CAC7B;AACA,eAAKxF,MAAMuW,aAAaiH,MAAK;QAC/B;MACF;MAEAjB,aAAyB;AACvB,eAAO,KAAKvc,MAAM+N,QAAQ,KAAK/N,MAAM+N,QAAQ3N,SAAS,CAAC;MACzD;MAGAgc,YAAkB;AAChB,aAAKqB,UAAS;AACd,aAAKzd,MAAMtZ,QAAQ,KAAKsZ,MAAM3I;AAC9B,YAAI,CAAC,KAAKqkB,YAAa,MAAK1b,MAAM3B,WAAW,KAAK2B,MAAM2X,YAAW;AACnE,YAAI,KAAK3X,MAAM3I,OAAO,KAAK+I,QAAQ;AACjC,eAAKsd,YAAW,GAAO;AACvB;QACF;AAEA,aAAKC,iBAAiB,KAAKT,eAAe,KAAKld,MAAM3I,GAAG,CAAC;MAC3D;MAKAumB,iBAAiBtJ,YAAsD;AACrE,YAAIjW;AACJ,YAAI,CAAC,KAAKqd,YAAard,YAAW,KAAK2B,MAAM2X,YAAW;AACxD,cAAMjxB,QAAQ,KAAKsZ,MAAM3I;AACzB,cAAM1Q,MAAM,KAAKiuB,MAAMwG,QAAQ9G,YAAY5tB,QAAQ,CAAC;AACpD,YAAIC,QAAQ,IAAI;AAId,gBAAM,KAAKuY,MAAMzG,OAAO/E,qBAAqB,KAAKsM,MAAM2X,YAAW,CAAE;QACvE;AAEA,aAAK3X,MAAM3I,MAAM1Q,MAAM2tB,WAAWlU;AAClCgV,mBAAWyH,YAAYn2B,QAAQ;AAC/B,eAAO0uB,WAAWzG,KAAK,KAAKiG,KAAK,KAAKQ,WAAWyH,aAAal2B,KAAK;AACjE,YAAE,KAAKqZ,MAAM2V;AACb,eAAK3V,MAAM4V,YAAYR,WAAWyH;QACpC;AAIA,YAAI,KAAKnB,YAAa;AAGtB,cAAM5H,UAA0B;UAC9B/qB,MAAM;UACNiN,OAAO,KAAK4e,MAAMgD,MAAMlxB,QAAQ,GAAGC,GAAG;UACtCD;UACAC,KAAKA,MAAM2tB,WAAWlU;UACtBnJ,KAAK,IAAIxQ,eAAe4X,UAAU,KAAK2B,MAAM2X,YAAW,CAAE;;AAE5D,YAAI,KAAKze,QAAQC,OAAQ,MAAK+iB,UAAUpI,OAAO;AAC/C,eAAOA;MACT;MAEA+J,gBAAgBC,WAA8C;AAC5D,cAAMp3B,QAAQ,KAAKsZ,MAAM3I;AACzB,YAAIgH;AACJ,YAAI,CAAC,KAAKqd,YAAard,YAAW,KAAK2B,MAAM2X,YAAW;AACxD,YAAIQ,KAAK,KAAKvD,MAAMC,WAAY,KAAK7U,MAAM3I,OAAOymB,SAAU;AAC5D,YAAI,KAAK9d,MAAM3I,MAAM,KAAK+I,QAAQ;AAChC,iBAAO,CAACiV,UAAU8C,EAAE,KAAK,EAAE,KAAKnY,MAAM3I,MAAM,KAAK+I,QAAQ;AACvD+X,iBAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;UAC3C;QACF;AAIA,YAAI,KAAKqkB,YAAa;AAEtB,cAAM/0B,MAAM,KAAKqZ,MAAM3I;AACvB,cAAMrB,QAAQ,KAAK4e,MAAMgD,MAAMlxB,QAAQo3B,WAAWn3B,GAAG;AAErD,cAAMmtB,UAAyB;UAC7B/qB,MAAM;UACNiN;UACAtP;UACAC;UACAsQ,KAAK,IAAIxQ,eAAe4X,UAAU,KAAK2B,MAAM2X,YAAW,CAAE;;AAE5D,YAAI,KAAKze,QAAQC,OAAQ,MAAK+iB,UAAUpI,OAAO;AAC/C,eAAOA;MACT;MAKA2J,YAAkB;AAChB,cAAMM,aAAa,KAAK/d,MAAM3I;AAC9B,cAAM2b,WAAW,CAAA;AACjBgL,aAAM,QAAO,KAAKhe,MAAM3I,MAAM,KAAK+I,QAAQ;AACzC,gBAAM+X,KAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;AAC/C,kBAAQ8gB,IAAE;YACR,KAAA;YACA,KAAA;YACA,KAAA;AACE,gBAAE,KAAKnY,MAAM3I;AACb;YACF,KAAA;AACE,kBACE,KAAKud,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,IACzC;AACA,kBAAE,KAAK2I,MAAM3I;cACf;YAEF,KAAA;YACA,KAAA;YACA,KAAA;AACE,gBAAE,KAAK2I,MAAM3I;AACb,gBAAE,KAAK2I,MAAM2V;AACb,mBAAK3V,MAAM4V,YAAY,KAAK5V,MAAM3I;AAClC;YAEF,KAAA;AACE,sBAAQ,KAAKud,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,GAAC;gBAC/C,KAAA,IAAyB;AACvB,wBAAMyc,UAAU,KAAK8J,iBAAiB,IAAI;AAC1C,sBAAI9J,YAAYZ,QAAW;AACzB,yBAAKW,WAAWC,OAAO;AACvB,wBAAI,KAAK5a,QAAQ+kB,cAAejL,UAAStW,KAAKoX,OAAO;kBACvD;AACA;gBACF;gBAEA,KAAA,IAAsB;AACpB,wBAAMA,UAAU,KAAK+J,gBAAgB,CAAC;AACtC,sBAAI/J,YAAYZ,QAAW;AACzB,yBAAKW,WAAWC,OAAO;AACvB,wBAAI,KAAK5a,QAAQ+kB,cAAejL,UAAStW,KAAKoX,OAAO;kBACvD;AACA;gBACF;gBAEA;AACE,wBAAMkK;cACV;AACA;YAEF;AACE,kBAAIvI,aAAa0C,EAAE,GAAG;AACpB,kBAAE,KAAKnY,MAAM3I;cACf,WACE8gB,OAAE,MACF,CAAC,KAAK9I,YACN,KAAKnW,QAAQglB,QACb;AACA,sBAAM7mB,MAAM,KAAK2I,MAAM3I;AACvB,oBACE,KAAKud,MAAMC,WAAWxd,MAAM,CAAC,MAAC,MAC9B,KAAKud,MAAMC,WAAWxd,MAAM,CAAC,MAAC,OAC7B0mB,eAAe,KAAK,KAAK/d,MAAM4V,YAAYmI,aAC5C;AAEA,wBAAMjK,UAAU,KAAK+J,gBAAgB,CAAC;AACtC,sBAAI/J,YAAYZ,QAAW;AACzB,yBAAKW,WAAWC,OAAO;AACvB,wBAAI,KAAK5a,QAAQ+kB,cAAejL,UAAStW,KAAKoX,OAAO;kBACvD;gBACF,OAAO;AACL,wBAAMkK;gBACR;cACF,WACE7F,OAAE,MACF,CAAC,KAAK9I,YACN,KAAKnW,QAAQglB,QACb;AACA,sBAAM7mB,MAAM,KAAK2I,MAAM3I;AACvB,oBACE,KAAKud,MAAMC,WAAWxd,MAAM,CAAC,MAA+B,MAC5D,KAAKud,MAAMC,WAAWxd,MAAM,CAAC,MAAoB,MACjD,KAAKud,MAAMC,WAAWxd,MAAM,CAAC,MAAC,IAC9B;AAEA,wBAAMyc,UAAU,KAAK+J,gBAAgB,CAAC;AACtC,sBAAI/J,YAAYZ,QAAW;AACzB,yBAAKW,WAAWC,OAAO;AACvB,wBAAI,KAAK5a,QAAQ+kB,cAAejL,UAAStW,KAAKoX,OAAO;kBACvD;gBACF,OAAO;AACL,wBAAMkK;gBACR;cACF,OAAO;AACL,sBAAMA;cACR;UACJ;QACF;AAEA,YAAIhL,SAAS5S,SAAS,GAAG;AACvB,gBAAMzZ,MAAM,KAAKqZ,MAAM3I;AACvB,gBAAM8mB,oBAAuC;YAC3Cz3B,OAAOq3B;YACPp3B;YACAqsB;YACAoB,aAAa;YACbM,cAAc;YACdH,gBAAgB;;AAElB,eAAKvU,MAAMiU,aAAavX,KAAKyhB,iBAAiB;QAChD;MACF;MAOAT,YAAY30B,MAAiB6xB,KAAiB;AAC5C,aAAK5a,MAAMrZ,MAAM,KAAKqZ,MAAM3I;AAC5B,aAAK2I,MAAMoB,SAAS,KAAKpB,MAAM2X,YAAW;AAC1C,cAAMyG,WAAW,KAAKpe,MAAMjX;AAC5B,aAAKiX,MAAMjX,OAAOA;AAClB,aAAKiX,MAAMhK,QAAQ4kB;AAEnB,YAAI,CAAC,KAAKc,aAAa;AACrB,eAAKlZ,cAAc4b,QAAQ;QAC7B;MACF;MAEAC,aAAat1B,MAAuB;AAClC,aAAKiX,MAAMjX,OAAOA;AAGlB,aAAKyZ,cAAa;MACpB;MAYA8b,uBAA6B;AAC3B,YAAI,KAAKte,MAAM3I,QAAQ,KAAK,KAAKknB,sBAAqB,GAAI;AACxD;QACF;AAEA,cAAMC,UAAU,KAAKxe,MAAM3I,MAAM;AACjC,cAAMwY,OAAO,KAAKqN,eAAesB,OAAO;AACxC,YAAI3O,QAAI,MAAwBA,QAAI,IAAsB;AACxD,gBAAM,KAAK3Q,MACTzG,OAAOxG,0BACP,KAAK+N,MAAM2X,YAAW,CACxB;QACF;AAEA,YACE9H,SAAI,OACHA,SAAoC,MAAI,KAAKpQ,UAAU,gBAAgB,GACxE;AAKA,eAAKgf,aAAa,gBAAgB;AAClC,cAEE,KAAK7hB,gBAAgB,kBAAkB,YAAY,MAAM,OACzD;AACA,kBAAM,KAAKsC,MACT2Q,SAAiC,MAC7BpX,OAAOvH,+CACPuH,OAAO3G,6CACX,KAAKkO,MAAM2X,YACb,CAAA;UACF;AAEA,eAAK3X,MAAM3I,OAAO;AAClB,cAAIwY,SAAI,KAA+B;AAErC,iBAAK6N,YAAW,CAAc;UAChC,OAAO;AAEL,iBAAKA,YAAW,CAAgB;UAClC;QACF,WAAWhP,kBAAkBmB,IAAI,GAAG;AAClC,YAAE,KAAK7P,MAAM3I;AACb,eAAKqmB,YAA4B,KAAA,KAAKgB,UAAU7O,IAAI,CAAC;QACvD,WAAWA,SAAI,IAA0B;AACvC,YAAE,KAAK7P,MAAM3I;AACb,eAAKqmB,YAA4B,KAAA,KAAKgB,UAAW,CAAA;QACnD,OAAO;AACL,eAAKC,SAAkB,IAAA,CAAC;QAC1B;MACF;MAEAC,gBAAsB;AACpB,cAAM/O,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,YAAIwY,QAAI,MAAwBA,QAAI,IAAsB;AACxD,eAAKgP,WAAW,IAAI;AACpB;QACF;AAEA,YACEhP,SAAsB,MACtB,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,IACzC;AACA,eAAK2I,MAAM3I,OAAO;AAClB,eAAKqmB,YAAW,EAAY;QAC9B,OAAO;AACL,YAAE,KAAK1d,MAAM3I;AACb,eAAKqmB,YAAW,EAAO;QACzB;MACF;MAEAoB,kBAAwB;AACtB,cAAMjP,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,YAAIwY,SAAI,IAAyB;AAC/B,eAAK8O,SAAyB,IAAA,CAAC;QACjC,OAAO;AACL,eAAKA,SAAmB,IAAA,CAAC;QAC3B;MACF;MAEAJ,wBAAiC;AAC/B,YAAI,KAAKve,MAAM3I,QAAQ,KAAK,KAAK+I,SAAS,EAAG,QAAO;AAEpD,YAAI+X,KAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACjD,YAAI8gB,OAAE,GAAgC,QAAO;AAE7C,cAAMzxB,QAAQ,KAAKsZ,MAAM3I;AACzB,aAAK2I,MAAM3I,OAAO;AAElB,eAAO,CAACge,UAAU8C,EAAE,KAAK,EAAE,KAAKnY,MAAM3I,MAAM,KAAK+I,QAAQ;AACvD+X,eAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;QAC3C;AAEA,cAAMrB,QAAQ,KAAK4e,MAAMgD,MAAMlxB,QAAQ,GAAG,KAAKsZ,MAAM3I,GAAG;AAExD,aAAKqmB,YAAqC1nB,IAAAA,KAAK;AAE/C,eAAO;MACT;MAEA+oB,sBAAsB93B,OAAoB;AAExC,YAAI8B,OAAO9B,UAAI,KAA6C,KAAA;AAC5D,YAAI+3B,QAAQ;AACZ,YAAInP,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAGnD,YAAIpQ,UAAI,MAA2B4oB,SAAI,IAAyB;AAC9DmP;AACAnP,iBAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAC/CtO,iBAAkB;QACpB;AAGA,YAAI8mB,SAAI,MAA2B,CAAC,KAAK7P,MAAMgX,QAAQ;AACrDgI;AAIAj2B,iBAAO9B,UAAI,KAAwD,KAAA;QACrE;AAEA,aAAK03B,SAAS51B,MAAMi2B,KAAK;MAC3B;MAEAC,mBAAmBh4B,OAAoB;AAErC,cAAM4oB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAErD,YAAIwY,SAAS5oB,OAAM;AACjB,cAAI,KAAK2tB,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,IAAyB;AACpE,iBAAKsnB,SAAoB,IAAA,CAAC;UAC5B,OAAO;AACL,iBAAKA,SACH13B,UAAI,MAAyD,KAAA,IAC7D,CACF;UACF;AACA;QACF;AAEA,YAAIA,UAAI,KAA4B;AAElC,cAAI4oB,SAAI,IAA4B;AAClC,iBAAK8O,SAAsB,IAAA,CAAC;AAC5B;UACF;AAEA,cAEE,KAAKlf,UAAU,gBAAgB,KAC/BoQ,SAAI,KACJ;AACA,gBAAI,KAAKjT,gBAAgB,kBAAkB,YAAY,MAAM,OAAO;AAClE,oBAAM,KAAKsC,MACTzG,OAAOzH,2CACP,KAAKgP,MAAM2X,YAAW,CACxB;YACF;AACA,iBAAK3X,MAAM3I,OAAO;AAClB,iBAAKqmB,YAAW,CAAa;AAC7B;UACF;AAGA,cAEE,KAAKje,UAAU,gBAAgB,KAC/BoQ,SAAI,IACJ;AACA,gBAAI,KAAKjT,gBAAgB,kBAAkB,YAAY,MAAM,OAAO;AAClE,oBAAM,KAAKsC,MACTzG,OAAO7G,0CACP,KAAKoO,MAAM2X,YAAW,CACxB;YACF;AACA,iBAAK3X,MAAM3I,OAAO;AAClB,iBAAKqmB,YAAW,CAAe;AAC/B;UACF;QACF;AAEA,YAAI7N,SAAI,IAAyB;AAC/B,eAAK8O,SAAoB,IAAA,CAAC;AAC1B;QACF;AAEA,aAAKA,SACH13B,UAAI,MAAyD,KAAA,IAC7D,CACF;MACF;MAEAi4B,kBAAwB;AACtB,cAAMrP,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAGrD,YAAIwY,SAAI,MAA2B,CAAC,KAAK7P,MAAMgX,QAAQ;AAIrD,eAAK2H,SAAuB,IAAA,CAAC;mBAI7B9O,SAAwB,MAGxB,KAAKpQ,UAAU,CACb,oBACA;UAAE0f,UAAU;UAAQC,YAAY;QAAM,CAAA,CACvC,GACD;AACA,eAAKT,SAAyB,IAAA,CAAC;AAG/B,gBAAMU,cAAc,KAAKzK,MAAM0K,YAAY,KAAKtf,MAAM3I,GAAG;AACzD,cAAIgoB,gBAAW,IAAsB;AACnC,iBAAKnxB,WAAU;UACjB;QACF,OAEK;AACH,eAAKywB,SAAwB,IAAA,CAAC;QAChC;MACF;MAEAY,mBAAyB;AACvB,cAAM1P,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAGrD,YACEwY,SAAI,MACJ,KAAKpQ,UAAU,CACb,oBACA;UAAE0f,UAAU;UAAQC,YAAY;QAAM,CAAA,CACvC,GACD;AACA,eAAKT,SAAsB,IAAA,CAAC;QAC9B,OAEK;AACH,eAAKA,SAAgB,IAAA,CAAC;QACxB;MACF;MAEAa,mBAAmBv4B,OAAoB;AAErC,cAAM4oB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAErD,YAAIwY,SAAS5oB,OAAM;AACjB,eAAK03B,SAAoB,IAAA,CAAC;AAC1B;QACF;AAEA,YAAI9O,SAAI,IAAyB;AAC/B,eAAK8O,SAAoB,IAAA,CAAC;QAC5B,OAAO;AACL,eAAKA,SAAqB,IAAA,CAAC;QAC7B;MACF;MAEAc,eAAqB;AAEnB,cAAM;UAAEpoB;YAAQ,KAAK2I;AACrB,cAAM6P,OAAO,KAAK+E,MAAMC,WAAWxd,MAAM,CAAC;AAE1C,YAAIwY,SAAI,IAAyB;AAC/B,cAAI,KAAK+E,MAAMC,WAAWxd,MAAM,CAAC,MAAC,IAAyB;AACzD,iBAAKsnB,SAAoB,IAAA,CAAC;AAC1B;UACF;AACA,eAAKA,SAAuB,IAAA,CAAC;AAC7B;QACF;AAEA,YAAI9O,SAAI,IAAyB;AAE/B,eAAK8O,SAAwB,IAAA,CAAC;AAC9B;QACF;AAEA,aAAKA,SAAgB,IAAA,CAAC;MACxB;MAEAe,eAAqB;AAEnB,cAAM;UAAEroB;YAAQ,KAAK2I;AACrB,cAAM6P,OAAO,KAAK+E,MAAMC,WAAWxd,MAAM,CAAC;AAE1C,YAAIwY,SAAI,IAA4B;AAClC,gBAAM8P,OACJ,KAAK/K,MAAMC,WAAWxd,MAAM,CAAC,MAAC,KAA6B,IAAI;AACjE,cAAI,KAAKud,MAAMC,WAAWxd,MAAMsoB,IAAI,MAAC,IAAyB;AAC5D,iBAAKhB,SAAQ,IAAYgB,OAAO,CAAC;AACjC;UACF;AACA,eAAKhB,SAAuBgB,IAAAA,IAAI;AAChC;QACF;AAEA,YAAI9P,SAAI,IAAyB;AAE/B,eAAK8O,SAAwB,IAAA,CAAC;AAC9B;QACF;AAEA,aAAKA,SAAgB,IAAA,CAAC;MACxB;MAEAiB,kBAAkB34B,OAAoB;AAEpC,cAAM4oB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,YAAIwY,SAAI,IAAyB;AAC/B,eAAK8O,SAEH,IAAA,KAAK/J,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,KACrC,IACA,CACN;AACA;QACF;AACA,YAAIpQ,UAAI,MAA2B4oB,SAAI,IAA4B;AAEjE,eAAK7P,MAAM3I,OAAO;AAClB,eAAKqmB,YAAW,EAAS;AACzB;QACF;AACA,aAAKiB,SAAS13B,UAAI,KAAyC,KAAA,IAAE,CAAC;MAChE;MAEA44B,qBAA2B;AAEzB,cAAMhQ,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,cAAMyY,QAAQ,KAAK8E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACtD,YAAIwY,SAAI,IAA6B;AACnC,cAAIC,UAAK,IAAyB;AAEhC,iBAAK6O,SAAoB,IAAA,CAAC;UAC5B,OAAO;AAEL,iBAAKA,SAA+B,IAAA,CAAC;UACvC;QACF,WACE9O,SAAI,MACJ,EAAEC,SAAK,MAAwBA,SAAyB,KACxD;AAEA,eAAK9P,MAAM3I,OAAO;AAClB,eAAKqmB,YAAW,EAAe;QACjC,OAAO;AACL,YAAE,KAAK1d,MAAM3I;AACb,eAAKqmB,YAAW,EAAY;QAC9B;MACF;MAEAC,iBAAiB12B,OAAoB;AACnC,gBAAQA,OAAI;UAIV,KAAA;AACE,iBAAK23B,cAAa;AAClB;UAEF,KAAA;AACE,cAAE,KAAK5e,MAAM3I;AACb,iBAAKqmB,YAAW,EAAU;AAC1B;UACF,KAAA;AACE,cAAE,KAAK1d,MAAM3I;AACb,iBAAKqmB,YAAW,EAAU;AAC1B;UACF,KAAA;AACE,cAAE,KAAK1d,MAAM3I;AACb,iBAAKqmB,YAAW,EAAQ;AACxB;UACF,KAAA;AACE,cAAE,KAAK1d,MAAM3I;AACb,iBAAKqmB,YAAW,EAAS;AACzB;UACF,KAAA;AACE,gBAEE,KAAKje,UAAU,gBAAgB,KAC/B,KAAKmV,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,KACzC;AACA,kBAAI,KAAKuF,gBAAgB,kBAAkB,YAAY,MAAM,OAAO;AAClE,sBAAM,KAAKsC,MACTzG,OAAO5G,4CACP,KAAKmO,MAAM2X,YAAW,CACxB;cACF;AAGA,mBAAK3X,MAAM3I,OAAO;AAClB,mBAAKqmB,YAAW,CAAe;YACjC,OAAO;AACL,gBAAE,KAAK1d,MAAM3I;AACb,mBAAKqmB,YAAW,CAAY;YAC9B;AACA;UACF,KAAA;AACE,cAAE,KAAK1d,MAAM3I;AACb,iBAAKqmB,YAAW,CAAY;AAC5B;UACF,KAAA;AACE,gBAEE,KAAKje,UAAU,gBAAgB,KAC/B,KAAKmV,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,KACzC;AACA,kBAAI,KAAKuF,gBAAgB,kBAAkB,YAAY,MAAM,OAAO;AAClE,sBAAM,KAAKsC,MACTzG,OAAOxH,6CACP,KAAK+O,MAAM2X,YAAW,CACxB;cACF;AAGA,mBAAK3X,MAAM3I,OAAO;AAClB,mBAAKqmB,YAAW,CAAa;YAC/B,OAAO;AACL,gBAAE,KAAK1d,MAAM3I;AACb,mBAAKqmB,YAAW,CAAU;YAC5B;AACA;UACF,KAAA;AACE,cAAE,KAAK1d,MAAM3I;AACb,iBAAKqmB,YAAW,CAAU;AAC1B;UAEF,KAAA;AACE,gBACE,KAAKje,UAAU,cAAc,KAC7B,KAAKmV,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,IACzC;AACA,mBAAKsnB,SAAyB,IAAA,CAAC;YACjC,OAAO;AACL,gBAAE,KAAK3e,MAAM3I;AACb,mBAAKqmB,YAAW,EAAS;YAC3B;AACA;UAEF,KAAA;AACE,iBAAKmC,mBAAkB;AACvB;UAEF,KAAA;AACE,iBAAKC,kBAAiB;AACtB;UAEF,KAAA,IAAuB;AACrB,kBAAMjQ,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AAErD,gBAAIwY,SAAI,OAA6BA,SAAI,IAA2B;AAClE,mBAAKkQ,gBAAgB,EAAE;AACvB;YACF;AAEA,gBAAIlQ,SAAI,OAA6BA,SAAI,IAA2B;AAClE,mBAAKkQ,gBAAgB,CAAC;AACtB;YACF;AAEA,gBAAIlQ,SAAI,MAA6BA,SAAI,IAA2B;AAClE,mBAAKkQ,gBAAgB,CAAC;AACtB;YACF;UACF;UAGA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;AACE,iBAAKlB,WAAW,KAAK;AACrB;UAGF,KAAA;UACA,KAAA;AACE,iBAAKmB,WAAW/4B,KAAI;AACpB;UAOF,KAAA;AACE,iBAAK63B,gBAAe;AACpB;UAEF,KAAA;UACA,KAAA;AACE,iBAAKC,sBAAsB93B,KAAI;AAC/B;UAEF,KAAA;UACA,KAAA;AACE,iBAAKg4B,mBAAmBh4B,KAAI;AAC5B;UAEF,KAAA;AACE,iBAAKi4B,gBAAe;AACpB;UAEF,KAAA;UACA,KAAA;AACE,iBAAKM,mBAAmBv4B,KAAI;AAC5B;UAEF,KAAA;AACE,iBAAKw4B,aAAY;AACjB;UAEF,KAAA;AACE,iBAAKC,aAAY;AACjB;UAEF,KAAA;UACA,KAAA;AACE,iBAAKE,kBAAkB34B,KAAI;AAC3B;UAEF,KAAA;AACE,iBAAK03B,SAAmB,IAAA,CAAC;AACzB;UAEF,KAAA;AACE,iBAAKY,iBAAgB;AACrB;UAEF,KAAA;AACE,iBAAKjB,qBAAoB;AACzB;UAEF,KAAA;AACE,iBAAK2B,SAAQ;AACb;UAEF;AACE,gBAAIvR,kBAAkBznB,KAAI,GAAG;AAC3B,mBAAKg5B,SAASh5B,KAAI;AAClB;YACF;QACJ;AAEA,cAAM,KAAKiY,MACTzG,OAAOxK,0BACP,KAAK+R,MAAM2X,YAAW,GACtB;UACEzpB,YAAY8L,OAAOuf,cAActyB,KAAI;QACvC,CACF;MACF;MAEA03B,SAAS51B,MAAiB42B,MAAoB;AAC5C,cAAM1G,MAAM,KAAKrE,MAAMgD,MAAM,KAAK5X,MAAM3I,KAAK,KAAK2I,MAAM3I,MAAMsoB,IAAI;AAClE,aAAK3f,MAAM3I,OAAOsoB;AAClB,aAAKjC,YAAY30B,MAAMkwB,GAAG;MAC5B;MAEAiH,aAAmB;AACjB,cAAM7hB,WAAW,KAAK2B,MAAM3B;AAC5B,cAAM3X,QAAQ,KAAKsZ,MAAMtZ,QAAQ;AACjC,YAAIy5B,SAASrP;AACb,YAAI;UAAEzZ;YAAQ,KAAK2I;AACnB,iBAAS,EAAE3I,KAAK;AACd,cAAIA,OAAO,KAAK+I,QAAQ;AAEtB,kBAAM,KAAKlB,MACTzG,OAAO9E,oBACP7M,+BAA+BuX,UAAU,CAAC,CAC5C;UACF;AACA,gBAAM8Z,KAAK,KAAKvD,MAAMC,WAAWxd,GAAG;AACpC,cAAIge,UAAU8C,EAAE,GAAG;AACjB,kBAAM,KAAKjZ,MACTzG,OAAO9E,oBACP7M,+BAA+BuX,UAAU,CAAC,CAC5C;UACF;AACA,cAAI8hB,SAAS;AACXA,sBAAU;UACZ,OAAO;AACL,gBAAIhI,OAAE,IAAkC;AACtCrH,wBAAU;YACZ,WAAWqH,OAAmC,MAAIrH,SAAS;AACzDA,wBAAU;YACX,WAAUqH,OAAE,MAAwB,CAACrH,SAAS;AAC7C;YACF;AACAqP,sBAAUhI,OAA0B;UACtC;QACF;AACA,cAAMiI,UAAU,KAAKxL,MAAMgD,MAAMlxB,OAAO2Q,GAAG;AAC3C,UAAEA;AAEF,YAAIgpB,OAAO;AAEX,cAAM7B,UAAUA,MAEd13B,+BAA+BuX,UAAUhH,MAAM,IAAI3Q,KAAK;AAE1D,eAAO2Q,MAAM,KAAK+I,QAAQ;AACxB,gBAAM+c,KAAK,KAAKD,eAAe7lB,GAAG;AAElC,gBAAMipB,OAAOtmB,OAAO4U,aAAauO,EAAE;AAGnC,cAAI5B,kBAAkBhM,IAAI4N,EAAE,GAAG;AAC7B,gBAAIA,OAAE,KAA2B;AAC/B,kBAAIkD,KAAKE,SAAS,GAAG,GAAG;AACtB,qBAAKrhB,MAAMzG,OAAO1L,2BAA2ByxB,QAAS,CAAA;cACxD;YACF,WAAWrB,OAAE,KAA2B;AACtC,kBAAIkD,KAAKE,SAAS,GAAG,GAAG;AACtB,qBAAKrhB,MAAMzG,OAAO1L,2BAA2ByxB,QAAS,CAAA;cACxD;YACF;AACA,gBAAI6B,KAAKE,SAASD,IAAI,GAAG;AACvB,mBAAKphB,MAAMzG,OAAOrN,sBAAsBozB,QAAS,CAAA;YACnD;UACD,WAAU3P,iBAAiBsO,EAAE,KAAKA,OAAE,IAA0B;AAC7D,iBAAKje,MAAMzG,OAAO7J,sBAAsB4vB,QAAS,CAAA;UACnD,OAAO;AACL;UACF;AAEA,YAAEnnB;AACFgpB,kBAAQC;QACV;AACA,aAAKtgB,MAAM3I,MAAMA;AAEjB,aAAKqmB,YAAuB,KAAA;UAC1BrkB,SAAS+mB;UACT9mB,OAAO+mB;QACT,CAAC;MACH;MAWAnG,QACE7sB,OACA0sB,KACAC,WAAoB,OACpBI,oBAAsC,MACvB;AACf,cAAM;UAAEH;UAAG5iB;QAAI,IAAI6iB,QACjB,KAAKtF,OACL,KAAK5U,MAAM3I,KACX,KAAK2I,MAAM4V,WACX,KAAK5V,MAAM2V,SACXtoB,OACA0sB,KACAC,UACAI,mBACA,KAAKuB,uBACa,KACpB;AACA,aAAK3b,MAAM3I,MAAMA;AACjB,eAAO4iB;MACT;MAEA8F,gBAAgB1yB,OAAqB;AACnC,cAAMgR,WAAW,KAAK2B,MAAM2X,YAAW;AACvC,YAAI6I,WAAW;AAEf,aAAKxgB,MAAM3I,OAAO;AAClB,cAAMujB,MAAM,KAAKV,QAAQ7sB,KAAK;AAC9B,YAAIutB,OAAO,MAAM;AACf,eAAK1b,MACHzG,OAAOrL,cAEPtG,+BAA+BuX,UAAU,CAAC,GAC1C;YACEhR;UACF,CACF;QACF;AACA,cAAMwiB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;AAEjD,YAAIwY,SAAI,KAA2B;AACjC,YAAE,KAAK7P,MAAM3I;AACbmpB,qBAAW;QACb,WAAW3Q,SAAI,KAA2B;AACxC,gBAAM,KAAK3Q,MAAMzG,OAAOtL,gBAAgBkR,QAAQ;QAClD;AAEA,YAAIqQ,kBAAkB,KAAKwO,eAAe,KAAKld,MAAM3I,GAAG,CAAC,GAAG;AAC1D,gBAAM,KAAK6H,MAAMzG,OAAOpI,kBAAkB,KAAK2P,MAAM2X,YAAW,CAAE;QACpE;AAEA,YAAI6I,UAAU;AACZ,gBAAMvH,MAAM,KAAKrE,MACdgD,MAAMvZ,SAAS9X,OAAO,KAAKyZ,MAAM3I,GAAG,EACpCopB,QAAQ,SAAS,EAAE;AACtB,eAAK/C,YAAuBzE,KAAAA,GAAG;AAC/B;QACF;AAEA,aAAKyE,YAAoB9C,KAAAA,GAAG;MAC9B;MAIAiE,WAAW6B,eAA8B;AACvC,cAAMh6B,QAAQ,KAAKsZ,MAAM3I;AACzB,cAAMgH,WAAW,KAAK2B,MAAM2X,YAAW;AACvC,YAAIgJ,UAAU;AACd,YAAIH,WAAW;AACf,YAAII,cAAc;AAClB,YAAIC,UAAU;AAEd,YAAI,CAACH,iBAAiB,KAAKxG,QAAQ,EAAE,MAAM,MAAM;AAC/C,eAAKhb,MAAMzG,OAAO1K,eAAe,KAAKiS,MAAM2X,YAAW,CAAE;QAC3D;AACA,cAAMmJ,iBACJ,KAAK9gB,MAAM3I,MAAM3Q,SAAS,KAC1B,KAAKkuB,MAAMC,WAAWnuB,KAAK,MAAsB;AAEnD,YAAIo6B,gBAAgB;AAClB,gBAAMC,UAAU,KAAKnM,MAAMgD,MAAMlxB,OAAO,KAAKsZ,MAAM3I,GAAG;AACtD,eAAK2kB,uBAAuBvjB,OAAO7D,oBAAoByJ,QAAQ;AAC/D,cAAI,CAAC,KAAK2B,MAAM+O,QAAQ;AAEtB,kBAAMiS,gBAAgBD,QAAQ3F,QAAQ,GAAG;AACzC,gBAAI4F,gBAAgB,GAAG;AAErB,mBAAK9hB,MACHzG,OAAOtE,2BACPrN,+BAA+BuX,UAAU2iB,aAAa,CACxD;YACF;UACF;AACAH,oBAAUC,kBAAkB,CAAC,OAAOnS,KAAKoS,OAAO;QAClD;AAEA,YAAIlR,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;AAC/C,YAAIwY,SAAI,MAAsB,CAACgR,SAAS;AACtC,YAAE,KAAK7gB,MAAM3I;AACb,eAAK6iB,QAAQ,EAAE;AACfyG,oBAAU;AACV9Q,iBAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;QAC7C;AAEA,aACGwY,SAA6B,MAAIA,SAA6B,QAC/D,CAACgR,SACD;AACAhR,iBAAO,KAAK+E,MAAMC,WAAW,EAAE,KAAK7U,MAAM3I,GAAG;AAC7C,cAAIwY,SAAI,MAA2BA,SAAI,IAAqB;AAC1D,cAAE,KAAK7P,MAAM3I;UACf;AACA,cAAI,KAAK6iB,QAAQ,EAAE,MAAM,MAAM;AAC7B,iBAAKhb,MAAMzG,OAAOzK,0BAA0BqQ,QAAQ;UACtD;AACAsiB,oBAAU;AACVC,wBAAc;AACd/Q,iBAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;QAC7C;AAEA,YAAIwY,SAAI,KAA2B;AAGjC,cAAI8Q,WAAWG,gBAAgB;AAC7B,iBAAK5hB,MAAMzG,OAAOzL,sBAAsBqR,QAAQ;UAClD;AACA,YAAE,KAAK2B,MAAM3I;AACbmpB,qBAAW;QACb;AAEA,YAAqC3Q,SAAI,KAA2B;AAClE,eAAK4O,aAAa,WAAW,KAAKze,MAAM2X,YAAW,CAAE;AACrD,cAAIiJ,eAAeE,gBAAgB;AACjC,iBAAK5hB,MAAMzG,OAAOtL,gBAAgBkR,QAAQ;UAC5C;AACA,YAAE,KAAK2B,MAAM3I;AAEb,cAAI4pB,YAAY;QAClB;AAEA,YAAIvS,kBAAkB,KAAKwO,eAAe,KAAKld,MAAM3I,GAAG,CAAC,GAAG;AAC1D,gBAAM,KAAK6H,MAAMzG,OAAOpI,kBAAkB,KAAK2P,MAAM2X,YAAW,CAAE;QACpE;AAGA,cAAMsB,MAAM,KAAKrE,MAAMgD,MAAMlxB,OAAO,KAAKsZ,MAAM3I,GAAG,EAAEopB,QAAQ,UAAU,EAAE;AAExE,YAAID,UAAU;AACZ,eAAK9C,YAAuBzE,KAAAA,GAAG;AAC/B;QACF;AAEA,YAAqCgI,WAAW;AAC9C,eAAKvD,YAAwBzE,KAAAA,GAAG;AAChC;QACF;AAEA,cAAM2B,MAAMiG,UAAU/G,SAASb,KAAK,CAAC,IAAIiI,WAAWjI,GAAG;AACvD,aAAKyE,YAAoB9C,KAAAA,GAAG;MAC9B;MAIAtB,cAAcF,gBAAwC;AACpD,cAAM;UAAEnyB,MAAAA;UAAMoQ;QAAI,IAAIiiB,cACpB,KAAK1E,OACL,KAAK5U,MAAM3I,KACX,KAAK2I,MAAM4V,WACX,KAAK5V,MAAM2V,SACXyD,gBACA,KAAK0C,2BACP;AACA,aAAK9b,MAAM3I,MAAMA;AACjB,eAAOpQ;MACT;MAEA+4B,WAAWmB,OAAqB;AAC9B,cAAM;UAAElI;UAAK5hB;UAAKse;UAASC;QAAU,IAAI0C,mBACvC6I,UAAK,KAA+B,WAAW,UAC/C,KAAKvM,OACL,KAAK5U,MAAM3I,MAAM,GACjB,KAAK2I,MAAM4V,WACX,KAAK5V,MAAM2V,SACX,KAAKoG,uCACP;AACA,aAAK/b,MAAM3I,MAAMA,MAAM;AACvB,aAAK2I,MAAM4V,YAAYA;AACvB,aAAK5V,MAAM2V,UAAUA;AACrB,aAAK+H,YAAuBzE,KAAAA,GAAG;MACjC;MAGAmI,2BAAiC;AAC/B,YAAI,CAAC,KAAK1H,MAAK,CAAU,GAAG;AAC1B,eAAKxrB,WAAW,MAAI,CAAW;QACjC;AAEA,aAAK8R,MAAM3I;AACX,aAAKyoB,kBAAiB;MACxB;MAGAA,oBAA0B;AACxB,cAAMuB,UAAU,KAAKzM,MAAM,KAAK5U,MAAM3I,GAAG;AACzC,cAAM;UAAE4hB;UAAKN;UAAiBthB;UAAKse;UAASC;QAAU,IACpD0C,mBACE,YACA,KAAK1D,OACL,KAAK5U,MAAM3I,MAAM,GACjB,KAAK2I,MAAM4V,WACX,KAAK5V,MAAM2V,SACX,KAAKsG,yCACP;AACF,aAAKjc,MAAM3I,MAAMA,MAAM;AACvB,aAAK2I,MAAM4V,YAAYA;AACvB,aAAK5V,MAAM2V,UAAUA;AAErB,YAAIgD,iBAAiB;AACnB,eAAK3Y,MAAMsW,gCAAgC,IAAInwB,SAC7CwyB,gBAAgBhD,SAChBgD,gBAAgBthB,MAAMshB,gBAAgB/C,WACtC+C,gBAAgBthB,GAClB;QACF;AAEA,YAAI,KAAKud,MAAM0K,YAAYjoB,GAAG,MAAC,IAA4B;AACzD,eAAKqmB,YAEH/E,IAAAA,kBAAkB,OAAO0I,UAAUpI,MAAM,GAC3C;QACF,OAAO;AACL,eAAKjZ,MAAM3I;AACX,eAAKqmB,YAEH/E,IAAAA,kBAAkB,OAAO0I,UAAUpI,MAAM,IAC3C;QACF;MACF;MAEA+C,uBAAuBuB,cAAmC/X,IAAc;AACtE,cAAMjf,QAAQif,GAAGjf;AAEjB,YAAI,KAAKyZ,MAAM+O,UAAU,CAAC,KAAK/O,MAAMuW,aAAahH,IAAIhpB,KAAK,GAAG;AAC5D,eAAK2Y,MAAMqe,cAAc/X,EAAE;QAC7B,OAAO;AACL,eAAKxF,MAAMuW,aAAa5e,IAAIpR,OAAO,CAACg3B,cAAc/X,EAAE,CAAC;QACvD;MACF;MAWAkZ,UAAU4C,WAA4B;AACpC,aAAKthB,MAAMyX,cAAc;AACzB,YAAIrI,OAAO;AACX,cAAM1oB,QAAQ,KAAKsZ,MAAM3I;AACzB,YAAIuhB,aAAa,KAAK5Y,MAAM3I;AAC5B,YAAIiqB,cAAcpO,QAAW;AAC3B,eAAKlT,MAAM3I,OAAOiqB,aAAa,QAAS,IAAI;QAC9C;AAEA,eAAO,KAAKthB,MAAM3I,MAAM,KAAK+I,QAAQ;AACnC,gBAAM+X,KAAK,KAAK+E,eAAe,KAAKld,MAAM3I,GAAG;AAC7C,cAAIwX,iBAAiBsJ,EAAE,GAAG;AACxB,iBAAKnY,MAAM3I,OAAO8gB,MAAM,QAAS,IAAI;UACvC,WAAWA,OAAE,IAA0B;AACrC,iBAAKnY,MAAMyX,cAAc;AAEzBrI,oBAAQ,KAAKwF,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;AACnD,kBAAMkqB,WAAW,KAAKvhB,MAAM2X,YAAW;AACvC,kBAAM6J,kBACJ,KAAKxhB,MAAM3I,QAAQ3Q,QAAQgoB,oBAAoBG;AAEjD,gBAAI,KAAK+F,MAAMC,WAAW,EAAE,KAAK7U,MAAM3I,GAAG,MAAC,KAA2B;AACpE,mBAAK6H,MAAMzG,OAAOjJ,sBAAsB,KAAKwQ,MAAM2X,YAAW,CAAE;AAChEiB,2BAAa,KAAK5Y,MAAM3I,MAAM;AAC9B;YACF;AAEA,cAAE,KAAK2I,MAAM3I;AACb,kBAAMoqB,MAAM,KAAKnI,cAAc,IAAI;AACnC,gBAAImI,QAAQ,MAAM;AAChB,kBAAI,CAACD,gBAAgBC,GAAG,GAAG;AACzB,qBAAKviB,MAAMzG,OAAOjN,4BAA4B+1B,QAAQ;cACxD;AAEAnS,sBAAQpV,OAAOuf,cAAckI,GAAG;YAClC;AACA7I,yBAAa,KAAK5Y,MAAM3I;UAC1B,OAAO;AACL;UACF;QACF;AACA,eAAO+X,OAAO,KAAKwF,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;MAC3D;MAKA4oB,SAASqB,WAA0B;AACjC,cAAMlS,OAAO,KAAKsP,UAAU4C,SAAS;AACrC,cAAMv4B,OAAO24B,WAAahqB,IAAI0X,IAAI;AAClC,YAAIrmB,SAASmqB,QAAW;AAGtB,eAAKwK,YAAY30B,MAAM2kB,eAAe3kB,IAAI,CAAC;QAC7C,OAAO;AACL,eAAK20B,YAAqBtO,KAAAA,IAAI;QAChC;MACF;MAEA+M,sBAA4B;AAC1B,cAAM;UAAEpzB;YAAS,KAAKiX;AACtB,YAAIoN,eAAerkB,IAAI,KAAK,KAAKiX,MAAMyX,aAAa;AAClD,eAAKvY,MAAMzG,OAAOjL,4BAA4B,KAAKwS,MAAM3B,UAAU;YACjE5Q,cAAcigB,eAAe3kB,IAAI;UACnC,CAAC;QACH;MACF;MAcAmW,MACEqe,cACA/X,IACAtO,UAAwB,CAAA,GACE;AAC1B,cAAMD,MAAMuO,cAAcrf,WAAWqf,KAAKA,GAAGvO,IAAIvQ;AACjD,cAAMyQ,QAAQomB,aAAatmB,KAAKC,OAAO;AAEvC,YAAI,CAAC,KAAKgC,QAAQ0iB,cAAe,OAAMzkB;AACvC,YAAI,CAAC,KAAKukB,YAAa,MAAK1b,MAAM6V,OAAOnZ,KAAKvF,KAAK;AAEnD,eAAOA;MACT;MAQAwqB,eACEpE,cACA/X,IACAtO,UAAwB,CAAA,GACU;AAClC,cAAMD,MAAMuO,cAAcrf,WAAWqf,KAAKA,GAAGvO,IAAIvQ;AACjD,cAAM2Q,MAAMJ,IAAI1Q;AAChB,cAAMsvB,SAAS,KAAK7V,MAAM6V;AAE1B,iBAASpH,IAAIoH,OAAOzV,SAAS,GAAGqO,KAAK,GAAGA,KAAK;AAC3C,gBAAMtX,QAAQ0e,OAAOpH,CAAC;AACtB,cAAItX,MAAMF,IAAI1Q,UAAU8Q,KAAK;AAC3B,mBAAQwe,OAAOpH,CAAC,IAAI8O,aAAatmB,KAAKC,OAAO;UAC/C;AACA,cAAIC,MAAMF,IAAI1Q,QAAQ8Q,IAAK;QAC7B;AAEA,eAAO,KAAK6H,MAAMqe,cAAc/X,IAAItO,OAAO;MAC7C;MAIAsL,cAAc4b,UAA2B;MAAC;MAG1ClwB,WAAW+I,KAAuBlO,MAAwB;AACxD,cAAM,KAAKmW,MACTzG,OAAO7F,iBACPqE,OAAO,OAAOA,MAAM,KAAK+I,MAAM3B,UAC/B;UACExL,UAAU9J,OAAO2kB,eAAe3kB,IAAI,IAAI;QAC1C,CACF;MACF;MAEA01B,aAAa/L,YAAoBzb,KAAsB;AACrD,YAAI,KAAKwI,UAAUiT,UAAU,GAAG;AAC9B,iBAAO;QACT;AAEA,cAAM,KAAKxT,MACTzG,OAAOzJ,eACPiI,OAAO,OAAOA,MAAM,KAAK+I,MAAM3B,UAC/B;UACEpP,eAAe,CAACyjB,UAAU;QAC5B,CACF;MACF;MAEAkP,gBAAgBC,aAA6B;AAC3C,YAAI,CAACA,YAAYC,KAAK3yB,UAAQ,KAAKsQ,UAAUtQ,IAAI,CAAC,GAAG;AACnD,gBAAM,KAAK+P,MAAMzG,OAAOlJ,qBAAqB,KAAKyQ,MAAM3B,UAAU;YAChEpP,eAAe4yB;UACjB,CAAC;QACH;MACF;MAEAhG,aAAa1kB,OAAsC;AACjD,eAAO,CAACE,KAAaue,WAAmBD,YAAoB;AAC1D,eAAKzW,MAAM/H,OAAOmkB,cAAcjkB,KAAKue,WAAWD,OAAO,CAAC;;MAE5D;IAoDF;ACjlDO,QAAMoM,aAAN,MAAiB;MAAA37B,cAAA;AAAA,aAEtB47B,eAA4B,oBAAIjtB,IAAG;AAAE,aAGrCktB,gBAA+C,oBAAIvf,IAAG;AAAE,aAIxDwf,wBAA+C,oBAAIxf,IAAG;MAAE;IAC1D;AAEe,QAAMyf,oBAAN,MAAwB;MAKrC/7B,YAAYiqB,QAAmB;AAAA,aAJ/BA,SAAM;AAAA,aACN+R,QAA2B,CAAA;AAAE,aAC7BF,wBAA+C,oBAAIxf,IAAG;AAGpD,aAAK2N,SAASA;MAChB;MAEAT,UAAsB;AACpB,eAAO,KAAKwS,MAAM,KAAKA,MAAMhiB,SAAS,CAAC;MACzC;MAEAkR,QAAQ;AACN,aAAK8Q,MAAM1lB,KAAK,IAAIqlB,WAAY,CAAA;MAClC;MAEAxQ,OAAO;AACL,cAAM8Q,gBAAgB,KAAKD,MAAMpU,IAAG;AAKpC,cAAM4B,UAAU,KAAKA,QAAO;AAG5B,mBAAW,CAACzgB,MAAM8H,GAAG,KAAKc,MAAMuqB,KAAKD,cAAcH,qBAAqB,GAAG;AACzE,cAAItS,SAAS;AACX,gBAAI,CAACA,QAAQsS,sBAAsB3S,IAAIpgB,IAAI,GAAG;AAC5CygB,sBAAQsS,sBAAsBvqB,IAAIxI,MAAM8H,GAAG;YAC7C;UACF,OAAO;AACL,iBAAKoZ,OAAOnR,MAAMzG,OAAOrK,+BAA+B6I,KAAK;cAC3DpQ,gBAAgBsI;YAClB,CAAC;UACH;QACF;MACF;MAEAozB,mBACEpzB,MACAqzB,aACAvrB,KACA;AACA,cAAM;UAAE+qB;UAAcC;UAAeC;QAAsB,IACzD,KAAKtS,QAAO;AACd,YAAI6S,YAAYT,aAAazS,IAAIpgB,IAAI;AAErC,YAAIqzB,cAAW,GAAmC;AAChD,gBAAME,WAAWD,aAAaR,cAAcvqB,IAAIvI,IAAI;AACpD,cAAIuzB,UAAU;AACZ,kBAAMC,YAAYD,WAAQ;AAC1B,kBAAME,YAAYJ,cAAW;AAE7B,kBAAMK,UAAUH,WAAQ;AACxB,kBAAMI,UAAUN,cAAW;AAK3BC,wBAAYI,YAAYC,WAAWH,cAAcC;AAEjD,gBAAI,CAACH,UAAWR,eAAcpQ,OAAO1iB,IAAI;UAC3C,WAAW,CAACszB,WAAW;AACrBR,0BAActqB,IAAIxI,MAAMqzB,WAAW;UACrC;QACF;AAEA,YAAIC,WAAW;AACb,eAAKpS,OAAOnR,MAAMzG,OAAO1H,0BAA0BkG,KAAK;YACtDpQ,gBAAgBsI;UAClB,CAAC;QACH;AAEA6yB,qBAAa5P,IAAIjjB,IAAI;AACrB+yB,8BAAsBrQ,OAAO1iB,IAAI;MACnC;MAEA4P,eAAe5P,MAAc8H,KAAe;AAC1C,YAAI6H;AACJ,aAAKA,cAAc,KAAKsjB,OAAO;AAC7B,cAAItjB,WAAWkjB,aAAazS,IAAIpgB,IAAI,EAAG;QACzC;AAEA,YAAI2P,YAAY;AACdA,qBAAWojB,sBAAsBvqB,IAAIxI,MAAM8H,GAAG;QAChD,OAAO;AAEL,eAAKoZ,OAAOnR,MAAMzG,OAAOrK,+BAA+B6I,KAAK;YAC3DpQ,gBAAgBsI;UAClB,CAAC;QACH;MACF;IACF;ACtDA,QAAM4zB,kBAAN,MAAsB;MAGpB38B,YAAY2C,OAAyB,GAAoC;AACvE,aAAKA,OAAOA;MACd;MAEAi6B,iCAAgE;AAC9D,eACE,KAAKj6B,SAAI,KACT,KAAKA,SAA4D;MAErE;MAEAk6B,kCAAkC;AAChC,eAAO,KAAKl6B,SAAkD;MAChE;IACF;AAUA,QAAMm6B,wBAAN,cAAoCH,gBAAgB;MAGlD38B,YACE2C,MAGA;AACA,cAAMA,IAAI;AAAE,aAPdo6B,oBACE,oBAAIzgB,IAAG;MAOT;MACA0gB,uBACEC,mBACA7d,IACA;AACA,cAAMjf,QAAQif,GAAGjf;AAEjB,aAAK48B,kBAAkBxrB,IAAIpR,OAAO,CAAC88B,mBAAmB7d,EAAE,CAAC;MAC3D;MACA8d,sBAAsB/8B,OAAe;AACnC,aAAK48B,kBAAkBtR,OAAOtrB,KAAK;MACrC;MACAg9B,cACEC,UACA;AACA,aAAKL,kBAAkB7F,QAAQkG,QAAQ;MACzC;IACF;AAEe,QAAMC,yBAAN,MAA6B;MAI1Cr9B,YAAYiqB,QAAmB;AAAA,aAH/BA,SAAM;AAAA,aACN+R,QAAgC,CAAC,IAAIW,gBAAiB,CAAA;AAGpD,aAAK1S,SAASA;MAChB;MACAiB,MAAME,OAAwB;AAC5B,aAAK4Q,MAAM1lB,KAAK8U,KAAK;MACvB;MAEAD,OAAO;AACL,aAAK6Q,MAAMpU,IAAG;MAChB;MASA0V,gCACEnG,cACAz0B,MACM;AACN,cAAM66B,SAAS76B,KAAKmO,IAAIvQ;AACxB,cAAM;UAAE07B;QAAO,IAAG;AAClB,YAAI3T,IAAI2T,MAAMhiB,SAAS;AACvB,YAAIoR,QAAyB4Q,MAAM3T,CAAC;AACpC,eAAO,CAAC+C,MAAMyR,gCAA+B,GAAI;AAC/C,cAAIzR,MAAMwR,+BAA8B,GAAI;AAC1CxR,kBAAM4R,uBAAuB7F,cAAcoG,MAAM;UACnD,OAAO;AAGL;UACF;AACAnS,kBAAQ4Q,MAAM,EAAE3T,CAAC;QACnB;AACA,aAAK4B,OAAOnR,MAAMqe,cAAcoG,MAAM;MACxC;MAqBAC,iCACEzsB,OACArO,MACM;AACN,cAAM;UAAEs5B;QAAO,IAAG;AAClB,cAAM5Q,QAAyB4Q,MAAMA,MAAMhiB,SAAS,CAAC;AACrD,cAAMujB,SAAS76B,KAAKmO,IAAIvQ;AACxB,YAAI8qB,MAAMyR,gCAA+B,GAAI;AAC3C,eAAK5S,OAAOnR,MAAM/H,OAAOwsB,MAAM;QACjC,WAAWnS,MAAMwR,+BAA8B,GAAI;AACjDxR,gBAAM4R,uBAAuBjsB,OAAOwsB,MAAM;QAC5C,OAAO;AACL;QACF;MACF;MAQAE,gCAAgCre,IAAoB;AAClD,cAAM;UAAE4c;QAAO,IAAG;AAClB,YAAI3T,IAAI2T,MAAMhiB,SAAS;AACvB,YAAIoR,QAAyB4Q,MAAM3T,CAAC;AACpC,eAAO+C,MAAMwR,+BAA8B,GAAI;AAC7C,cACExR,MAAMzoB,SAAI,GACV;AACAyoB,kBAAM4R,uBAAuB3qB,OAAOnP,wBAAwBkc,EAAE;UAChE;AACAgM,kBAAQ4Q,MAAM,EAAE3T,CAAC;QACnB;MACF;MAEAqV,oBAA0B;AACxB,cAAM;UAAE1B;QAAO,IAAG;AAClB,cAAM3R,eAAe2R,MAAMA,MAAMhiB,SAAS,CAAC;AAC3C,YAAI,CAACqQ,aAAauS,+BAA8B,EAAI;AACpDvS,qBAAa8S,cAAc,CAAC,CAAChG,cAActmB,GAAG,MAAM;AAClD,eAAKoZ,OAAOnR,MAAMqe,cAActmB,GAAG;AAEnC,cAAIwX,IAAI2T,MAAMhiB,SAAS;AACvB,cAAIoR,QAAQ4Q,MAAM3T,CAAC;AACnB,iBAAO+C,MAAMwR,+BAA8B,GAAI;AAC7CxR,kBAAM8R,sBAAsBrsB,IAAI1Q,KAAK;AACrCirB,oBAAQ4Q,MAAM,EAAE3T,CAAC;UACnB;QACF,CAAC;MACH;IACF;AAEO,aAASsV,+BAA+B;AAC7C,aAAO,IAAIhB,gBAAe,CAA0C;IACtE;AAEO,aAASiB,oBAAoB;AAClC,aAAO,IAAId,sBAAqB,CAEhC;IACF;AAEO,aAASe,qBAAqB;AACnC,aAAO,IAAIf,sBAAqB,CAEhC;IACF;AAEO,aAASgB,qBAAqB;AACnC,aAAO,IAAInB,gBAAe;IAC5B;ACzMe,QAAMoB,6BAAN,MAAiC;MAAA/9B,cAAA;AAAA,aAC9Cg+B,SAA2B,CAAA;MAAE;MAC7B9S,MAAMhY,OAAkB;AACtB,aAAK8qB,OAAO1nB,KAAKpD,KAAK;MACxB;MAEAiY,OAAO;AACL,aAAK6S,OAAOpW,IAAG;MACjB;MAEAqW,eAA0B;AACxB,eAAO,KAAKD,OAAO,KAAKA,OAAOhkB,SAAS,CAAC;MAC3C;MAEA,IAAIkkB,WAAoB;AACtB,gBAAQ,KAAKD,aAAY,IAAE,KAA4B;MACzD;MAEA,IAAIE,WAAoB;AACtB,gBAAQ,KAAKF,aAAY,IAAE,KAA4B;MACzD;MAEA,IAAIG,YAAqB;AACvB,gBAAQ,KAAKH,aAAY,IAAE,KAA6B;MAC1D;MAEA,IAAII,QAAiB;AACnB,gBAAQ,KAAKJ,aAAY,IAAE,KAAyB;MACtD;IACF;AAEO,aAASK,cACdzpB,SACAoB,aACW;AACX,cACGpB,UAAO,IAA2B,MAClCoB,cAAW,IAA2B;IAE3C;ACxCe,QAAesoB,aAAf,cAAkClJ,UAAU;MAIzDmJ,SACE97B,MACA+G,KACAmG,OACAG,aAAsB,MAChB;AACN,YAAI,CAACrN,KAAM;AAEX,YAAI;UAAE8R;QAAO,IAAG9R;AAChB,YAAI8R,SAAS,MAAM;AACjBA,kBAAQ,CAAA;AACR9R,eAAK8R,QAAQA;QACf;AAEA,YAAIzE,YAAY;AACdyE,gBAAM/K,GAAG,IAAImG;QACf,OAAO;AACLC,iBAAOC,eAAe0E,OAAO/K,KAAK;YAAEsG;YAAYH;UAAM,CAAC;QACzD;MACF;MAIA6uB,aAAaxvB,OAA2B;AACtC,eAAO,KAAK2K,MAAMjX,SAASsM,SAAS,CAAC,KAAK2K,MAAMyX;MAClD;MAEAqN,qBAAqBC,WAAmB51B,MAAuB;AAC7D,cAAM61B,UAAUD,YAAY51B,KAAKiR;AACjC,YAAI,KAAKwU,MAAMgD,MAAMmN,WAAWC,OAAO,MAAM71B,MAAM;AACjD,gBAAM81B,SAAS,KAAKrQ,MAAMC,WAAWmQ,OAAO;AAC5C,iBAAO,EACLnW,iBAAiBoW,MAAM,MAItBA,SAAS,WAAY;QAE1B;AACA,eAAO;MACT;MAEAC,sBAAsB/1B,MAAuB;AAC3C,cAAM0gB,OAAO,KAAK8M,eAAc;AAChC,eAAO,KAAKmI,qBAAqBjV,MAAM1gB,IAAI;MAC7C;MAIAg2B,cAAc9vB,OAA2B;AACvC,YAAI,KAAKwvB,aAAaxvB,KAAK,GAAG;AAC5B,eAAKwa,KAAI;AACT,iBAAO;QACT;AACA,eAAO;MACT;MAIAuV,iBACE/vB,OACAkoB,cACM;AACN,YAAI,CAAC,KAAK4H,cAAc9vB,KAAK,GAAG;AAC9B,cAAIkoB,gBAAgB,MAAM;AACxB,kBAAM,KAAKre,MAAMqe,cAAc,KAAKvd,MAAM3B,QAAQ;UACpD;AACA,eAAKnQ,WAAW,MAAMmH,KAAK;QAC7B;MACF;MAIAgwB,qBAA8B;AAC5B,eACE,KAAK3L,MAAY,GAAA,KACjB,KAAKA,MAAK,CAAU,KACpB,KAAK4L,sBAAqB;MAE9B;MAEAA,wBAAiC;AAC/B,eAAOhQ,WACL,KAAKV,OACL,KAAK5U,MAAMsB,cAAc/a,OACzB,KAAKyZ,MAAMtZ,KACb;MACF;MAEA6+B,wBAAiC;AAC/B,eAAOjQ,WAAW,KAAKV,OAAO,KAAK5U,MAAMrZ,KAAK,KAAKg2B,eAAc,CAAE;MACrE;MAEA6I,mBAA4B;AAC1B,eAAO,KAAKnJ,IAAW,EAAA,KAAK,KAAKgJ,mBAAkB;MACrD;MAKAI,UAAUC,WAAoB,MAAY;AACxC,YAAIA,WAAW,KAAKF,iBAAgB,IAAK,KAAKnJ,IAAG,EAAQ,EAAG;AAC5D,aAAKnd,MAAMzG,OAAO1J,kBAAkB,KAAKiR,MAAMsB,aAAa;MAC9D;MAKAqkB,OAAO58B,MAAiBkO,KAA6B;AACnD,YAAI,CAAC,KAAKolB,IAAItzB,IAAI,GAAG;AACnB,eAAKmF,WAAW+I,KAAKlO,IAAI;QAC3B;MACF;MAIA68B,SACEC,IACAC,WAAkB,KAAK9lB,MAAM1I,MAAK,GAIa;AAC/C,cAAMyuB,cAEF;UAAEj9B,MAAM;;AACZ,YAAI;AACF,gBAAMA,OAAO+8B,GAAG,CAAC/8B,QAAO,SAAS;AAC/Bi9B,wBAAYj9B,OAAOA;AAEnB,kBAAMi9B;UACR,CAAC;AACD,cAAI,KAAK/lB,MAAM6V,OAAOzV,SAAS0lB,SAASjQ,OAAOzV,QAAQ;AACrD,kBAAM4lB,YAAY,KAAKhmB;AACvB,iBAAKA,QAAQ8lB;AAIb,iBAAK9lB,MAAMwW,eAAewP,UAAUxP;AACpC,mBAAO;cACL1tB;cACAqO,OAAO6uB,UAAUnQ,OAAOiQ,SAASjQ,OAAOzV,MAAM;cAC9C6lB,QAAQ;cACRC,SAAS;cACTF;;UAEJ;AAEA,iBAAO;YACLl9B;YACAqO,OAAO;YACP8uB,QAAQ;YACRC,SAAS;YACTF,WAAW;;QAEd,SAAQ7uB,OAAO;AACd,gBAAM6uB,YAAY,KAAKhmB;AACvB,eAAKA,QAAQ8lB;AACb,cAAI3uB,iBAAiBC,aAAa;AAEhC,mBAAO;cAAEtO,MAAM;cAAMqO;cAAO8uB,QAAQ;cAAMC,SAAS;cAAOF;;UAC5D;AACA,cAAI7uB,UAAU4uB,aAAa;AACzB,mBAAO;cACLj9B,MAAMi9B,YAAYj9B;cAClBqO,OAAO;cACP8uB,QAAQ;cACRC,SAAS;cACTF;;UAEJ;AAEA,gBAAM7uB;QACR;MACF;MAEAgvB,sBACE7nB,qBACA8nB,UACA;AACA,YAAI,CAAC9nB,oBAAqB,QAAO;AACjC,cAAM;UACJ+nB;UACAC;UACAC;UACAC;QACD,IAAGloB;AAEJ,cAAMmoB,YACJ,CAAC,CAACJ,sBACF,CAAC,CAACC,kBACF,CAAC,CAACE,yBACF,CAAC,CAACD;AAEJ,YAAI,CAACH,UAAU;AACb,iBAAOK;QACT;AAEA,YAAIJ,sBAAsB,MAAM;AAC9B,eAAKnnB,MAAMzG,OAAOvL,6BAA6Bm5B,kBAAkB;QACnE;AAEA,YAAIC,kBAAkB,MAAM;AAC1B,eAAKpnB,MAAMzG,OAAOtN,gBAAgBm7B,cAAc;QAClD;AAEA,YAAIC,iBAAiB,MAAM;AACzB,eAAKrnB,MAAMzG,OAAOhG,wBAAwB8zB,aAAa;QACzD;AAEA,YAAIC,yBAAyB,MAAM;AACjC,eAAKt4B,WAAWs4B,qBAAqB;QACvC;MACF;MAWAE,wBAAiC;AAC/B,eAAO5Z,2BAA2B,KAAK9M,MAAMjX,IAAI;MACnD;MAMAiU,cAAclU,MAAiC;AAC7C,eAAOA,KAAKC,SAAS;MACvB;MAOA+T,iBAAiBhU,MAA2B;AAC1C,eAAOA,KAAKiU,GAAG5N;MACjB;MAOA8R,yBAAyBnY,MAAqB;AAC5C,gBACGA,KAAKC,SAAS,sBACbD,KAAKC,SAAS,+BAChB,KAAKiU,cAAclU,KAAK69B,QAAQ;MAEpC;MAEAxrB,iBACErS,MACmD;AACnD,eAAOA,KAAKC,SAAS;MACvB;MAEAmY,eAAepY,MAAkC;AAC/C,eAAOA,KAAKC,SAAS;MACvB;MAEA69B,iBAEEvX,WAAoB,KAAKnW,QAAQ0d,eAAe,UACpC;AAEZ,cAAMiQ,YAAY,KAAK7mB,MAAMoW;AAC7B,aAAKpW,MAAMoW,SAAS,CAAA;AAEpB,cAAM0Q,yBAAyB,KAAKC;AACpC,aAAKA,sBAAsB,oBAAIhyB,IAAG;AAGlC,cAAMiyB,cAAc,KAAK3X;AACzB,aAAKA,WAAWA;AAEhB,cAAM4X,WAAW,KAAKzV;AACtB,cAAMpB,gBAAe,KAAK8W,gBAAe;AACzC,aAAK1V,QAAQ,IAAIpB,cAAa,MAAMf,QAAQ;AAE5C,cAAM8X,eAAe,KAAKC;AAC1B,aAAKA,YAAY,IAAIjD,2BAA0B;AAE/C,cAAM9B,gBAAgB,KAAKvjB;AAC3B,aAAKA,aAAa,IAAIqjB,kBAAkB,IAAI;AAE5C,cAAMkF,qBAAqB,KAAKC;AAChC,aAAKA,kBAAkB,IAAI7D,uBAAuB,IAAI;AAEtD,eAAO,MAAM;AAEX,eAAKzjB,MAAMoW,SAASyQ;AACpB,eAAKE,sBAAsBD;AAG3B,eAAKzX,WAAW2X;AAChB,eAAKxV,QAAQyV;AACb,eAAKG,YAAYD;AACjB,eAAKroB,aAAaujB;AAClB,eAAKiF,kBAAkBD;;MAE3B;MAEAE,qBAAqB;AACnB,YAAIC,aAAU;AACd,YAAI,KAAKnY,UAAU;AACjBmY,wBAAU;QACZ;AACA,aAAKhW,MAAMF,MAAK,CAAkB;AAClC,aAAK8V,UAAU9V,MAAMkW,UAAU;MACjC;MAEAC,0BAA0BnpB,qBAAuC;AAC/D,cAAM;UAAEioB;QAAe,IAAGjoB;AAC1B,YAAIioB,kBAAkB,MAAM;AAC1B,eAAK9H,aAAa,wBAAwB8H,aAAa;QACzD;MACF;IACF;AAeO,QAAMmB,mBAAN,MAAuB;MAAAthC,cAAA;AAAA,aAC5BigC,qBAAkD;AAAI,aACtDC,iBAA8C;AAAI,aAClDC,gBAA6C;AAAI,aACjDC,wBAAqD;MAAI;IAC3D;ACjYA,QAAMmB,OAAN,MAA+B;MAC7BvhC,YAAYiqB,QAAoBhZ,KAAaJ,KAAe;AAAA,aAQ5DlO,OAAe;AAPb,aAAKrC,QAAQ2Q;AACb,aAAK1Q,MAAM;AACX,aAAKsQ,MAAM,IAAIxQ,eAAewQ,GAAG;AACjC,YAAIoZ,UAAAA,QAAAA,OAAQnX,QAAQ0uB,OAAQ,MAAKC,QAAQ,CAACxwB,KAAK,CAAC;AAChD,YAAIgZ,UAAM,QAANA,OAAQzpB,SAAU,MAAKqQ,IAAIrQ,WAAWypB,OAAOzpB;MACnD;IAaF;AACA,QAAMkhC,gBAAgBH,KAAKI;AAEQ;AAEjCD,oBAAcE,UAAU,WAAkB;AACxC,cAAMC,UAAU,IAAIN,KAAKzU,QAAW,KAAKxsB,OAAO,KAAKuQ,IAAIvQ,KAAK;AAC9D,cAAMyR,OAAOlC,OAAOkC,KAAK,IAAI;AAC7B,iBAASsW,IAAI,GAAGrO,SAASjI,KAAKiI,QAAQqO,IAAIrO,QAAQqO,KAAK;AACrD,gBAAM5e,MAAMsI,KAAKsW,CAAC;AAElB,cACE5e,QAAQ,qBACRA,QAAQ,sBACRA,QAAQ,iBACR;AAEAo4B,oBAAQp4B,GAAG,IAAI,KAAKA,GAAG;UACzB;QACF;AAEA,eAAOo4B;;IAEX;AAEA,aAASC,iBAAiBp/B,MAAgB;AACxC,aAAOq/B,gBAAgBr/B,IAAI;IAC7B;AAEO,aAASq/B,gBAAgBr/B,MAAgB;AAI9C,YAAM;QAAEC;QAAMrC;QAAOC;QAAKsQ;QAAK4wB;QAAOjtB;QAAOzL;MAAM,IAAGrG;AACtD,YAAMs/B,SAASnyB,OAAOoyB,OAAOP,aAAa;AAC1CM,aAAOr/B,OAAOA;AACdq/B,aAAO1hC,QAAQA;AACf0hC,aAAOzhC,MAAMA;AACbyhC,aAAOnxB,MAAMA;AACbmxB,aAAOP,QAAQA;AACfO,aAAOxtB,QAAQA;AACfwtB,aAAOj5B,OAAOA;AACd,UAAIpG,SAAS,eAAe;AAC1Bq/B,eAAOE,eAAex/B,KAAKw/B;MAC7B;AACA,aAAOF;IACT;AAEO,aAASG,mBAAmBz/B,MAAgB;AACjD,YAAM;QAAEC;QAAMrC;QAAOC;QAAKsQ;QAAK4wB;QAAOjtB;MAAO,IAAG9R;AAChD,UAAIC,SAAS,eAAe;AAC1B,eAAOm/B,iBAAiBp/B,IAAI;MAC9B;AACA,YAAMs/B,SAASnyB,OAAOoyB,OAAOP,aAAa;AAC1CM,aAAOr/B,OAAOA;AACdq/B,aAAO1hC,QAAQA;AACf0hC,aAAOzhC,MAAMA;AACbyhC,aAAOnxB,MAAMA;AACbmxB,aAAOP,QAAQA;AACf,UAAI/+B,KAAK6R,QAAQuY,QAAW;AAE1BkV,eAAOztB,MAAM7R,KAAK6R;MACpB,OAAO;AACLytB,eAAOxtB,QAAQA;MACjB;AACAwtB,aAAOpyB,QAAQlN,KAAKkN;AACpB,aAAOoyB;IACT;AAIO,QAAeI,YAAf,cAAiC7D,WAAW;MACjDpnB,YAAmD;AACjD,cAAMtG,MAAM,KAAK+I,MAAM3B;AACvB,eAAO,IAAIspB,KAAK,MAAM1wB,IAAI1Q,OAAO0Q,GAAG;MACtC;MAEAwxB,YAAwCxxB,KAA0B;AAChE,eAAO,IAAI0wB,KAAK,MAAM1wB,IAAI1Q,OAAO0Q,GAAG;MACtC;MAGA8J,gBACEhY,MACW;AACX,eAAO,KAAK0/B,YAAY1/B,KAAKkO,IAAIvQ,KAAK;MACxC;MAIA+W,WAA+B3U,MAAiBC,MAAoB;AAClE,eAAO,KAAKoY,aAAarY,MAAMC,MAAM,KAAKiX,MAAMsB,aAAa;MAC/D;MAIAH,aACErY,MACAC,MACAqY,QACG;AAOFtY,aAAWC,OAAOA;AACnBD,aAAKnC,MAAMya,OAAO7a;AAClBuC,aAAKmO,IAAItQ,MAAMya;AACf,YAAI,KAAKlI,QAAQ0uB,OAAQ9+B,MAAK++B,MAAM,CAAC,IAAIzmB,OAAO7a;AAChD,YAAI,KAAK2S,QAAQ+kB,cAAe,MAAKjK,eAAelrB,IAAS;AAC7D,eAAOA;MACT;MAEAyX,mBAAmBzX,MAAgBuV,UAA0B;AAC3DvV,aAAKpC,QAAQ2X,SAAS9X;AACtBuC,aAAKmO,IAAIvQ,QAAQ2X;AACjB,YAAI,KAAKnF,QAAQ0uB,OAAQ9+B,MAAK++B,MAAM,CAAC,IAAIxpB,SAAS9X;MACpD;MAEA8a,iBACEvY,MACAsY,SAAmB,KAAKpB,MAAMsB,eACxB;AACNxY,aAAKnC,MAAMya,OAAO7a;AAClBuC,aAAKmO,IAAItQ,MAAMya;AACf,YAAI,KAAKlI,QAAQ0uB,OAAQ9+B,MAAK++B,MAAM,CAAC,IAAIzmB,OAAO7a;MAClD;MAKAmiC,2BAA2B5/B,MAAgB6/B,cAA8B;AACvE,aAAKpoB,mBAAmBzX,MAAM6/B,aAAa1xB,IAAIvQ,KAAK;MACtD;IACF;ACzIA,QAAMkiC,gBAAgB,oBAAI7zB,IAAI,CAC5B,KACA,OACA,QACA,WACA,SACA,WACA,SACA,aACA,SACA,QACA,UACA,UACA,UACA,QACA,UACA,MAAM,CACP;AAID,QAAM8zB,aAAahxB,qBAAqB;MACtCixB,2BACE;MACFC,4BACE;MAGFC,oBAAoBA,CAAC;QAAEC;YACrB,kCAAkCA,YAAY;MAChDC,qBACE;MACFC,8BACE;MACFC,+BACE;MACFC,iCAAiCA,CAAC;QAChCC;QACAC;MAIF,MACE,6DAA6DD,UAAU,mBAAmBA,UAAU,yBAAyBC,QAAQ;MACvIC,yBAAyBA,CAAC;QACxBF;QACAC;MAID,MACC,uDAAuDD,UAAU,6CAA6CC,QAAQ;MACxHE,8BAA8BA,CAAC;QAAEF;YAC/B,UAAUA,QAAQ;MACpBG,yBAAyBA,CAAC;QACxBC;QACAJ;MAID,MACC,eAAeI,eAAe,4FAA4FJ,QAAQ;MACpIK,wCAAwCA,CAAC;QACvCL;YAIA,4GAA4GA,QAAQ;MAatHM,yCAAyCA,CAAC;QACxCN;QACAD;QACAQ;YAMA,UAAUP,QAAQ,iBAAiBO,YAAY,+BAA+BR,UAAU,oBAAoBQ,YAAY;MAC1HC,wCAAwCA,CAAC;QACvCR;QACAD;MAKD,MACC,oDAAoDA,UAAU,iBAAiBC,QAAQ;MACzFS,yCAAyCA,CAAC;QACxCT;QACAD;MAKD,MACC,qCAAqCA,UAAU,4EAA4EC,QAAQ;MACrIU,uBAAuBA,CAAC;QACtBV;QACAD;QACAY;MAKF,MACE,qFAAqFZ,UAAU,wBAAwBY,UAAU,iBAAiBX,QAAQ;MAC5JY,gCAAgCA,CAAC;QAC/BZ;QACAD;MAID,MACC,sDAAsDA,UAAU,oBAAoBC,QAAQ;MAC9Fa,2CAA2CA,CAAC;QAC1Cb;YAIA,2GAA2GA,QAAQ;MACrHc,2BAA2B;MAC3BC,+BACE;MACFC,qCACE;MACFC,oBACE;MACFC,wBACE;MACFC,iBAAiB;MACjBC,qCACE;MACFC,yBACE;MACFC,qBACE;MACFC,mBAAmB;MACnBC,mBAAiB90B,OAAAwB,OAAA;QACfrQ,SACE;SAGE;QAAEmP,YAAY;MAAyB,CAAC;MAG9Cy0B,2BAA2B;MAC3BC,gBAAgB;MAChBC,6BACE;MACFC,8BACE;MACFC,2BAA2B;MAC3BC,sBACE;MACFC,oBAAoB;MACpBC,uBACE;MACFC,mBACE;MACFC,mCACE;MACFC,wBAAwBA,CAAC;QAAEzC;YACzB,4BAA4BA,YAAY;MAC1C0C,8BACE;MACFC,oCACE;MACFC,sBACE;MACFC,8BACE;MACFC,mCACE;MACFC,iDACE;MACFC,8BAA8BA,CAAC;QAC7BC;QACAhC;MAID,MACC,oBAAoBgC,qBAAqB,8BAA8BhC,UAAU;MACnFiC,qCACE;MACFC,yBAAyB;IAC3B,CAAC;AAGD,aAASC,eAAeC,aAA8B;AACpD,aACEA,YAAYvjC,SAAS,iCACpBujC,YAAYvjC,SAAS,+BACnB,CAACujC,YAAYhsB,eACXgsB,YAAYhsB,YAAYvX,SAAS,eAChCujC,YAAYhsB,YAAYvX,SAAS;IAE3C;AAEA,aAASwjC,kBACPzjC,MACS;AACT,aAAOA,KAAK0jC,eAAe,UAAU1jC,KAAK0jC,eAAe;IAC3D;AAEA,QAAMC,oBAAoB;MACxBC,OAAO;MACPC,KAAK;MACL5jC,MAAM;MACN6jC,WAAW;IACb;AAGA,aAASC,UACPC,MACAne,MACY;AACZ,YAAMoe,QAAa,CAAA;AACnB,YAAMC,QAAa,CAAA;AACnB,eAASve,IAAI,GAAGA,IAAIqe,KAAK1sB,QAAQqO,KAAK;AACpC,SAACE,KAAKme,KAAKre,CAAC,GAAGA,GAAGqe,IAAI,IAAIC,QAAQC,OAAOtwB,KAAKowB,KAAKre,CAAC,CAAC;MACvD;AACA,aAAO,CAACse,OAAOC,KAAK;IACtB;AAEA,QAAMC,oBAAoB;AAoC1B,QAAAC,OAAgBp0B,gBACd,MAAMq0B,wBAAwBr0B,WAA6B;MAAA1S,eAAAwX,MAAA;AAAA,cAAA,GAAAA,IAAA;AAAA,aAIzDwvB,aAA8Cla;MAAS;MAEvDgU,kBAA0D;AACxD,eAAO/U;MACT;MAEAkb,mBAA4B;AAC1B,eAAO,KAAKzwB,gBAAgB,QAAQ,KAAK,KAAK,KAAKwwB,eAAe;MACpE;MAEA1P,YAAY30B,MAAiB6xB,KAAgB;AAC3C,YACE7xB,SAAI,OACJA,SAAI,MACJA,SAAI,IACJ;AACA,cAAI,KAAKqkC,eAAela,QAAW;AACjC,iBAAKka,aAAa;UACpB;QACF;AACA,cAAM1P,YAAY30B,MAAM6xB,GAAG;MAC7B;MAEA/G,WAAWC,SAA0B;AACnC,YAAI,KAAKsZ,eAAela,QAAW;AAEjC,gBAAMoa,UAAUL,kBAAkBtT,KAAK7F,QAAQ9d,KAAK;AACpD,cAAI,CAACs3B,QAAS;mBAEHA,QAAQ,CAAC,MAAM,QAAQ;AAChC,iBAAKF,aAAa;UACnB,WAAUE,QAAQ,CAAC,MAAM,UAAU;AAClC,iBAAKF,aAAa;UACpB,OAAO;AACL,kBAAM,IAAIG,MAAM,wBAAwB;UAC1C;QACF;AACA,cAAM1Z,WAAWC,OAAO;MAC1B;MAEA0Z,yBAAyBC,KAA6B;AACpD,cAAMC,YAAY,KAAK1tB,MAAMgX;AAC7B,aAAKhX,MAAMgX,SAAS;AACpB,aAAK2O,OAAO8H,OAAG,EAAY;AAE3B,cAAM1kC,OAAO,KAAK4kC,cAAa;AAC/B,aAAK3tB,MAAMgX,SAAS0W;AACpB,eAAO3kC;MACT;MAEA6kC,qBAAsC;AACpC,cAAM9kC,OAAO,KAAKyU,UAAS;AAC3B,cAAMswB,YAAY,KAAK7tB,MAAM3B;AAC7B,aAAKwR,KAAI;AACT,aAAKuV,iBAAgB,GAAW;AAEhC,YAAI,KAAKplB,MAAMC,gBAAgB1Z,QAAQsnC,UAAUtnC,QAAQ,GAAG;AAC1D,eAAK2Y,MAAM2pB,WAAW+C,oCAAoCiC,SAAS;QACrE;AACA,YAAI,KAAKxR,IAAG,EAAU,GAAG;AACvBvzB,eAAKkN,QAAQ,MAAM83B,gBAAe;AAClC,eAAKnI,OAAM,EAAU;AACrB,iBAAO,KAAKloB,WAAW3U,MAAM,mBAAmB;QAClD,OAAO;AACL,iBAAO,KAAK2U,WAAW3U,MAAM,mBAAmB;QAClD;MACF;MAEAilC,uCAGE;AACA,cAAML,YAAY,KAAK1tB,MAAMgX;AAC7B,aAAKhX,MAAMgX,SAAS;AACpB,aAAK2O,OAAM,EAAS;AACpB,YAAI58B,OAAO;AACX,YAAIilC,YAAY;AAChB,YAAI,KAAKtU,MAAK,EAAU,GAAG;AACzB,eAAK1Z,MAAMgX,SAAS0W;AACpBM,sBAAY,KAAKJ,mBAAkB;QACrC,OAAO;AACL7kC,iBAAO,KAAK4kC,cAAa;AACzB,eAAK3tB,MAAMgX,SAAS0W;AACpB,cAAI,KAAKhU,MAAK,EAAU,GAAG;AACzBsU,wBAAY,KAAKJ,mBAAkB;UACrC;QACF;AACA,eAAO,CAAC7kC,MAAMilC,SAAS;MACzB;MAEAC,sBACEnlC,MACoB;AACpB,aAAK+mB,KAAI;AACT,aAAKqe,sBAAsBplC,MAAkB,IAAI;AACjD,eAAO,KAAK2U,WAAW3U,MAAM,cAAc;MAC7C;MAEAqlC,yBACErlC,MACuB;AACvB,aAAK+mB,KAAI;AAET,cAAM9S,KAAMjU,KAAKiU,KAAK,KAAKqxB,gBAAe;AAE1C,cAAMC,WAAW,KAAK9wB,UAAS;AAC/B,cAAM+wB,gBAAgB,KAAK/wB,UAAS;AAEpC,YAAI,KAAKmc,MAAK,EAAM,GAAG;AACrB2U,mBAAS5xB,iBAAiB,KAAK8xB,kCAAiC;QAClE,OAAO;AACLF,mBAAS5xB,iBAAiB;QAC5B;AAEA,aAAKkpB,OAAM,EAAU;AACrB,cAAM6I,MAAM,KAAKC,4BAA2B;AAC5CJ,iBAAS/yB,SAASkzB,IAAIlzB;AACtB+yB,iBAAS/1B,OAAOk2B,IAAIl2B;AACpB+1B,iBAASK,OAAOF,IAAI7lB;AACpB,aAAKgd,OAAM,EAAU;AAErB,SAAC0I,SAASM,YAAY7lC,KAAKklC,SAAS,IAClC,KAAKD,qCAAoC;AAE3CO,sBAAcM,iBAAiB,KAAKnxB,WAClC4wB,UACA,wBACF;AAEAtxB,WAAG6xB,iBAAiB,KAAKnxB,WAAW6wB,eAAe,gBAAgB;AAEnE,aAAKjtB,iBAAiBtE,EAAE;AACxB,aAAK0oB,UAAS;AAEd,aAAKjU,MAAMC,YACT3oB,KAAKiU,GAAG5N,MAAI,MAEZrG,KAAKiU,GAAG9F,IAAIvQ,KACd;AAEA,eAAO,KAAK+W,WAAW3U,MAAM,iBAAiB;MAChD;MAEA+lC,iBACE/lC,MACAgmC,cACe;AACf,YAAI,KAAKpV,MAAK,EAAU,GAAG;AACzB,iBAAO,KAAKuU,sBAAsBnlC,IAAI;QACvC,WAAU,KAAK4wB,MAAK,EAAa,GAAG;AACnC,iBAAO,KAAKyU,yBAAyBrlC,IAAI;QAC1C,WAAU,KAAK4wB,MAAK,EAAQ,GAAG;AAC9B,iBAAO,KAAKqV,yBAAyBjmC,IAAI;QAC1C,WAAU,KAAKq8B,cAAa,GAAW,GAAG;AACzC,cAAI,KAAKzL,MAAK,EAAO,GAAG;AACtB,mBAAO,KAAKsV,8BAA8BlmC,IAAI;UAChD,OAAO;AACL,gBAAIgmC,cAAc;AAChB,mBAAK5vB,MACH2pB,WAAWgC,qBACX,KAAK7qB,MAAMC,eACb;YACF;AACA,mBAAO,KAAKgvB,uBAAuBnmC,IAAI;UACzC;QACD,WAAU,KAAK+7B,aAAY,GAAS,GAAG;AACtC,iBAAO,KAAKqK,0BAA0BpmC,IAAI;QAC3C,WAAU,KAAK+7B,aAAY,GAAW,GAAG;AACxC,iBAAO,KAAKsK,2BAA2BrmC,IAAI;QAC5C,WAAU,KAAK+7B,aAAY,GAAc,GAAG;AAC3C,iBAAO,KAAKuK,0BAA0BtmC,IAAI;QAC3C,WAAU,KAAK4wB,MAAK,EAAW,GAAG;AACjC,iBAAO,KAAK2V,kCAAkCvmC,MAAMgmC,YAAY;QAClE,OAAO;AACL,eAAK5gC,WAAU;QACjB;MACF;MAEA6gC,yBACEjmC,MACuB;AACvB,aAAK+mB,KAAI;AACT/mB,aAAKiU,KAAK,KAAKuyB,mCACc,IAC7B;AACA,aAAK9d,MAAMC,YACT3oB,KAAKiU,GAAG5N,MAAI,GAEZrG,KAAKiU,GAAG9F,IAAIvQ,KACd;AACA,aAAK++B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,iBAAiB;MAChD;MAEAmmC,uBACEnmC,MACqB;AACrB,aAAK0oB,MAAMF,MAAK,CAAgB;AAEhC,YAAI,KAAKoI,MAAK,GAAU,GAAG;AACzB5wB,eAAKiU,KAAK,MAAMwyB,cAAa;QAC/B,OAAO;AACLzmC,eAAKiU,KAAK,KAAKqxB,gBAAe;QAChC;AAEA,cAAMoB,WAAY1mC,KAAKmT,OAAO,KAAKsB,UAAS;AAE5C,cAAMtB,OAAQuzB,SAASvzB,OAAO,CAAA;AAC9B,aAAK0pB,OAAM,CAAU;AACrB,eAAO,CAAC,KAAKjM,MAAK,CAAU,GAAG;AAC7B,cAAI8V,YAAW,KAAKjyB,UAAS;AAE7B,cAAI,KAAKmc,MAAK,EAAW,GAAG;AAC1B,iBAAK7J,KAAI;AACT,gBAAI,CAAC,KAAKgV,aAAqB,GAAA,KAAK,CAAC,KAAKnL,MAAK,EAAW,GAAG;AAC3D,mBAAKxa,MACH2pB,WAAW8B,qCACX,KAAK3qB,MAAMC,eACb;YACF;AACA,kBAAMwvB,YAAYD,SAAQ;UAC5B,OAAO;AACL,iBAAKpK,iBAAgB,KAEnByD,WAAWsD,mCACb;AAEAqD,YAAAA,YAAW,KAAKX,iBAAiBW,WAAU,IAAI;UACjD;AAEAvzB,eAAKS,KAAK8yB,SAAQ;QACpB;AAEA,aAAKhe,MAAMD,KAAI;AAEf,aAAKoU,OAAM,CAAU;AAErB,aAAKloB,WAAW+xB,UAAU,gBAAgB;AAE1C,YAAIrmC,OAAiC;AACrC,YAAIumC,kBAAkB;AACtBzzB,aAAKqhB,QAAQgP,iBAAe;AAC1B,cAAID,eAAeC,WAAW,GAAG;AAC/B,gBAAInjC,SAAS,YAAY;AACvB,mBAAK+V,MAAM2pB,WAAWE,4BAA4BuD,WAAW;YAC/D;AACAnjC,mBAAO;UACT,WAAWmjC,YAAYvjC,SAAS,wBAAwB;AACtD,gBAAI2mC,iBAAiB;AACnB,mBAAKxwB,MAAM2pB,WAAWO,+BAA+BkD,WAAW;YAClE;AACA,gBAAInjC,SAAS,MAAM;AACjB,mBAAK+V,MAAM2pB,WAAWE,4BAA4BuD,WAAW;YAC/D;AACAnjC,mBAAO;AACPumC,8BAAkB;UACpB;QACF,CAAC;AAED5mC,aAAKK,OAAOA,QAAQ;AACpB,eAAO,KAAKsU,WAAW3U,MAAM,eAAe;MAC9C;MAEAumC,kCACEvmC,MACAgmC,cACgC;AAChC,aAAKnJ,OAAM,EAAW;AAEtB,YAAI,KAAKtJ,IAAG,EAAY,GAAG;AACzB,cAAI,KAAK3C,MAAkB,EAAA,KAAK,KAAKA,MAAe,EAAA,GAAG;AAGrD5wB,iBAAKwX,cAAc,KAAKuuB,iBAAiB,KAAKtxB,UAAS,CAAE;UAC3D,OAAO;AAELzU,iBAAKwX,cAAc,KAAKqtB,cAAa;AACrC,iBAAKlI,UAAS;UAChB;AACA38B,eAAK6mC,UAAU;AAEf,iBAAO,KAAKlyB,WAAW3U,MAAM,0BAA0B;QACzD,OAAO;AACL,cACE,KAAK4wB,MAAe,EAAA,KACpB,KAAKkW,MAAK,MACR,KAAK/K,aAAY,GAAS,KAAK,KAAKA,aAAY,GAAc,MAC9D,CAACiK,cACH;AACA,kBAAM1sB,QAAQ,KAAKpC,MAAMhK;AAKzB,kBAAM,KAAKkJ,MACT2pB,WAAWoD,8BACX,KAAKjsB,MAAM3B,UACX;cACE6tB,uBAAuB9pB;cACvB8nB,YAAYuC,kBAAkBrqB,KAAK;YACrC,CACF;UACF;AAEA,cACE,KAAKsX,MAAK,EAAQ,KAClB,KAAKA,MAAkB,EAAA,KACvB,KAAKA,MAAK,EAAU,KACpB,KAAKmL,aAAuB,GAAA,GAC5B;AACA/7B,iBAAKwX,cAAc,KAAKuuB,iBAAiB,KAAKtxB,UAAS,CAAE;AACzDzU,iBAAK6mC,UAAU;AAEf,mBAAO,KAAKlyB,WAAW3U,MAAM,0BAA0B;UACzD,WACE,KAAK4wB,MAAK,EAAQ,KAClB,KAAKA,MAAK,CAAU,KACpB,KAAKmL,aAA0B,GAAA,KAC/B,KAAKA,aAAY,GAAS,KAC1B,KAAKA,aAAY,GAAW,GAC5B;AACA/7B,mBAAO,KAAK+W,YACV/W,MACiB,IACnB;AACA,gBAAIA,KAAKC,SAAS,0BAA0B;AAC1CD,mBAAKC,OAAO;AACZD,mBAAK6mC,UAAU;AACf,qBAAO7mC,KAAK+mC;YACd;AAEA/mC,iBAAKC,OAAO,YAAYD,KAAKC;AAE7B,mBAAOD;UACT;QACF;AAEA,aAAKoF,WAAU;MACjB;MAEA8gC,8BACElmC,MAC4B;AAC5B,aAAK+mB,KAAI;AACT,aAAKuV,iBAAgB,GAAY;AACjCt8B,aAAK8lC,iBAAiB,KAAKkB,wBAAuB;AAClD,aAAKrK,UAAS;AAEd,eAAO,KAAKhoB,WAAW3U,MAAM,sBAAsB;MACrD;MAEAomC,0BACEpmC,MACwB;AACxB,aAAK+mB,KAAI;AACT,cAAMkgB,WAAW,KAAKC,mBACpBlnC,IACF;AAEAinC,iBAAShnC,OAAO;AAChB,eAAOgnC;MACT;MAEAZ,2BACErmC,MACyB;AACzB,aAAK+mB,KAAI;AACT,cAAMkgB,WAAW,KAAKE,oBACpBnnC,MACA,IACF;AAEAinC,iBAAShnC,OAAO;AAChB,eAAOgnC;MACT;MAEAX,0BACEtmC,MACwB;AACxB,aAAK+mB,KAAI;AACT,aAAKqe,sBAAsBplC,MAAoB,KAAK;AACpD,eAAO,KAAK2U,WAAW3U,MAAM,kBAAkB;MACjD;MAIAolC,sBAAsBplC,MAA6BonC,SAAwB;AACzEpnC,aAAKiU,KAAK,KAAKozB,8BACC,CAACD,SACG,IACpB;AAEA,aAAK1e,MAAMC,YACT3oB,KAAKiU,GAAG5N,MACR+gC,UAAO,KAAA,MACPpnC,KAAKiU,GAAG9F,IAAIvQ,KACd;AAEA,YAAI,KAAKgzB,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAK8xB,kCAAiC;QAC9D,OAAO;AACLzlC,eAAK2T,iBAAiB;QACxB;AAEA3T,aAAKsnC,UAAU,CAAA;AAEf,YAAI,KAAK/T,IAAG,EAAY,GAAG;AACzB,aAAG;AACDvzB,iBAAKsnC,QAAQ1zB,KAAK,KAAK2zB,0BAA2B,CAAA;UACnD,SAAQ,CAACH,WAAW,KAAK7T,IAAG,EAAS;QACxC;AAEA,YAAI6T,SAAS;AACXpnC,eAAKwnC,aAAa,CAAA;AAClBxnC,eAAKynC,SAAS,CAAA;AAEd,cAAI,KAAKpL,cAAa,GAAW,GAAG;AAClC,eAAG;AACDr8B,mBAAKynC,OAAO7zB,KAAK,KAAK2zB,0BAA2B,CAAA;YACnD,SAAS,KAAKhU,IAAG,EAAS;UAC5B;AAEA,cAAI,KAAK8I,cAAa,GAAe,GAAG;AACtC,eAAG;AACDr8B,mBAAKwnC,WAAW5zB,KAAK,KAAK2zB,0BAA2B,CAAA;YACvD,SAAS,KAAKhU,IAAG,EAAS;UAC5B;QACF;AAEAvzB,aAAKmT,OAAO,KAAKu0B,oBAAoB;UACnCC,aAAaP;UACbQ,YAAY;UACZC,aAAa;UACbC,YAAYV;UACZW,cAAc;QAChB,CAAC;MACH;MAEAR,4BAAoD;AAClD,cAAMvnC,OAAO,KAAKyU,UAAS;AAE3BzU,aAAKiU,KAAK,KAAK+zB,iCAAgC;AAC/C,YAAI,KAAKpX,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAKs0B,oCAAmC;QAChE,OAAO;AACLjoC,eAAK2T,iBAAiB;QACxB;AAEA,eAAO,KAAKgB,WAAW3U,MAAM,kBAAkB;MACjD;MAEAkoC,mBAAmBloC,MAAgD;AACjE,aAAKolC,sBAAsBplC,MAAoB,KAAK;AACpD,eAAO,KAAK2U,WAAW3U,MAAM,sBAAsB;MACrD;MAEAmoC,mBAAmB7hB,MAAc;AAC/B,YAAIA,SAAS,KAAK;AAChB,eAAKlQ,MACH2pB,WAAW8C,8BACX,KAAK3rB,MAAM3B,QACb;QACF;MACF;MAEA6yB,kBAAkB9hB,MAAc/Q,UAAoBiC,aAAuB;AACzE,YAAI,CAACsoB,cAAcrZ,IAAIH,IAAI,EAAG;AAE9B,aAAKlQ,MACHoB,cACIuoB,WAAWG,qBACXH,WAAW6C,wBACfrtB,UACA;UACE4qB,cAAc7Z;QAChB,CACF;MACF;MAEA+gB,8BACEgB,SACA7wB,aACc;AACd,aAAK4wB,kBACH,KAAKlxB,MAAMhK,OACX,KAAKgK,MAAM3B,UACXiC,WACF;AACA,eAAO,KAAK8tB,gBAAgB+C,OAAO;MACrC;MAIAnB,mBAAmBlnC,MAAgD;AACjEA,aAAKiU,KAAK,KAAKozB,8BACC,OACI,IACpB;AACA,aAAK3e,MAAMC,YACT3oB,KAAKiU,GAAG5N,MAAI,MAEZrG,KAAKiU,GAAG9F,IAAIvQ,KACd;AAEA,YAAI,KAAKgzB,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAK8xB,kCAAiC;QAC9D,OAAO;AACLzlC,eAAK2T,iBAAiB;QACxB;AAEA3T,aAAKsoC,QAAQ,KAAK5D,yBAAwB,EAAM;AAChD,aAAK/H,UAAS;AAEd,eAAO,KAAKhoB,WAAW3U,MAAM,WAAW;MAC1C;MAEAmnC,oBACEnnC,MACAuoC,SACkB;AAClB,aAAKjM,iBAAgB,GAAS;AAC9Bt8B,aAAKiU,KAAK,KAAKozB,8BACC,MACI,IACpB;AACA,aAAK3e,MAAMC,YACT3oB,KAAKiU,GAAG5N,MAAI,MAEZrG,KAAKiU,GAAG9F,IAAIvQ,KACd;AAEA,YAAI,KAAKgzB,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAK8xB,kCAAiC;QAC9D,OAAO;AACLzlC,eAAK2T,iBAAiB;QACxB;AAGA3T,aAAKwoC,YAAY;AACjB,YAAI,KAAK5X,MAAK,EAAS,GAAG;AACxB5wB,eAAKwoC,YAAY,KAAK9D,yBAAwB,EAAS;QACzD;AAEA1kC,aAAKyoC,WAAW;AAChB,YAAI,CAACF,SAAS;AACZvoC,eAAKyoC,WAAW,KAAK/D,yBAAwB,EAAM;QACrD;AACA,aAAK/H,UAAS;AAEd,eAAO,KAAKhoB,WAAW3U,MAAM,YAAY;MAC3C;MAIA0oC,uBAAuBC,iBAA0B,OAAwB;AACvE,cAAMC,eAAe,KAAK1xB,MAAM3B;AAEhC,cAAMvV,OAAO,KAAKyU,UAAS;AAE3B,cAAMo0B,WAAW,KAAKC,kBAAiB;AAEvC,cAAMC,QAAQ,KAAKvC,mCAAkC;AACrDxmC,aAAKqG,OAAO0iC,MAAM1iC;AAElBrG,aAAK6oC,WAAWA;AAEhB7oC,aAAKgpC,QAAQD,MAAMjD;AAEnB,YAAI,KAAKlV,MAAK,EAAM,GAAG;AACrB,eAAK2C,IAAG,EAAM;AAEdvzB,eAAK6mC,UAAU,KAAKhC,cAAa;QACnC,OAAO;AACL,cAAI8D,gBAAgB;AAClB,iBAAKvyB,MAAM2pB,WAAW+B,yBAAyB8G,YAAY;UAC7D;QACF;AAEA,eAAO,KAAKj0B,WAAW3U,MAAM,eAAe;MAC9C;MAEAylC,oCAAgE;AAC9D,cAAMb,YAAY,KAAK1tB,MAAMgX;AAC7B,cAAMluB,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKwS,SAAS,CAAA;AAEd,aAAK0E,MAAMgX,SAAS;AAGpB,YAAI,KAAK0C,MAAW,EAAA,KAAK,KAAKA,MAAoB,GAAA,GAAG;AACnD,eAAK7J,KAAI;QACX,OAAO;AACL,eAAK3hB,WAAU;QACjB;AAEA,YAAI6jC,kBAAkB;AAEtB,WAAG;AACD,gBAAMC,gBAAgB,KAAKR,uBAAuBO,eAAe;AAEjEjpC,eAAKwS,OAAOoB,KAAKs1B,aAAa;AAE9B,cAAIA,cAAcrC,SAAS;AACzBoC,8BAAkB;UACpB;AAEA,cAAI,CAAC,KAAKrY,MAAK,EAAM,GAAG;AACtB,iBAAKiM,OAAM,EAAS;UACtB;QACD,SAAQ,CAAC,KAAKjM,MAAK,EAAM;AAC1B,aAAKiM,OAAM,EAAM;AAEjB,aAAK3lB,MAAMgX,SAAS0W;AAEpB,eAAO,KAAKjwB,WAAW3U,MAAM,0BAA0B;MACzD;MAEAioC,sCAAoE;AAClE,cAAMjoC,OAAO,KAAKyU,UAAS;AAC3B,cAAMmwB,YAAY,KAAK1tB,MAAMgX;AAC7BluB,aAAKwS,SAAS,CAAA;AAEd,aAAK0E,MAAMgX,SAAS;AAEpB,aAAK2O,OAAM,EAAM;AACjB,cAAMsM,wBAAwB,KAAKjyB,MAAMiX;AACzC,aAAKjX,MAAMiX,qBAAqB;AAChC,eAAO,CAAC,KAAKyC,MAAK,EAAM,GAAG;AACzB5wB,eAAKwS,OAAOoB,KAAK,KAAKixB,cAAe,CAAA;AACrC,cAAI,CAAC,KAAKjU,MAAK,EAAM,GAAG;AACtB,iBAAKiM,OAAM,EAAS;UACtB;QACF;AACA,aAAK3lB,MAAMiX,qBAAqBgb;AAChC,aAAKtM,OAAM,EAAM;AAEjB,aAAK3lB,MAAMgX,SAAS0W;AAEpB,eAAO,KAAKjwB,WAAW3U,MAAM,4BAA4B;MAC3D;MAEAopC,+CAA6E;AAC3E,cAAMppC,OAAO,KAAKyU,UAAS;AAC3B,cAAMmwB,YAAY,KAAK1tB,MAAMgX;AAC7BluB,aAAKwS,SAAS,CAAA;AAEd,aAAK0E,MAAMgX,SAAS;AAEpB,aAAK2O,OAAM,EAAM;AACjB,eAAO,CAAC,KAAKjM,MAAK,EAAM,GAAG;AACzB5wB,eAAKwS,OAAOoB,KAAK,KAAKy1B,qCAAsC,CAAA;AAC5D,cAAI,CAAC,KAAKzY,MAAK,EAAM,GAAG;AACtB,iBAAKiM,OAAM,EAAS;UACtB;QACF;AACA,aAAKA,OAAM,EAAM;AAEjB,aAAK3lB,MAAMgX,SAAS0W;AAEpB,eAAO,KAAKjwB,WAAW3U,MAAM,4BAA4B;MAC3D;MAEAspC,yBAA8C;AAC5C,cAAMtpC,OAAO,KAAKyU,UAAS;AAC3B,aAAK6nB,iBAAgB,GAAc;AAEnCt8B,aAAKsnC,UAAU,CAAA;AACf,YAAI,KAAK/T,IAAG,EAAY,GAAG;AACzB,aAAG;AACDvzB,iBAAKsnC,QAAQ1zB,KAAK,KAAK2zB,0BAA2B,CAAA;UACpD,SAAS,KAAKhU,IAAG,EAAS;QAC5B;AAEAvzB,aAAKmT,OAAO,KAAKu0B,oBAAoB;UACnCC,aAAa;UACbC,YAAY;UACZC,aAAa;UACbC,YAAY;UACZC,cAAc;QAChB,CAAC;AAED,eAAO,KAAKpzB,WAAW3U,MAAM,yBAAyB;MACxD;MAEAupC,6BAA2C;AACzC,eAAO,KAAK3Y,MAAK,GAAO,KAAK,KAAKA,MAAe,GAAA,IAC7C,MAAM6V,cAAe,IACrB,KAAKnB,gBAAgB,IAAI;MAC/B;MAEAkE,2BACExpC,MACAypC,UACAZ,UACyB;AACzB7oC,aAAK0pC,SAASD;AAGd,YAAI,KAAK/V,UAAS,EAAGzzB,SAAI,IAAe;AACtCD,eAAKiU,KAAK,KAAKs1B,2BAA0B;AACzCvpC,eAAK+G,MAAM,KAAK29B,yBAAwB;QAC1C,OAAO;AACL1kC,eAAKiU,KAAK;AACVjU,eAAK+G,MAAM,KAAK89B,cAAa;QAC/B;AACA,aAAKhI,OAAM,CAAY;AACvB78B,aAAKkN,QAAQ,KAAKw3B,yBAAwB;AAC1C1kC,aAAK6oC,WAAWA;AAEhB,eAAO,KAAKl0B,WAAW3U,MAAM,mBAAmB;MAClD;MAEA2pC,gCACE3pC,MACAypC,UAC8B;AAC9BzpC,aAAK0pC,SAASD;AAEdzpC,aAAKiU,KAAK,KAAKs1B,2BAA0B;AACzC,aAAK1M,OAAM,CAAY;AACvB,aAAKA,OAAM,CAAY;AACvB,YAAI,KAAKjM,MAAW,EAAA,KAAK,KAAKA,MAAe,EAAA,GAAG;AAC9C5wB,eAAKuS,SAAS;AACdvS,eAAKuW,WAAW;AAChBvW,eAAKkN,QAAQ,KAAK08B,6BAChB,KAAKjK,YAAY3/B,KAAKmO,IAAIvQ,KAAK,CACjC;QACF,OAAO;AACLoC,eAAKuS,SAAS;AACd,cAAI,KAAKghB,IAAG,EAAY,GAAG;AACzBvzB,iBAAKuW,WAAW;UAClB;AACAvW,eAAKkN,QAAQ,KAAKw3B,yBAAwB;QAC5C;AACA,eAAO,KAAK/vB,WAAW3U,MAAM,wBAAwB;MACvD;MAEA4pC,6BACE5pC,MAC8B;AAC9BA,aAAKwS,SAAS,CAAA;AACdxS,aAAKwP,OAAO;AACZxP,aAAK2T,iBAAiB;AACtB3T,aAAK4lC,OAAO;AAEZ,YAAI,KAAKhV,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAK8xB,kCAAiC;QAC9D;AAEA,aAAK5I,OAAM,EAAU;AACrB,YAAI,KAAKjM,MAAK,EAAS,GAAG;AACxB5wB,eAAK4lC,OAAO,KAAKiE,2BAAuC,IAAI;AAE5D7pC,eAAK4lC,KAAKv/B,OAAO;AACjB,cAAI,CAAC,KAAKuqB,MAAK,EAAU,GAAG;AAC1B,iBAAKiM,OAAM,EAAS;UACtB;QACF;AACA,eAAO,CAAC,KAAKjM,MAAe,EAAA,KAAK,CAAC,KAAKA,MAAK,EAAY,GAAG;AACzD5wB,eAAKwS,OAAOoB,KAAK,KAAKi2B,2BAA2B,KAAK,CAAC;AACvD,cAAI,CAAC,KAAKjZ,MAAK,EAAU,GAAG;AAC1B,iBAAKiM,OAAM,EAAS;UACtB;QACF;AAEA,YAAI,KAAKtJ,IAAG,EAAY,GAAG;AACzBvzB,eAAKwP,OAAO,KAAKq6B,2BAA2B,KAAK;QACnD;AACA,aAAKhN,OAAM,EAAU;AACrB78B,aAAK6lC,aAAa,KAAKnB,yBAAwB;AAE/C,eAAO,KAAK/vB,WAAW3U,MAAM,wBAAwB;MACvD;MAEA8pC,gCACE9pC,MACAypC,UAC8B;AAC9B,cAAMM,YAAY,KAAKt1B,UAAS;AAChCzU,aAAK0pC,SAASD;AACdzpC,aAAKkN,QAAQ,KAAK08B,6BAA6BG,SAAS;AACxD,eAAO,KAAKp1B,WAAW3U,MAAM,wBAAwB;MACvD;MAEA0nC,oBAAoB;QAClBC;QACAC;QACAC;QACAC;QACAC;MAOF,GAA+B;AAC7B,cAAMnD,YAAY,KAAK1tB,MAAMgX;AAC7B,aAAKhX,MAAMgX,SAAS;AAEpB,cAAM3C,YAAY,KAAK9W,UAAS;AAEhC8W,kBAAUye,iBAAiB,CAAA;AAC3Bze,kBAAUS,aAAa,CAAA;AACvBT,kBAAU0e,WAAW,CAAA;AACrB1e,kBAAU2e,gBAAgB,CAAA;AAE1B,YAAIC;AACJ,YAAIC;AACJ,YAAIC,UAAU;AACd,YAAIzC,cAAc,KAAKhX,MAAK,CAAa,GAAG;AAC1C,eAAKiM,OAAM,CAAa;AACxBsN,qBAAuB;AACvBC,kBAAQ;QACV,OAAO;AACL,eAAKvN,OAAM,CAAU;AACrBsN,qBAAoB;AACpBC,kBAAQ;QACV;AAEA7e,kBAAU6e,QAAQA;AAElB,eAAO,CAAC,KAAKxZ,MAAMuZ,QAAQ,GAAG;AAC5B,cAAIV,WAAW;AACf,cAAIa,gBAA6C;AACjD,cAAIC,kBAA+C;AACnD,gBAAMvqC,OAAO,KAAKyU,UAAS;AAE3B,cAAIqzB,cAAc,KAAK/L,aAAY,GAAU,GAAG;AAC9C,kBAAMrI,YAAY,KAAKA,UAAS;AAEhC,gBAAIA,UAAUzzB,SAAI,MAAiByzB,UAAUzzB,SAAI,IAAkB;AACjE,mBAAK8mB,KAAI;AACTujB,8BAAgB,KAAKpzB,MAAM3B;AAC3BoyB,4BAAc;YAChB;UACF;AAEA,cAAIA,eAAe,KAAK5L,aAAY,GAAW,GAAG;AAChD,kBAAMrI,YAAY,KAAKA,UAAS;AAGhC,gBAAIA,UAAUzzB,SAAI,MAAiByzB,UAAUzzB,SAAI,IAAkB;AACjE,mBAAK8mB,KAAI;AACT0iB,yBAAW;YACb;UACF;AAEA,gBAAMZ,WAAW,KAAKC,kBAAiB;AAEvC,cAAI,KAAKvV,IAAG,CAAY,GAAG;AACzB,gBAAI+W,iBAAiB,MAAM;AACzB,mBAAKllC,WAAWklC,aAAa;YAC/B;AACA,gBAAI,KAAK/W,IAAG,CAAY,GAAG;AACzB,kBAAIsV,UAAU;AACZ,qBAAKzjC,WAAWyjC,SAAS16B,IAAIvQ,KAAK;cACpC;AACA2tB,wBAAU2e,cAAct2B,KACtB,KAAK+1B,gCAAgC3pC,MAAMypC,QAAQ,CACrD;YACF,OAAO;AACLle,wBAAU0e,SAASr2B,KACjB,KAAK41B,2BAA2BxpC,MAAMypC,UAAUZ,QAAQ,CAC1D;YACF;UACF,WAAW,KAAKjY,MAAK,EAAU,KAAK,KAAKA,MAAK,EAAM,GAAG;AACrD,gBAAI0Z,iBAAiB,MAAM;AACzB,mBAAKllC,WAAWklC,aAAa;YAC/B;AACA,gBAAIzB,UAAU;AACZ,mBAAKzjC,WAAWyjC,SAAS16B,IAAIvQ,KAAK;YACpC;AACA2tB,sBAAUye,eAAep2B,KACvB,KAAKk2B,gCAAgC9pC,MAAMypC,QAAQ,CACrD;UACF,OAAO;AACL,gBAAIppC,OAAO;AAEX,gBAAI,KAAK07B,aAAoB,EAAA,KAAK,KAAKA,aAAoB,GAAA,GAAG;AAC5D,oBAAMrI,YAAY,KAAKA,UAAS;AAChC,kBAAI1P,2BAA2B0P,UAAUzzB,IAAI,GAAG;AAC9CI,uBAAO,KAAK6W,MAAMhK;AAClB,qBAAK6Z,KAAI;cACX;YACF;AAEA,kBAAMyjB,gBAAgB,KAAKC,4BACzBzqC,MACAypC,UACAa,eACAzB,UACAxoC,MACAwnC,aACAE,gBAAY,OAAZA,eAAgB,CAACqC,KACnB;AAEA,gBAAII,kBAAkB,MAAM;AAC1BH,wBAAU;AACVE,gCAAkB,KAAKrzB,MAAMC;YAC/B,OAAO;AACLoU,wBAAUS,WAAWpY,KAAK42B,aAAa;YACzC;UACF;AAEA,eAAKE,wBAAuB;AAE5B,cACEH,mBACA,CAAC,KAAK3Z,MAAK,CAAU,KACrB,CAAC,KAAKA,MAAK,CAAa,GACxB;AACA,iBAAKxa,MACH2pB,WAAW4C,mCACX4H,eACF;UACF;QACF;AAEA,aAAK1N,OAAOsN,QAAQ;AAOpB,YAAItC,aAAa;AACftc,oBAAU8e,UAAUA;QACtB;AAEA,cAAMza,MAAM,KAAKjb,WAAW4W,WAAW,sBAAsB;AAE7D,aAAKrU,MAAMgX,SAAS0W;AAEpB,eAAOhV;MACT;MAEA6a,4BACEzqC,MACAypC,UACAa,eACAzB,UACAxoC,MACAwnC,aACAE,cACkE;AAClE,YAAI,KAAKxU,IAAG,EAAY,GAAG;AACzB,gBAAMoX,iBACJ,KAAK/Z,MAAK,EAAS,KACnB,KAAKA,MAAK,EAAQ,KAClB,KAAKA,MAAe,CAAA,KACpB,KAAKA,MAAK,CAAa;AAEzB,cAAI+Z,gBAAgB;AAClB,gBAAI,CAAC9C,aAAa;AAChB,mBAAKzxB,MACH2pB,WAAW4B,wBACX,KAAKzqB,MAAMC,eACb;YACF,WAAW,CAAC4wB,cAAc;AACxB,mBAAK3xB,MACH2pB,WAAW2B,oBACX,KAAKxqB,MAAMC,eACb;YACF;AACA,gBAAI0xB,UAAU;AACZ,mBAAKzyB,MAAM2pB,WAAW6B,iBAAiBiH,QAAQ;YACjD;AAEA,mBAAO;UACT;AAEA,cAAI,CAAChB,aAAa;AAChB,iBAAKzxB,MACH2pB,WAAWgD,sBACX,KAAK7rB,MAAMC,eACb;UACF;AACA,cAAImzB,iBAAiB,MAAM;AACzB,iBAAKllC,WAAWklC,aAAa;UAC/B;AACA,cAAIzB,UAAU;AACZ,iBAAKzyB,MAAM2pB,WAAWoC,gBAAgB0G,QAAQ;UAChD;AAEA7oC,eAAKgP,WAAW,KAAK61B,cAAa;AAClC,iBAAO,KAAKlwB,WAAW3U,MAAM,0BAA0B;QACzD,OAAO;AACLA,eAAK+G,MAAM,KAAKwiC,2BAA0B;AAC1CvpC,eAAK0pC,SAASD;AACdzpC,eAAK4qC,QAAQN,iBAAiB;AAC9BtqC,eAAKK,OAAOA;AAEZ,cAAIkW,WAAW;AACf,cAAI,KAAKqa,MAAW,EAAA,KAAK,KAAKA,MAAe,EAAA,GAAG;AAE9C5wB,iBAAKuS,SAAS;AAEd,gBAAI+3B,iBAAiB,MAAM;AACzB,mBAAKllC,WAAWklC,aAAa;YAC/B;AACA,gBAAIzB,UAAU;AACZ,mBAAKzjC,WAAWyjC,SAAS16B,IAAIvQ,KAAK;YACpC;AAEAoC,iBAAKkN,QAAQ,KAAK08B,6BAChB,KAAKjK,YAAY3/B,KAAKmO,IAAIvQ,KAAK,CACjC;AACA,gBAAIyC,SAAS,SAASA,SAAS,OAAO;AACpC,mBAAKwqC,4BAA4B7qC,IAAI;YACvC;AAEA,gBACE,CAAC6nC,eACD7nC,KAAK+G,IAAIV,SAAS,iBAClBrG,KAAKkN,MAAM04B,MACX;AACA,mBAAKxvB,MACH2pB,WAAWsC,8BACXriC,KAAKkN,MAAM04B,IACb;YACF;UACF,OAAO;AACL,gBAAIvlC,SAAS,OAAQ,MAAK+E,WAAU;AAEpCpF,iBAAKuS,SAAS;AAEd,gBAAI,KAAKghB,IAAG,EAAY,GAAG;AACzBhd,yBAAW;YACb;AACAvW,iBAAKkN,QAAQ,KAAKw3B,yBAAwB;AAC1C1kC,iBAAK6oC,WAAWA;UAClB;AAEA7oC,eAAKuW,WAAWA;AAEhB,iBAAO,KAAK5B,WAAW3U,MAAM,oBAAoB;QACnD;MACF;MAIA6qC,4BACEhN,UAGM;AACN,cAAMiN,aAAajN,SAASx9B,SAAS,QAAQ,IAAI;AACjD,cAAMiX,SACJumB,SAAS3wB,MAAMsF,OAAO8E,UAAUumB,SAAS3wB,MAAMsC,OAAO,IAAI;AAE5D,YAAIquB,SAAS3wB,MAAM04B,MAAM;AACvB,eAAKxvB,MACHynB,SAASx9B,SAAS,QACd0/B,WAAWwB,4BACXxB,WAAWmC,2BACfrE,SAAS3wB,MAAM04B,IACjB;QACF;AAEA,YAAItuB,WAAWwzB,YAAY;AACzB,eAAK10B,MACHynB,SAASx9B,SAAS,QACdsP,OAAO7O,iBACP6O,OAAO5O,gBACX88B,QACF;QACF;AAEA,YAAIA,SAASx9B,SAAS,SAASw9B,SAAS3wB,MAAMsC,MAAM;AAClD,eAAK4G,MAAMzG,OAAO3O,wBAAwB68B,QAAQ;QACpD;MACF;MAEA6M,0BAAgC;AAC9B,YACE,CAAC,KAAKnX,IAAG,EAAQ,KACjB,CAAC,KAAKA,IAAY,EAAA,KAClB,CAAC,KAAK3C,MAAK,CAAU,KACrB,CAAC,KAAKA,MAAkB,CAAA,GACxB;AACA,eAAKxrB,WAAU;QACjB;MACF;MAEA4iC,iCACEzyB,UACAtB,IAC8C;AAAA,YAAA82B;AAC9C,SAAAA,YAAAx1B,aAAQ,OAAAw1B,YAARx1B,WAAa,KAAK2B,MAAM3B;AACxB,YAAIvV,OACFiU,MAAM,KAAKozB,8BAA8B,IAAI;AAE/C,eAAO,KAAK9T,IAAG,EAAO,GAAG;AACvB,gBAAMyX,QAAQ,KAAKrL,YAA2CpqB,QAAQ;AACtEy1B,gBAAMC,gBAAgBjrC;AACtBgrC,gBAAM/2B,KAAK,KAAKozB,8BAA8B,IAAI;AAClDrnC,iBAAO,KAAK2U,WAAWq2B,OAAO,yBAAyB;QACzD;AAEA,eAAOhrC;MACT;MAEAkrC,qBACE31B,UACAtB,IAC6B;AAC7B,cAAMjU,OAAO,KAAK2/B,YAAyCpqB,QAAQ;AAEnEvV,aAAK2T,iBAAiB;AACtB3T,aAAKiU,KAAK,KAAK+zB,iCAAiCzyB,UAAUtB,EAAE;AAE5D,YAAI,KAAK2c,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAKs0B,oCAAmC;QAChE;AAEA,eAAO,KAAKtzB,WAAW3U,MAAM,uBAAuB;MACtD;MAEAmrC,sBAAkD;AAChD,cAAMnrC,OAAO,KAAKyU,UAAS;AAC3B,aAAKooB,OAAM,EAAW;AACtB78B,aAAKgP,WAAW,KAAKo8B,qBAAoB;AACzC,eAAO,KAAKz2B,WAAW3U,MAAM,sBAAsB;MACrD;MAEAqrC,qBAAgD;AAC9C,cAAMrrC,OAAO,KAAKyU,UAAS;AAC3BzU,aAAK2Y,QAAQ,CAAA;AACb,aAAKkkB,OAAM,CAAY;AAEvB,eAAO,KAAK3lB,MAAM3I,MAAM,KAAK+I,UAAU,CAAC,KAAKsZ,MAAK,CAAY,GAAG;AAC/D5wB,eAAK2Y,MAAM/E,KAAK,KAAKixB,cAAe,CAAA;AACpC,cAAI,KAAKjU,MAAK,CAAY,EAAG;AAC7B,eAAKiM,OAAM,EAAS;QACtB;AACA,aAAKA,OAAM,CAAY;AACvB,eAAO,KAAKloB,WAAW3U,MAAM,qBAAqB;MACpD;MAEA6pC,2BAA2ByB,OAAyC;AAClE,YAAIjlC,OAAO;AACX,YAAIkQ,WAAW;AACf,YAAIuvB,iBAAiB;AACrB,cAAM9lC,OAAO,KAAKyU,UAAS;AAC3B,cAAM82B,KAAK,KAAK7X,UAAS;AACzB,cAAM8X,SAAS,KAAKt0B,MAAMjX,SAAiB;AAE3C,YAAIsrC,GAAGtrC,SAAI,MAAiBsrC,GAAGtrC,SAAI,IAAkB;AACnD,cAAIurC,UAAU,CAACF,OAAO;AACpB,iBAAKl1B,MAAM2pB,WAAWwC,sBAAsBviC,IAAI;UAClD;AACAqG,iBAAO,KAAKi/B,gBAAgBkG,MAAM;AAClC,cAAI,KAAKjY,IAAG,EAAY,GAAG;AACzBhd,uBAAW;AACX,gBAAIi1B,QAAQ;AACV,mBAAKp1B,MAAM2pB,WAAWuC,2BAA2BtiC,IAAI;YACvD;UACF;AACA8lC,2BAAiB,KAAKpB,yBAAwB;QAChD,OAAO;AACLoB,2BAAiB,KAAKjB,cAAa;QACrC;AACA7kC,aAAKqG,OAAOA;AACZrG,aAAKuW,WAAWA;AAChBvW,aAAK8lC,iBAAiBA;AACtB,eAAO,KAAKnxB,WAAW3U,MAAM,mBAAmB;MAClD;MAEAyrC,mCACExrC,MACyB;AACzB,cAAMD,OAAO,KAAK2/B,YAAqC1/B,KAAKkO,IAAIvQ,KAAK;AACrEoC,aAAKqG,OAAO;AACZrG,aAAKuW,WAAW;AAChBvW,aAAK8lC,iBAAiB7lC;AACtB,eAAO,KAAK0U,WAAW3U,MAAM,mBAAmB;MAClD;MAEA2lC,4BAA4BnzB,SAAoC,CAAA,GAI9D;AACA,YAAIhD,OAAmD;AACvD,YAAIqQ,QAAoD;AACxD,YAAI,KAAK+Q,MAAK,EAAS,GAAG;AACxB/Q,kBAAQ,KAAKgqB,2BAAuC,IAAI;AAExDhqB,gBAAMxZ,OAAO;AACb,cAAI,CAAC,KAAKuqB,MAAK,EAAU,GAAG;AAC1B,iBAAKiM,OAAM,EAAS;UACtB;QACF;AACA,eAAO,CAAC,KAAKjM,MAAe,EAAA,KAAK,CAAC,KAAKA,MAAK,EAAY,GAAG;AACzDpe,iBAAOoB,KAAK,KAAKi2B,2BAA2B,KAAK,CAAC;AAClD,cAAI,CAAC,KAAKjZ,MAAK,EAAU,GAAG;AAC1B,iBAAKiM,OAAM,EAAS;UACtB;QACF;AACA,YAAI,KAAKtJ,IAAG,EAAY,GAAG;AACzB/jB,iBAAO,KAAKq6B,2BAA2B,KAAK;QAC9C;AACA,eAAO;UAAEr3B;UAAQhD;UAAMqQ;;MACzB;MAEA6rB,0BACEn2B,UACAvV,MACAiU,IACY;AACZ,gBAAQA,GAAG5N,MAAI;UACb,KAAK;AACH,mBAAO,KAAKsO,WAAW3U,MAAM,mBAAmB;UAElD,KAAK;UACL,KAAK;AACH,mBAAO,KAAK2U,WAAW3U,MAAM,uBAAuB;UAEtD,KAAK;AACH,mBAAO,KAAK2U,WAAW3U,MAAM,qBAAqB;UAEpD,KAAK;AACH,mBAAO,KAAK2U,WAAW3U,MAAM,qBAAqB;UAEpD,KAAK;AACH,mBAAO,KAAK2U,WAAW3U,MAAM,sBAAsB;UAErD,KAAK;AACH,mBAAO,KAAK2U,WAAW3U,MAAM,sBAAsB;UAErD,KAAK;AACH,mBAAO,KAAK2U,WAAW3U,MAAM,sBAAsB;UAErD;AACE,iBAAKmoC,mBAAmBl0B,GAAG5N,IAAI;AAC/B,mBAAO,KAAK6kC,qBAAqB31B,UAAUtB,EAAE;QACjD;MACF;MAKAm3B,uBAAmC;AACjC,cAAM71B,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMvV,OAAO,KAAKyU,UAAS;AAC3B,YAAIixB;AACJ,YAAIzlC;AACJ,YAAI0rC,gBAAgB;AACpB,cAAMxC,wBAAwB,KAAKjyB,MAAMiX;AAEzC,gBAAQ,KAAKjX,MAAMjX,MAAI;UACrB,KAAA;AACE,mBAAO,KAAKynC,oBAAoB;cAC9BC,aAAa;cACbC,YAAY;cACZC,aAAa;cACbC,YAAY;cACZC,cAAc;YAChB,CAAC;UAEH,KAAA;AACE,mBAAO,KAAKL,oBAAoB;cAC9BC,aAAa;cACbC,YAAY;cACZC,aAAa;cACbC,YAAY;cACZC,cAAc;YAChB,CAAC;UAEH,KAAA;AACE,iBAAK7wB,MAAMiX,qBAAqB;AAChCluB,mBAAO,KAAKorC,mBAAkB;AAC9B,iBAAKn0B,MAAMiX,qBAAqBgb;AAChC,mBAAOlpC;UAET,KAAA,IAAY;AACV,kBAAMD,QAAO,KAAKyU,UAAS;AAC3BzU,YAAAA,MAAK2T,iBAAiB,KAAK8xB,kCAAiC;AAC5D,iBAAK5I,OAAM,EAAU;AACrB6I,kBAAM,KAAKC,4BAA2B;AACtC3lC,YAAAA,MAAKwS,SAASkzB,IAAIlzB;AAClBxS,YAAAA,MAAKwP,OAAOk2B,IAAIl2B;AAChBxP,YAAAA,MAAK4lC,OAAOF,IAAI7lB;AAChB,iBAAKgd,OAAM,EAAU;AAErB,iBAAKA,OAAM,EAAS;AAEpB78B,YAAAA,MAAK6lC,aAAa,KAAKhB,cAAa;AAEpC,mBAAO,KAAKlwB,WAAW3U,OAAM,wBAAwB;UACvD;UAEA,KAAA,IAAgB;AACd,kBAAMA,QAAO,KAAKyU,UAAS;AAC3B,iBAAKsS,KAAI;AAGT,gBAAI,CAAC,KAAK6J,MAAe,EAAA,KAAK,CAAC,KAAKA,MAAK,EAAY,GAAG;AACtD,kBAAI/M,kBAAkB,KAAK3M,MAAMjX,IAAI,KAAK,KAAK2wB,MAAK,EAAS,GAAG;AAC9D,sBAAMrkB,QAAQ,KAAKmnB,UAAS,EAAGzzB;AAC/B0rC,gCAAgBp/B,UAAqB,MAAIA,UAAkB;cAC7D,OAAO;AACLo/B,gCAAgB;cAClB;YACF;AAEA,gBAAIA,eAAe;AACjB,mBAAKz0B,MAAMiX,qBAAqB;AAChCluB,qBAAO,KAAK4kC,cAAa;AACzB,mBAAK3tB,MAAMiX,qBAAqBgb;AAGhC,kBACE,KAAKjyB,MAAMiX,sBACX,EACE,KAAKyC,MAAc,EAAA,KAClB,KAAKA,MAAe,EAAA,KAAK,KAAK8C,UAAS,EAAGzzB,SAAkB,KAE/D;AACA,qBAAK48B,OAAM,EAAU;AACrB,uBAAO58B;cACT,OAAO;AAEL,qBAAKszB,IAAG,EAAS;cACnB;YACF;AAEA,gBAAItzB,MAAM;AACRylC,oBAAM,KAAKC,4BAA4B,CACrC,KAAK8F,mCAAmCxrC,IAAI,CAAC,CAC9C;YACH,OAAO;AACLylC,oBAAM,KAAKC,4BAA2B;YACxC;AAEA3lC,YAAAA,MAAKwS,SAASkzB,IAAIlzB;AAClBxS,YAAAA,MAAKwP,OAAOk2B,IAAIl2B;AAChBxP,YAAAA,MAAK4lC,OAAOF,IAAI7lB;AAEhB,iBAAKgd,OAAM,EAAU;AAErB,iBAAKA,OAAM,EAAS;AAEpB78B,YAAAA,MAAK6lC,aAAa,KAAKhB,cAAa;AAEpC7kC,YAAAA,MAAK2T,iBAAiB;AAEtB,mBAAO,KAAKgB,WAAW3U,OAAM,wBAAwB;UACvD;UAEA,KAAA;AACE,mBAAO,KAAKqR,aACV,KAAK6F,MAAMhK,OACX,6BACF;UAEF,KAAA;UACA,KAAA;AACElN,iBAAKkN,QAAQ,KAAK0jB,MAAK,EAAS;AAChC,iBAAK7J,KAAI;AACT,mBAAO,KAAKpS,WACV3U,MACA,8BACF;UAEF,KAAA;AACE,gBAAI,KAAKkX,MAAMhK,UAAU,KAAK;AAC5B,mBAAK6Z,KAAI;AACT,kBAAI,KAAK6J,MAAK,GAAO,GAAG;AACtB,uBAAO,KAAKgb,mBACV,CAAC,KAAK10B,MAAMhK,OACZ,+BACAlN,IACF;cACF;AAEA,kBAAI,KAAK4wB,MAAK,GAAU,GAAG;AACzB,uBAAO,KAAKgb,mBACV,CAAC,KAAK10B,MAAMhK,OACZ,+BACAlN,IACF;cACF;AAEA,oBAAM,KAAKoW,MACT2pB,WAAWiD,8BACX,KAAK9rB,MAAM3B,QACb;YACF;AACA,iBAAKnQ,WAAU;AACf;UACF,KAAA;AACE,mBAAO,KAAKiM,aACV,KAAK6F,MAAMhK,OACX,6BACF;UAEF,KAAA;AACE,mBAAO,KAAKmE,aACV,KAAK6F,MAAMhK,OACX,6BACF;UAEF,KAAA;AACE,iBAAK6Z,KAAI;AACT,mBAAO,KAAKpS,WAAW3U,MAAM,oBAAoB;UAEnD,KAAA;AACE,iBAAK+mB,KAAI;AACT,mBAAO,KAAKpS,WAAW3U,MAAM,2BAA2B;UAE1D,KAAA;AACE,iBAAK+mB,KAAI;AACT,mBAAO,KAAKpS,WAAW3U,MAAM,oBAAoB;UAEnD,KAAA;AACE,iBAAK+mB,KAAI;AACT,mBAAO,KAAKpS,WAAW3U,MAAM,sBAAsB;UAErD,KAAA;AACE,mBAAO,KAAKmrC,oBAAmB;UAEjC;AACE,gBAAI7mB,eAAe,KAAKpN,MAAMjX,IAAI,GAAG;AACnC,oBAAMqZ,QAAQsL,eAAe,KAAK1N,MAAMjX,IAAI;AAC5C,mBAAK8mB,KAAI;AACT,qBAAO,MAAM8kB,iBAAiB7rC,MAA8BsZ,KAAK;YAClE,WAAUuK,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AAC7C,kBAAI,KAAK87B,aAAY,GAAc,GAAG;AACpC,uBAAO,KAAKuN,uBAAsB;cACpC;AAEA,qBAAO,KAAKoC,0BACVn2B,UACAvV,MACA,KAAKslC,gBAAe,CACtB;YACF;QACJ;AAEA,aAAKlgC,WAAU;MACjB;MAEA0mC,uBAAmC;AACjC,cAAMv2B,WAAW,KAAK2B,MAAM3B;AAC5B,YAAItV,OAAO,KAAKmrC,qBAAoB;AACpC,YAAIW,4BAA4B;AAChC,gBACG,KAAKnb,MAAiB,CAAA,KAAK,KAAKA,MAAoB,EAAA,MACrD,CAAC,KAAK2L,mBAAkB,GACxB;AACA,gBAAMv8B,OAAO,KAAK2/B,YAAuCpqB,QAAQ;AACjE,gBAAMgB,WAAW,KAAKgd,IAAG,EAAe;AACxCwY,sCAA4BA,6BAA6Bx1B;AACzD,eAAKsmB,OAAM,CAAY;AACvB,cAAI,CAACtmB,YAAY,KAAKqa,MAAK,CAAY,GAAG;AACxC5wB,iBAAK05B,cAAcz5B;AACnB,iBAAK8mB,KAAI;AACT9mB,mBAAO,KAAK0U,WAAW3U,MAAM,qBAAqB;UACpD,OAAO;AACLA,iBAAKgsC,aAAa/rC;AAClBD,iBAAKisC,YAAY,KAAKpH,cAAa;AACnC,iBAAKhI,OAAM,CAAY;AACvB,gBAAIkP,2BAA2B;AAC7B/rC,mBAAKuW,WAAWA;AAChBtW,qBAAO,KAAK0U,WAEV3U,MACA,2BACF;YACF,OAAO;AACLC,qBAAO,KAAK0U,WAEV3U,MACA,mBACF;YACF;UACF;QACF;AACA,eAAOC;MACT;MAEAisC,sBAAkC;AAChC,cAAMlsC,OAAO,KAAKyU,UAAS;AAC3B,YAAI,KAAK8e,IAAG,EAAY,GAAG;AACzBvzB,eAAK8lC,iBAAiB,KAAKoG,oBAAmB;AAC9C,iBAAO,KAAKv3B,WAAW3U,MAAM,wBAAwB;QACvD,OAAO;AACL,iBAAO,KAAK8rC,qBAAoB;QAClC;MACF;MAEAK,qCAAiD;AAC/C,cAAMC,QAAQ,KAAKF,oBAAmB;AACtC,YAAI,CAAC,KAAKh1B,MAAMiX,sBAAsB,KAAKoF,IAAY,EAAA,GAAG;AAExD,gBAAMvzB,OAAO,KAAK2/B,YAChByM,MAAMj+B,IAAIvQ,KACZ;AACAoC,eAAKwS,SAAS,CAAC,KAAKi5B,mCAAmCW,KAAK,CAAC;AAC7DpsC,eAAKwP,OAAO;AACZxP,eAAK4lC,OAAO;AACZ5lC,eAAK6lC,aAAa,KAAKhB,cAAa;AACpC7kC,eAAK2T,iBAAiB;AACtB,iBAAO,KAAKgB,WAAW3U,MAAM,wBAAwB;QACvD;AACA,eAAOosC;MACT;MAEAC,4BAAwC;AACtC,cAAMrsC,OAAO,KAAKyU,UAAS;AAC3B,aAAK8e,IAAG,EAAc;AACtB,cAAMtzB,OAAO,KAAKksC,mCAAkC;AACpDnsC,aAAK2Y,QAAQ,CAAC1Y,IAAI;AAClB,eAAO,KAAKszB,IAAG,EAAc,GAAG;AAC9BvzB,eAAK2Y,MAAM/E,KAAK,KAAKu4B,mCAAoC,CAAA;QAC3D;AACA,eAAOnsC,KAAK2Y,MAAMrB,WAAW,IACzBrX,OACA,KAAK0U,WAAW3U,MAAM,4BAA4B;MACxD;MAEAssC,qBAAiC;AAC/B,cAAMtsC,OAAO,KAAKyU,UAAS;AAC3B,aAAK8e,IAAG,EAAa;AACrB,cAAMtzB,OAAO,KAAKosC,0BAAyB;AAC3CrsC,aAAK2Y,QAAQ,CAAC1Y,IAAI;AAClB,eAAO,KAAKszB,IAAG,EAAa,GAAG;AAC7BvzB,eAAK2Y,MAAM/E,KAAK,KAAKy4B,0BAA2B,CAAA;QAClD;AACA,eAAOrsC,KAAK2Y,MAAMrB,WAAW,IACzBrX,OACA,KAAK0U,WAAW3U,MAAM,qBAAqB;MACjD;MAEA6kC,gBAA4B;AAC1B,cAAMD,YAAY,KAAK1tB,MAAMgX;AAC7B,aAAKhX,MAAMgX,SAAS;AACpB,cAAMjuB,OAAO,KAAKqsC,mBAAkB;AACpC,aAAKp1B,MAAMgX,SAAS0W;AACpB,eAAO3kC;MACT;MAEAopC,uCAAmD;AACjD,YAAI,KAAKnyB,MAAMjX,SAAgB,OAAI,KAAKiX,MAAMhK,UAAU,KAAK;AAC3D,gBAAMqI,WAAW,KAAK2B,MAAM3B;AAC5B,gBAAMvV,OAAO,KAAKslC,gBAAe;AACjC,iBAAO,KAAK4F,qBAAqB31B,UAAUvV,IAAI;QACjD,OAAO;AACL,iBAAO,KAAK6kC,cAAa;QAC3B;MACF;MAEAmC,0BAA4C;AAC1C,cAAMhnC,OAAO,KAAKyU,UAAS;AAC3BzU,aAAK8lC,iBAAiB,KAAKpB,yBAAwB;AACnD,eAAO,KAAK/vB,WAAW3U,MAAM,gBAAgB;MAC/C;MAEAwmC,mCACE+F,wBACc;AACd,cAAMxD,QAAQwD,yBACV,KAAKjH,gBAAe,IACpB,KAAK+B,8BAA6B;AACtC,YAAI,KAAKzW,MAAK,EAAS,GAAG;AACxBmY,gBAAMjD,iBAAiB,KAAKkB,wBAAuB;AACnD,eAAKzuB,iBAAiBwwB,KAAK;QAC7B;AACA,eAAOA;MACT;MAEAyD,oBAAoBxsC,MAA0C;AAC3DA,aAAK4R,WAA4Bk0B,iBAAiB9lC,KAAK8lC;AAExD,aAAKvtB,iBAAiBvY,KAAK4R,YAAY5R,KAAK8lC,eAAe33B,IAAItQ,GAAG;AAElE,eAAOmC,KAAK4R;MACd;MAEAk3B,oBAAuD;AACrD,YAAID,WAAW;AACf,YAAI,KAAKjY,MAAK,EAAW,GAAG;AAC1BiY,qBAAW,KAAKp0B,UAAS;AACzB,cAAI,KAAKyC,MAAMhK,UAAU,KAAK;AAC5B27B,qBAASxoC,OAAO;UAClB,OAAO;AACLwoC,qBAASxoC,OAAO;UAClB;AACA,eAAK0mB,KAAI;AACT,iBAAO,KAAKpS,WAAWk0B,UAAU,UAAU;QAC7C;AACA,eAAOA;MACT;MAMA10B,kBACEnU,MACAysC,qBACAp4B,WAAoB,OACd;AACN,YAAIo4B,qBAAqB;AACvB,eAAKC,iCAAiC1sC,MAAM,MAC1C,MAAMmU,kBAAkBnU,MAAM,MAAMqU,QAAQ,CAC9C;AACA;QACF;AAEA,cAAMF,kBAAkBnU,MAAM,OAAOqU,QAAQ;MAC/C;MAEAs4B,2BAME3sC,MAAiBC,MAAiBoU,WAAoB,OAAU;AAChE,YAAI,KAAKuc,MAAK,EAAS,GAAG;AACxB,gBAAM2U,WAAW,KAAK9wB,UAAS;AAE/B,WACE8wB,SAASO,gBAET9lC,KAAKklC,SAAS,IACZ,KAAKD,qCAAoC;AAE7CjlC,eAAK6lC,aAAaN,SAASO,iBACvB,KAAKnxB,WAAW4wB,UAAU,gBAAgB,IAC1C;QACN;AAEA,eAAO,MAAMoH,2BAA2B3sC,MAAMC,MAAMoU,QAAQ;MAC9D;MAGAu4B,mBAAmBp8B,OAAwC;AAEzD,YAAI,KAAK0G,MAAM+O,UAAU,KAAK8V,aAA0B,GAAA,GAAG;AACzD,gBAAMrI,YAAY,KAAKA,UAAS;AAChC,cAAI3P,2BAA2B2P,UAAUzzB,IAAI,GAAG;AAC9C,kBAAMD,OAAO,KAAKyU,UAAS;AAC3B,iBAAKsS,KAAI;AACT,mBAAO,KAAKmhB,mBAAmBloC,IAAI;UACrC;QACF,WACmC,KAAK2pB,QAAQ/a,IAAI,MAAM,EAAEi+B,SAC1D,KAAK9Q,aAAY,GAAS,GAC1B;AACA,gBAAM/7B,OAAO,KAAKyU,UAAS;AAC3B,eAAKsS,KAAI;AACT,iBAAO,KAAK+lB,yBAAyB9sC,IAAI;QAC3C;AACA,cAAMgS,OAAO,MAAM46B,mBAAmBp8B,KAAK;AAE3C,YAAI,KAAK8zB,eAAela,UAAa,CAAC,KAAK3X,iBAAiBT,IAAI,GAAG;AACjE,eAAKsyB,aAAa;QACpB;AACA,eAAOtyB;MACT;MAGA+6B,yBACE/sC,MACAgtC,MACAh2B,YACuB;AACvB,YAAIg2B,KAAK/sC,SAAS,cAAc;AAC9B,cAAI+sC,KAAK3mC,SAAS,WAAW;AAC3B,gBACE,KAAKuqB,MAAK,EAAU,KACpB/M,kBAAkB,KAAK3M,MAAMjX,IAAI,KACjC,KAAK2wB,MAAkB,EAAA,KACvB,KAAKA,MAAK,EAAQ,KAClB,KAAKA,MAAK,EAAW,GACrB;AAEA,qBAAO,KAAKmV,iBAAiB/lC,IAAI;YACnC;UACD,WAAU6jB,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AAC7C,gBAAI+sC,KAAK3mC,SAAS,aAAa;AAE7B,qBAAO,KAAK6hC,mBAAmBloC,IAAI;YACrC,WAAWgtC,KAAK3mC,SAAS,QAAQ;AAE/B,qBAAO,KAAK6gC,mBAAmBlnC,IAAI;YACrC,WAAWgtC,KAAK3mC,SAAS,UAAU;AAEjC,qBAAO,KAAK8gC,oBAAoBnnC,MAAM,KAAK;YAC7C;UACF;QACF;AAEA,eAAO,MAAM+sC,yBAAyB/sC,MAAMgtC,MAAMh2B,UAAU;MAC9D;MAGAi2B,+BAAwC;AACtC,cAAM;UAAEhtC;YAAS,KAAKiX;AACtB,YACEkN,mCAAmCnkB,IAAI,KACL,KAAK0pB,QAAQ/a,IAAI,MAAM,EAAEi+B,SACzD5sC,SAAI,KACN;AACA,iBAAO,CAAC,KAAKiX,MAAMyX;QACrB;AACA,eAAO,MAAMse,6BAA4B;MAC3C;MAEAC,2BAAoC;AAClC,cAAM;UAAEjtC;YAAS,KAAKiX;AACtB,YACEkN,mCAAmCnkB,IAAI,KACL,KAAK0pB,QAAQ/a,IAAI,MAAM,EAAEi+B,SACzD5sC,SAAI,KACN;AACA,iBAAO,KAAKiX,MAAMyX;QACpB;AAEA,eAAO,MAAMue,yBAAwB;MACvC;MAEAC,+BAA+B;AAC7B,YACmC,KAAKxjB,QAAQ/a,IAAI,MAAM,EAAEi+B,SAC1D,KAAK9Q,aAAY,GAAS,GAC1B;AACA,gBAAM/7B,OAAO,KAAKyU,UAAS;AAC3B,eAAKsS,KAAI;AACT,iBAAO,KAAK+lB,yBAAyB9sC,IAAI;QAC3C;AACA,eAAO,MAAMmtC,6BAA4B;MAC3C;MAEAC,iBACEJ,MAEAz3B,UACAC,qBACc;AACd,YAAI,CAAC,KAAKob,MAAK,EAAY,EAAG,QAAOoc;AAErC,YAAI,KAAK91B,MAAM+W,wBAAwB;AACrC,gBAAMkO,SAAS,KAAKnI,kBAAiB;AAIrC,cACEmI,WAA0B,MAC1BA,WAAM,MACNA,WAA0B,MAC1BA,WAAM,IACN;AAEA,iBAAKkR,2BAA2B73B,mBAAmB;AACnD,mBAAOw3B;UACT;QACF;AAEA,aAAKnQ,OAAM,EAAY;AACvB,cAAM3lB,QAAQ,KAAKA,MAAM1I,MAAK;AAC9B,cAAM8+B,oBAAoB,KAAKp2B,MAAM+V;AACrC,cAAMjtB,OAAO,KAAK2/B,YAAqCpqB,QAAQ;AAC/D,YAAI;UAAEg4B;UAAYC;QAAO,IAAI,KAAKC,8BAA6B;AAC/D,YAAI,CAACC,OAAOhc,OAAO,IAAI,KAAKic,wBAAwBJ,UAAU;AAE9D,YAAIC,UAAU9b,QAAQpa,SAAS,GAAG;AAChC,gBAAM2V,YAAY,CAAC,GAAGqgB,iBAAiB;AAEvC,cAAI5b,QAAQpa,SAAS,GAAG;AACtB,iBAAKJ,QAAQA;AACb,iBAAKA,MAAM+V,YAAYA;AAEvB,qBAAStH,IAAI,GAAGA,IAAI+L,QAAQpa,QAAQqO,KAAK;AACvCsH,wBAAUrZ,KAAK8d,QAAQ/L,CAAC,EAAE/nB,KAAK;YACjC;AAEA,aAAC;cAAE2vC;cAAYC;YAAO,IAAI,KAAKC,8BAA6B;AAC5D,aAACC,OAAOhc,OAAO,IAAI,KAAKic,wBAAwBJ,UAAU;UAC5D;AAEA,cAAIC,UAAUE,MAAMp2B,SAAS,GAAG;AAM9B,iBAAKlB,MAAM2pB,WAAWC,2BAA2B9oB,MAAM3B,QAAQ;UACjE;AAEA,cAAIi4B,UAAUE,MAAMp2B,WAAW,GAAG;AAChC,iBAAKJ,QAAQA;AACb+V,sBAAUrZ,KAAK85B,MAAM,CAAC,EAAE9vC,KAAK;AAC7B,iBAAKsZ,MAAM+V,YAAYA;AACvB,aAAC;cAAEsgB;cAAYC;YAAO,IAAI,KAAKC,8BAA6B;UAC9D;QACF;AAEA,aAAKE,wBAAwBJ,YAAY,IAAI;AAE7C,aAAKr2B,MAAM+V,YAAYqgB;AACvB,aAAKzQ,OAAM,EAAS;AAEpB78B,aAAK6lB,OAAOmnB;AACZhtC,aAAKutC,aAAaA;AAClBvtC,aAAK4tC,YAAY,KAAKlB,iCAAiC1sC,MAAM,MAC3D,KAAK6tC,iBAAiBzjB,QAAWA,MAAS,CAC5C;AAEA,eAAO,KAAKzV,WAAW3U,MAAM,uBAAuB;MACtD;MAEAytC,gCAGE;AACA,aAAKv2B,MAAMgW,0BAA0BtZ,KAAK,KAAKsD,MAAMtZ,KAAK;AAE1D,cAAM2vC,aAAa,KAAKO,wBAAuB;AAC/C,cAAMN,SAAS,CAAC,KAAK5c,MAAK,EAAS;AAEnC,aAAK1Z,MAAMgW,0BAA0BhI,IAAG;AAExC,eAAO;UAAEqoB;UAAYC;;MACvB;MASAG,wBACE3tC,MACA+tC,iBAC4D;AAC5D,cAAMzU,QAAQ,CAACt5B,IAAI;AACnB,cAAMguC,SAAsC,CAAA;AAE5C,eAAO1U,MAAMhiB,WAAW,GAAG;AACzB,gBAAMtX,QAAOs5B,MAAMpU,IAAG;AACtB,cACEllB,MAAKC,SAAS,6BACdD,MAAKmT,KAAKlT,SAAS,kBACnB;AACA,gBAAID,MAAK2T,kBAAkB,CAAC3T,MAAK6lC,YAAY;AAE3C,mBAAKoI,sBAAsBjuC,KAAI;YACjC,OAAO;AACLguC,qBAAOp6B,KAAK5T,KAAI;YAClB;AACAs5B,kBAAM1lB,KAAK5T,MAAKmT,IAAI;UACtB,WAAWnT,MAAKC,SAAS,yBAAyB;AAChDq5B,kBAAM1lB,KAAK5T,MAAKutC,UAAU;AAC1BjU,kBAAM1lB,KAAK5T,MAAK4tC,SAAS;UAC3B;QACF;AAEA,YAAIG,iBAAiB;AACnBC,iBAAOxZ,QAAQx0B,CAAAA,UAAQ,KAAKiuC,sBAAsBjuC,KAAI,CAAC;AACvD,iBAAO,CAACguC,QAAQ,CAAA,CAAE;QACpB;AAEA,eAAOjK,UAAUiK,QAAQhuC,CAAAA,UACvBA,MAAKwS,OAAO07B,MAAM9B,WAAS,KAAKx2B,aAAaw2B,OAAO,IAAI,CAAC,CAC3D;MACF;MAEA6B,sBAAsBjuC,MAAiC;AAAA,YAAAmuC;AACrD,aAAKC,iBAGHpuC,KAAKwS,SAAM27B,cACXnuC,KAAK8R,UAALq8B,OAAAA,SAAAA,YAAYE,kBACA,KACd;AAEA,aAAK3lB,MAAMF,MAAML,IAAAA,CAAoC;AAErD,cAAMmmB,YAAYtuC,MAAM,OAAO,IAAI;AACnC,aAAK0oB,MAAMD,KAAI;MACjB;MAEAikB,iCACE1sC,MACAkQ,QACG;AACH,YAAIq+B;AACJ,YAAI,KAAKr3B,MAAMgW,0BAA0BuK,SAASz3B,KAAKpC,KAAK,GAAG;AAC7D,eAAKsZ,MAAMgW,0BAA0BtZ,KAAK,KAAKsD,MAAMtZ,KAAK;AAC1D2wC,mBAASr+B,OAAK;AACd,eAAKgH,MAAMgW,0BAA0BhI,IAAG;QAC1C,OAAO;AACLqpB,mBAASr+B,OAAK;QAChB;AAEA,eAAOq+B;MACT;MAEAC,eACExuC,MACAuV,UACmD;AACnD,cAAM4pB,UAAU,MAAMqP,eAAexuC,MAAMuV,QAAQ;AACnD,YAAI,KAAKge,IAAG,EAAY,GAAG;AACxB4L,kBAAyB5oB,WAAW;AAIrC,eAAKgC,iBAAiBvY,IAAI;QAC5B;AAEA,YAAI,KAAK4wB,MAAK,EAAS,GAAG;AACxB,gBAAM6d,eAAe,KAAK9O,YAAkCpqB,QAAQ;AACpEk5B,uBAAa78B,aAAautB;AAC1BsP,uBAAa3I,iBAAiB,KAAKkB,wBAAuB;AAE1D,iBAAO,KAAKryB,WAAW85B,cAAc,oBAAoB;QAC3D;AAEA,eAAOtP;MACT;MAEAuP,wBAAwB1uC,MAAc;AACpC,YACGA,KAAKC,SAAS,wBACZD,KAAK0jC,eAAe,UAAU1jC,KAAK0jC,eAAe,aACpD1jC,KAAKC,SAAS,4BACbD,KAAK+mC,eAAe,UACrB/mC,KAAKC,SAAS,0BAA0BD,KAAK+mC,eAAe,QAC7D;AAGA;QACF;AAEA,cAAM2H,wBAAwB1uC,IAAI;MACpC;MAEA2uC,uBACE3uC,MACkC;AAClC,YAAI,KAAK+7B,aAAY,GAAS,GAAG;AAC/B/7B,eAAK+mC,aAAa;AAElB,gBAAM6H,kBAAkB,KAAKn6B,UAAS;AACtC,eAAKsS,KAAI;AAET,cAAI,KAAK6J,MAAK,CAAU,GAAG;AAEzB5wB,iBAAKqX,aAAa,KAAKw3B,sBACA,IACvB;AACA,kBAAMC,gBAAgB9uC,IAAI;AAC1B,mBAAO;UACT,OAAO;AAGL,mBAAO,KAAKknC,mBAAmB0H,eAAe;UAChD;QACD,WAAU,KAAK7S,aAAY,GAAW,GAAG;AACxC/7B,eAAK+mC,aAAa;AAElB,gBAAM6H,kBAAkB,KAAKn6B,UAAS;AACtC,eAAKsS,KAAI;AAGT,iBAAO,KAAKogB,oBAAoByH,iBAAiB,KAAK;QACvD,WAAU,KAAK7S,aAAY,GAAc,GAAG;AAC3C/7B,eAAK+mC,aAAa;AAClB,gBAAM6H,kBAAkB,KAAKn6B,UAAS;AACtC,eAAKsS,KAAI;AAET,iBAAO,KAAKmhB,mBAAmB0G,eAAe;QAChD,WACmC,KAAKjlB,QAAQ/a,IAAI,MAAM,EAAEi+B,SAC1D,KAAK9Q,aAAY,GAAS,GAC1B;AACA/7B,eAAK+mC,aAAa;AAClB,gBAAM6H,kBAAkB,KAAKn6B,UAAS;AACtC,eAAKsS,KAAI;AAET,iBAAO,KAAK+lB,yBAAyB8B,eAAe;QACtD,OAAO;AACL,iBAAO,MAAMD,uBAAuB3uC,IAAI;QAC1C;MACF;MAEA+uC,cACE/uC,MACmE;AACnE,YAAI,MAAM+uC,cAAc/uC,IAAI,EAAG,QAAO;AAEtC,YAAI,KAAK+7B,aAAY,GAAS,KAAK,KAAKrI,UAAW,EAACzzB,SAAI,IAAc;AAElED,eACA+mC,aAAa;AACf,eAAKhgB,KAAI;AACT,eAAKA,KAAI;AACT,iBAAO;QACT;AAEA,eAAO;MACT;MAEAioB,mCACEhvC,MAC0C;AAC1C,cAAM;UAAEuV;YAAa,KAAK2B;AAC1B,cAAM+3B,eAAe,MAAMD,mCAAmChvC,IAAI;AAClE,YAAIivC,gBAAgBjvC,KAAK+mC,eAAe,QAAQ;AAC9C,eAAK3hC,WAAWmQ,QAAQ;QAC1B;AACA,eAAO05B;MACT;MAEAC,aACElvC,MACAmvC,aACAC,YACA;AACA,cAAMF,aAAalvC,MAAMmvC,aAAaC,UAAU;AAChD,YAAI,KAAKxe,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAK8xB,kCAAiC;QAC9D;MACF;MAEA4J,iBACE/7B,WACAg8B,QACAp4B,OACM;AACN,cAAM;UAAE3B;YAAa,KAAK2B;AAC1B,YAAI,KAAK6kB,aAAY,GAAY,GAAG;AAClC,cAAI,MAAMwT,6BAA6Bj8B,WAAWg8B,MAAM,GAAG;AAEzD;UACF;AAEAA,iBAAO/G,UAAU;QACnB;AAEA,cAAM8G,iBAAiB/7B,WAAWg8B,QAAQp4B,KAAK;AAE/C,YAAIo4B,OAAO/G,SAAS;AAClB,cACE+G,OAAOrvC,SAAS,mBAChBqvC,OAAOrvC,SAAS,0BAChBqvC,OAAOrvC,SAAS,sBAChB;AACA,iBAAKmW,MAAM2pB,WAAWK,qBAAqB7qB,QAAQ;UACrD,WAAW+5B,OAAOpiC,OAAO;AACvB,iBAAKkJ,MAAM2pB,WAAWM,8BAA8BiP,OAAOpiC,KAAK;UAClE;QACF;MACF;MAEAsiC,WAAWlpB,MAAuB;AAChC,eAAOA,SAAS,cAAcA,SAAS;MACzC;MAEAmpB,eAAqB;AACnB,cAAMnpB,OAAO,MAAMsP,UAAS;AAC5B,cAAM8Z,WAAW,OAAOppB;AAGxB,YAAI,CAAC,KAAKkpB,WAAWlpB,IAAI,KAAK,CAAC,KAAKpP,MAAMgX,QAAQ;AAChD,eAAK9X,MAAMzG,OAAO/K,mBAAmB,KAAKsS,MAAM2X,YAAW,GAAI;YAC7D9wB,gBAAgB2xC;UAClB,CAAC;QACH;AAEA,aAAK9a,YAAqB8a,KAAAA,QAAQ;MACpC;MAGA7a,iBAAiB12B,OAAoB;AACnC,cAAM4oB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,YAAIpQ,UAAI,OAAiC4oB,SAAI,KAA4B;AACvE,eAAK8O,SAAuB,GAAA,CAAC;QAC/B,WACE,KAAK3e,MAAMgX,WACV/vB,UAA8B,MAAIA,UAAI,KACvC;AACA,eAAK03B,SAAS13B,UAAI,KAA0C,KAAA,IAAE,CAAC;QAChE,WAAU,KAAK+Y,MAAMgX,UAAU/vB,UAAI,IAA6B;AAC/D,cAAI4oB,SAAI,IAAoB;AAC1B,iBAAK8O,SAAyB,IAAA,CAAC;UACjC,OAAO;AAEL,iBAAKA,SAAsB,IAAA,CAAC;UAC9B;QACD,WACChP,gBAAgB1oB,OAAM4oB,MAAM,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,CAAC,GACrE;AACA,eAAK2I,MAAM3I,OAAO;AAClB,eAAKkhC,aAAY;QACnB,OAAO;AACL,gBAAM5a,iBAAiB12B,KAAI;QAC7B;MACF;MAEAyX,aAAa5V,MAAc6V,WAA8B;AACvD,YAAI7V,KAAKC,SAAS,sBAAsB;AACtC,iBAAO,KAAK2V,aAAa5V,KAAK4R,YAAYiE,SAAS;QACrD,OAAO;AACL,iBAAO,MAAMD,aAAa5V,MAAM6V,SAAS;QAC3C;MACF;MAEAC,aAAa9V,MAAc+V,QAAiB,OAAa;AACvD,YACE,CAACA,SACD/V,KAAKC,SAAS,0BACdD,KAAK2vC,KAAK1vC,SAAS,sBACnB;AACAD,eAAK2vC,OAAO,KAAKnD,oBAAoBxsC,KAAK2vC,IAAI;QAChD;AACA,cAAM75B,aAAa9V,MAAM+V,KAAK;MAChC;MAGAq4B,iBACEwB,UACAvB,kBACAt4B,OACM;AACN,iBAAS4P,IAAI,GAAGA,IAAIiqB,SAASt4B,QAAQqO,KAAK;AACxC,gBAAMqnB,OAAO4C,SAASjqB,CAAC;AACvB,eAAIqnB,QAAAA,OAAAA,SAAAA,KAAM/sC,UAAS,sBAAsB;AACvC2vC,qBAASjqB,CAAC,IAAI,KAAK6mB,oBAAoBQ,IAAI;UAC7C;QACF;AACA,cAAMoB,iBAAiBwB,UAAUvB,kBAAkBt4B,KAAK;MAC1D;MAIA85B,iBACED,UAGAE,qBAG8C;AAC9C,iBAASnqB,IAAI,GAAGA,IAAIiqB,SAASt4B,QAAQqO,KAAK;AAAA,cAAAoqB;AACxC,gBAAM/C,OAAO4C,SAASjqB,CAAC;AACvB,cACEqnB,QACAA,KAAK/sC,SAAS,wBACd,GAAA8vC,cAAC/C,KAAKl7B,UAALi+B,QAAAA,YAAYp9B,mBACZi9B,SAASt4B,SAAS,KAAK,CAACw4B,sBACzB;AACA,iBAAK15B,MAAM2pB,WAAW2C,mBAAmBsK,KAAKlH,cAAc;UAC9D;QACF;AAEA,eAAO8J;MACT;MAEAI,eACEC,OACAC,cACAC,SACA36B,qBACuC;AACvC,cAAMxV,OAAO,MAAMgwC,eACjBC,OACAC,cACAC,SACA36B,mBACF;AAOA,YAAI06B,gBAAgB,CAAC,KAAKh5B,MAAM+W,wBAAwB;AACtD,eAAK4hB,iBAAiB7vC,KAAK2qB,QAAQ;QACrC;AAEA,eAAO3qB;MACT;MAEAyV,YAAYxV,MAAcmwC,iBAA0Bz6B,SAAsB;AACxE,eACE1V,SAAS,wBACT,MAAMwV,YAAYxV,MAAMmwC,iBAAiBz6B,OAAO;MAEpD;MAGAd,mBAAmB7U,MAAwC;AACzD,YAAI,KAAK4wB,MAAK,EAAS,GAAG;AACxB5wB,eAAK8lC,iBAAiB,KAAKkB,wBAAuB;QACpD;AACA,eAAO,MAAMnyB,mBAAmB7U,IAAI;MACtC;MAEAgV,0BACEhV,MACwB;AACxB,YAAI,KAAK4wB,MAAK,EAAS,GAAG;AACxB5wB,eAAK8lC,iBAAiB,KAAKkB,wBAAuB;QACpD;AACA,eAAO,MAAMhyB,0BAA0BhV,IAAI;MAC7C;MAGAqwC,gBAAyB;AACvB,eAAO,KAAKzf,MAAW,EAAA,KAAK,MAAMyf,cAAa;MACjD;MAGAC,kBAA2B;AACzB,eAAO,KAAK1f,MAAc,EAAA,KAAK,MAAM0f,gBAAe;MACtD;MAEAC,uBAAuBh+B,QAAkD;AACvE,eAAO,CAAC,KAAKqe,MAAc,EAAA,KAAK,MAAM2f,uBAAuBh+B,MAAM;MACrE;MAGAc,gBACEC,WACAf,QACAgB,aACApB,SACAqB,eACAC,mBACM;AACN,YAAKlB,OAAes2B,UAAU;AAC5B,eAAKzjC,WAAYmN,OAAes2B,SAAS16B,IAAIvQ,KAAK;QACpD;AACA,eAAQ2U,OAAes2B;AACvB,YAAI,KAAKjY,MAAK,EAAM,GAAG;AACrBre,iBAAOoB,iBAAiB,KAAK8xB,kCAAiC;QAChE;AAEA,cAAMpyB,gBACJC,WACAf,QACAgB,aACApB,SACAqB,eACAC,iBACF;AAEA,YAAIlB,OAAOC,UAAUgB,eAAe;AAClC,gBAAMhB,SAASD,OAAOC;AACtB,cAAIA,OAAO8E,SAAS,KAAK,KAAKk5B,YAAYh+B,OAAO,CAAC,CAAC,GAAG;AACpD,iBAAK4D,MAAM2pB,WAAWsC,8BAA8B9vB,MAAM;UAC5D;QAEF,WAEEA,OAAOtS,SAAS,sBAChBuT,iBAEAjB,OAAOrF,MAAMsF,QACb;AAEA,gBAAMA,SAASD,OAAOrF,MAAMsF;AAC5B,cAAIA,OAAO8E,SAAS,KAAK,KAAKk5B,YAAYh+B,OAAO,CAAC,CAAC,GAAG;AACpD,iBAAK4D,MAAM2pB,WAAWsC,8BAA8B9vB,MAAM;UAC5D;QACF;MACF;MAEAk+B,uBACEn9B,WACAf,QACAgB,aACApB,SACM;AACN,YAAKI,OAAes2B,UAAU;AAC5B,eAAKzjC,WAAYmN,OAAes2B,SAAS16B,IAAIvQ,KAAK;QACpD;AACA,eAAQ2U,OAAes2B;AACvB,YAAI,KAAKjY,MAAK,EAAM,GAAG;AACrBre,iBAAOoB,iBAAiB,KAAK8xB,kCAAiC;QAChE;AAEA,cAAMgL,uBAAuBn9B,WAAWf,QAAQgB,aAAapB,OAAO;MACtE;MAGAu+B,gBAAgB1wC,MAAqB;AACnC,cAAM0wC,gBAAgB1wC,IAAI;AAC1B,YAAIA,KAAKgQ,cAAc,KAAK4gB,MAAW,EAAA,GAAG;AACxC5wB,eAAK2wC,sBAAsB,KAAK1I,oCAAmC;QACrE;AACA,YAAI,KAAKlM,aAAY,GAAe,GAAG;AACrC,eAAKhV,KAAI;AACT,gBAAM6pB,cAAwC5wC,KAAKwnC,aAAa,CAAA;AAChE,aAAG;AACD,kBAAMxnC,QAAO,KAAKyU,UAAS;AAC3BzU,YAAAA,MAAKiU,KAAK,KAAKozB,8BAA0C,IAAI;AAC7D,gBAAI,KAAKzW,MAAK,EAAM,GAAG;AACrB5wB,cAAAA,MAAK2T,iBAAiB,KAAKs0B,oCAAmC;YAChE,OAAO;AACLjoC,cAAAA,MAAK2T,iBAAiB;YACxB;AACAi9B,wBAAYh9B,KAAK,KAAKe,WAAW3U,OAAM,iBAAiB,CAAC;UAC3D,SAAS,KAAKuzB,IAAG,EAAS;QAC5B;MACF;MAEAsd,wBAAwBt+B,QAA8C;AACpE,cAAMs+B,wBAAwBt+B,MAAM;AACpC,cAAMC,SAAS,KAAKF,6BAA6BC,MAAM;AACvD,YAAIC,OAAO8E,SAAS,GAAG;AACrB,gBAAM80B,QAAQ55B,OAAO,CAAC;AACtB,cAAI,KAAKg+B,YAAYpE,KAAK,KAAK75B,OAAOlS,SAAS,OAAO;AACpD,iBAAK+V,MAAM2pB,WAAWwB,2BAA2B6K,KAAK;UACvD,WAAU,KAAKoE,YAAYpE,KAAK,GAAG;AAClC,iBAAKh2B,MAAM2pB,WAAWmC,2BAA2BkK,KAAK;UACxD;QACF;MACF;MAEA0E,gCACE9wC,MACM;AACNA,aAAK6oC,WAAW,KAAKC,kBAAiB;MACxC;MAGAiI,kBACE77B,MACAK,UACAhC,aACApB,SACAgD,WACAC,YACAI,qBACG;AACH,YAAKN,KAAa2zB,UAAU;AAC1B,eAAKzjC,WAAY8P,KAAa2zB,SAAS16B,IAAIvQ,KAAK;QAClD;AACA,eAAQsX,KAAa2zB;AAErB,YAAIl1B;AAGJ,YAAI,KAAKid,MAAK,EAAM,KAAK,CAACxb,YAAY;AACpCzB,2BAAiB,KAAK8xB,kCAAiC;AACvD,cAAI,CAAC,KAAK7U,MAAK,EAAU,EAAG,MAAKxrB,WAAU;QAC7C;AAEA,cAAMmpC,SAAS,MAAMwC,kBACnB77B,MACAK,UACAhC,aACApB,SACAgD,WACAC,YACAI,mBACF;AAGA,YAAI7B,gBAAgB;AAElB,WAAC46B,OAAOrhC,SAASqhC,QAAQ56B,iBAAiBA;QAC5C;AACA,eAAO46B;MACT;MAEAyC,uBAAuB5E,OAA6B;AAClD,YAAI,KAAK7Y,IAAG,EAAY,GAAG;AACzB,cAAI6Y,MAAMnsC,SAAS,cAAc;AAC/B,iBAAKmW,MAAM2pB,WAAWkC,mBAAmBmK,KAAK;UAChD;AACA,cAAI,KAAKoE,YAAYpE,KAAK,GAAG;AAC3B,iBAAKh2B,MAAM2pB,WAAWuC,2BAA2B8J,KAAK;UACxD;AAECA,gBAA8B71B,WAAW;QAC5C;AACA,YAAI,KAAKqa,MAAK,EAAS,GAAG;AACxBwb,gBAAMtG,iBAAiB,KAAKkB,wBAAuB;QACpD,WAAU,KAAKwJ,YAAYpE,KAAK,GAAG;AAClC,eAAKh2B,MAAM2pB,WAAWqC,6BAA6BgK,KAAK;QAC1D;AAEA,YAAI,KAAKxb,MAAK,EAAM,KAAK,KAAK4f,YAAYpE,KAAK,GAAG;AAChD,eAAKh2B,MAAM2pB,WAAWyC,oBAAoB4J,KAAK;QACjD;AAEA,aAAK7zB,iBAAiB6zB,KAAK;AAC3B,eAAOA;MACT;MAEA6E,kBACE17B,UACAo6B,MACW;AACX,cAAM3vC,OAAO,MAAMixC,kBAAkB17B,UAAUo6B,IAAI;AAEnD,YACE3vC,KAAKC,SAAS,uBACdD,KAAK8lC,kBACL9lC,KAAKsoC,MAAM1qC,QAAQoC,KAAK8lC,eAAeloC,OACvC;AACA,eAAKwY,MAAM2pB,WAAW0C,uBAAuBziC,KAAK8lC,cAAc;QAClE;AAEA,eAAO9lC;MACT;MAEAkxC,sBAAsBlxC,MAAmC;AACvD,cAAMkxC,sBAAsBlxC,IAAI;AAChC,YAAIA,KAAKmxC,UAAUnxC,KAAK0jC,eAAe,SAAS;AAC9C,eAAKttB,MACH2pB,WAAWyB,+BACXxhC,KAAKqX,WAAW,CAAC,EAAElJ,IAAIvQ,KACzB;QACF;MACF;MAEAwzC,0BAKEpxC,MAA2BqxC,WAAsBpxC,MAAuB;AACxEoxC,kBAAUC,QAAQ7N,kBAAkBzjC,IAAI,IACpC,KAAKqnC,8BACW,MACI,IACpB,IACA,KAAK/B,gBAAe;AAExBtlC,aAAKqX,WAAWzD,KAAK,KAAK29B,sBAAsBF,WAAWpxC,IAAI,CAAC;MAClE;MAEAuxC,uBAAuBC,UAA4B;AACjD,YAAI,MAAMD,uBAAuBC,QAAQ,EAAG,QAAO;AACnD,YAAI,KAAK1V,aAAY,GAAS,GAAG;AAC/B,cAAI,CAAC0V,SAAU,QAAO;AACtB,gBAAMpiB,KAAK,KAAK2E,kBAAiB;AACjC,iBAAO3E,OAAE,OAAiCA,OAAyB;QACrE;AACA,eAAO,CAACoiB,YAAY,KAAK1V,aAAY,EAAW;MAClD;MAEA2V,iBACE1xC,MACAyxC,UACAjvC,OACA2L,KACM;AACN,cAAMujC,iBAAiB1xC,MAAMyxC,UAAUjvC,OAAO2L,GAAG;AACjD,YAAIsjC,UAAU;AACZ,cAAI,CAACjvC,SAAS,KAAKouB,MAAK,EAAY,GAAG;AAErC;UACF;AACC5wB,eAAkC+mC,aACjCvkC,UAAU,SAASA,QAAQ;QAC/B,OAAO;AACL,cAAIA,UAAU,UAAU,KAAKouB,MAAa,EAAA,EAAG,MAAKxrB,WAAU;AAC3DpF,eAA6B0jC,aAC5BlhC,UAAU,UAAUA,UAAU,WAAWA,QAAQ;QACrD;MACF;MAGAmvC,qBACEN,WACAO,kBACAC,oBAEAC,iBAEAlpB,aACmB;AACnB,cAAMmpB,aAAaV,UAAUW;AAE7B,YAAIC,oBAAoB;AACxB,YAAIF,WAAW9xC,SAAS,cAAc;AACpC,cAAI8xC,WAAW1rC,SAAS,QAAQ;AAC9B4rC,gCAAoB;UACtB,WAAWF,WAAW1rC,SAAS,UAAU;AACvC4rC,gCAAoB;UACtB;QACF;AAEA,YAAIp8B,YAAY;AAChB,YAAI,KAAKkmB,aAAY,EAAO,KAAK,CAAC,KAAKK,sBAAsB,IAAI,GAAG;AAClE,gBAAM8V,WAAW,KAAK5M,gBAAgB,IAAI;AAC1C,cACE2M,sBAAsB,QACtB,CAACluB,2BAA2B,KAAK7M,MAAMjX,IAAI,GAC3C;AAEAoxC,sBAAUW,WAAWE;AACrBb,sBAAU3N,aAAauO;AACvBZ,sBAAUC,QAAQjS,gBAAgB6S,QAAQ;UAC5C,OAAO;AAELb,sBAAUW,WAAWD;AACrBV,sBAAU3N,aAAa;AACvB2N,sBAAUC,QAAQ,KAAKhM,gBAAe;UACxC;QACF,OAAO;AACL,cACE2M,sBAAsB,QACtBluB,2BAA2B,KAAK7M,MAAMjX,IAAI,GAC1C;AAEAoxC,sBAAUW,WAAW,KAAK1M,gBAAgB,IAAI;AAC9C+L,sBAAU3N,aAAauO;UACzB,OAAO;AACL,gBAAIL,kBAAkB;AAEpB,oBAAM,KAAKx7B,MAAMzG,OAAOpM,uBAAuB8tC,WAAW;gBACxD7tC,YAAYuuC,WAAW7kC;cACzB,CAAC;YACH;AAEAmkC,sBAAUW,WAAWD;AACrBV,sBAAU3N,aAAa;UACzB;AAEA,cAAI,KAAKrH,cAAa,EAAO,GAAG;AAC9BgV,sBAAUC,QAAQ,KAAKhM,gBAAe;UACxC,OAAO;AACLzvB,wBAAY;AACZw7B,sBAAUC,QAAQjS,gBAAgBgS,UAAUW,QAAQ;UACtD;QACF;AAEA,cAAMG,wBAAwB1O,kBAAkB4N,SAAS;AAEzD,YAAIQ,sBAAsBM,uBAAuB;AAC/C,eAAK/7B,MAAM2pB,WAAW0B,qCAAqC4P,SAAS;QACtE;AAEA,YAAIQ,sBAAsBM,uBAAuB;AAC/C,eAAK/J,kBACHiJ,UAAUC,MAAMjrC,MAChBgrC,UAAUC,MAAMnjC,IAAIvQ,OACF,IACpB;QACF;AAEA,YAAIiY,aAAa,CAACg8B,sBAAsB,CAACM,uBAAuB;AAC9D,eAAKC,kBACHf,UAAUC,MAAMjrC,MAChBgrC,UAAUljC,IAAIvQ,OACd,MACA,IACF;QACF;AAEA,eAAO,KAAK2zC,sBAAsBF,WAAW,iBAAiB;MAChE;MAEAgB,mBAA8B;AAC5B,gBAAQ,KAAKn7B,MAAMjX,MAAI;UACrB,KAAA;AAEE,mBAAO,KAAKqlC,gBAA8B,IAAI;UAChD;AACE,mBAAO,MAAM+M,iBAAgB;QACjC;MACF;MAGAC,oBACEtyC,MACAwT,eACM;AAEN,cAAMnT,OAAOL,KAAKK;AAClB,YAAIA,SAAS,SAASA,SAAS,SAAS,KAAKuwB,MAAK,EAAM,GAAG;AACzD5wB,eAAK2T,iBAAiB,KAAK8xB,kCAAiC;QAC9D;AACA,cAAM6M,oBAAoBtyC,MAAMwT,aAAa;MAC/C;MAGA++B,WACEC,MACAnyC,MACM;AACN,cAAMkyC,WAAWC,MAAMnyC,IAAI;AAC3B,YAAI,KAAKuwB,MAAK,EAAS,GAAG;AACxB4hB,eAAKv+B,GAAG6xB,iBAAiB,KAAKkB,wBAAuB;AACrD,eAAKzuB,iBAAiBi6B,KAAKv+B,EAAE;QAC/B;MACF;MAGAw+B,kCACEzyC,MACA0yC,MAC2B;AAC3B,YAAI,KAAK9hB,MAAK,EAAS,GAAG;AACxB,gBAAMuY,wBAAwB,KAAKjyB,MAAMiX;AACzC,eAAKjX,MAAMiX,qBAAqB;AAChCnuB,eAAK6lC,aAAa,KAAKmB,wBAAuB;AAC9C,eAAK9vB,MAAMiX,qBAAqBgb;QAClC;AAEA,eAAO,MAAMsJ,kCAAkCzyC,MAAM0yC,IAAI;MAC3D;MAGAC,wBAAiC;AAC/B,eAAO,KAAK/hB,MAAc,EAAA,KAAK,MAAM+hB,sBAAqB;MAC5D;MAYA9E,iBACEr4B,qBACAo9B,gBACc;AAAA,YAAAC;AACd,YAAI37B,QAAQ;AAEZ,YAAI47B;AAEJ,YACE,KAAKn8B,UAAU,KAAK,MACnB,KAAKia,MAAoB,GAAA,KAAK,KAAKA,MAAW,EAAA,IAC/C;AACA1Z,kBAAQ,KAAKA,MAAM1I,MAAK;AAExBskC,UAAAA,OAAM,KAAKhW,SACT,MAAM,MAAM+Q,iBAAiBr4B,qBAAqBo9B,cAAc,GAChE17B,KACF;AAIA,cAAI,CAAC47B,KAAIzkC,MAAO,QAAOykC,KAAI9yC;AAK3B,gBAAM;YAAEilB;cAAY,KAAK/N;AACzB,gBAAM67B,iBAAiB9tB,QAAQA,QAAQ3N,SAAS,CAAC;AACjD,cAAIy7B,mBAAmB5tB,MAAGtM,UAAUk6B,mBAAmB5tB,MAAGpM,QAAQ;AAChEkM,oBAAQC,IAAG;UACb;QACF;AAEA,aAAI2tB,OAAAC,SAAG,QAAHD,KAAKxkC,SAAS,KAAKuiB,MAAK,EAAM,GAAG;AAAA,cAAAoiB,OAAAC;AACnC/7B,kBAAQA,SAAS,KAAKA,MAAM1I,MAAK;AAEjC,cAAImF;AAEJ,gBAAMyI,QAAQ,KAAK0gB,SAAUoW,WAAuB;AAAA,gBAAAC;AAClDx/B,6BAAiB,KAAK8xB,kCAAiC;AAEvD,kBAAM2N,mBAAkB,KAAK1G,iCAC3B/4B,gBACA,MAAM;AACJ,oBAAM46B,SAAS,MAAMV,iBACnBr4B,qBACAo9B,cACF;AAEA,mBAAKhT,2BAA2B2O,QAAQ56B,cAAc;AAEtD,qBAAO46B;YACT,CACF;AAIA,iBAAA4E,wBAAIC,iBAAgBthC,UAAK,QAArBqhC,sBAAuBxgC,cAAeugC,OAAK;AAK/C,kBAAMlG,OAAO,KAAKqG,8BAA8BD,gBAAe;AAE/D,gBAAIpG,KAAK/sC,SAAS,0BAA2BizC,OAAK;AAElDlG,iBAAKr5B,iBAAiBA;AACtB,iBAAKisB,2BAA2BoN,MAAMr5B,cAAc;AAEpD,mBAAOy/B;UACR,GAAEl8B,KAAK;AAER,cAAIk8B,kBAIO;AAEX,cACEh3B,MAAMpc,QACN,KAAKqzC,8BAA8Bj3B,MAAMpc,IAAI,EAAEC,SAC7C,2BACF;AACA,gBAAI,CAACmc,MAAM/N,SAAS,CAAC+N,MAAMghB,SAAS;AAGlC,kBAAIhhB,MAAMpc,KAAKszC,OAAO;AAEpB,qBAAKl9B,MACH2pB,WAAWmD,iDACXvvB,cACF;cACF;AACA,qBAAOyI,MAAMpc;YACf;AAGAozC,8BAAkBh3B,MAAMpc;UAC1B;AAQA,eAAAgzC,QAAIF,SAAG,QAAHE,MAAKhzC,MAAM;AAEb,iBAAKkX,QAAQ47B,KAAI5V;AACjB,mBAAO4V,KAAI9yC;UACb;AAEA,cAAIozC,iBAAiB;AAEnB,iBAAKl8B,QAAQkF,MAAM8gB;AACnB,mBAAOkW;UACT;AAEA,eAAAH,QAAIH,SAAAG,QAAAA,MAAK9V,OAAQ,OAAM2V,KAAIzkC;AAC3B,cAAI+N,MAAM+gB,OAAQ,OAAM/gB,MAAM/N;AAG9B,gBAAM,KAAK+H,MACT2pB,WAAWkD,mCACXtvB,cACF;QACF;AAEA,eAAO,MAAMk6B,iBAAiBr4B,qBAAqBo9B,cAAc;MACnE;MAGAW,WACEvzC,MACsD;AACtD,YAAI,KAAK4wB,MAAK,EAAS,GAAG;AAExB,gBAAM2d,SAAS,KAAKzR,SAA2B,MAAM;AACnD,kBAAMqM,wBAAwB,KAAKjyB,MAAMiX;AACzC,iBAAKjX,MAAMiX,qBAAqB;AAEhC,kBAAMoX,WAAW,KAAK9wB,UAAS;AAE/B,aACE8wB,SAASO,gBAET9lC,KAAKklC,SAAS,IACZ,KAAKD,qCAAoC;AAE7C,iBAAK/tB,MAAMiX,qBAAqBgb;AAEhC,gBAAI,KAAK5M,mBAAkB,EAAI,MAAKn3B,WAAU;AAC9C,gBAAI,CAAC,KAAKwrB,MAAK,EAAS,EAAG,MAAKxrB,WAAU;AAE1C,mBAAOmgC;UACT,CAAC;AAED,cAAIgJ,OAAOpR,OAAQ,QAAO;AAG1B,cAAIoR,OAAOlgC,MAAO,MAAK6I,QAAQq3B,OAAOrR;AAItCl9B,eAAK6lC,aAAa0I,OAAOvuC,KAAK8lC,iBAC1B,KAAKnxB,WAAW45B,OAAOvuC,MAAM,gBAAgB,IAC7C;QACN;AAEA,eAAO,MAAMuzC,WAAWvzC,IAAI;MAC9B;MAEAwzC,iBAAiBhhC,QAAgC;AAC/C,eAAO,KAAKoe,MAAc,EAAA,KAAK,MAAM4iB,iBAAiBhhC,MAAM;MAC9D;MAEAihC,2BACEzzC,MACAwS,QAGM;AACN,YAAI,KAAK0E,MAAMgW,0BAA0BuK,SAASz3B,KAAKpC,KAAK,GAAG;AAC7DoC,eAAKwS,SAASA;QAChB,OAAO;AACL,gBAAMihC,2BAA2BzzC,MAAMwS,MAAM;QAC/C;MACF;MAEA87B,YACEtuC,MACA0zC,iBACAC,iBACAC,oBAA6B,MACvB;AACN,YACED,mBACA,KAAKz8B,MAAMgW,0BAA0BuK,SAASz3B,KAAKpC,KAAK,GACxD;AACA;QACF;AAGA,iBAAS+nB,IAAI,GAAGA,IAAI3lB,KAAKwS,OAAO8E,QAAQqO,KAAK;AAC3C,cAAI,KAAK6qB,YAAYxwC,KAAKwS,OAAOmT,CAAC,CAAC,KAAKA,IAAI,GAAG;AAC7C,iBAAKvP,MAAM2pB,WAAWwC,sBAAsBviC,KAAKwS,OAAOmT,CAAC,CAAC;UAC5D;QACF;AAEA,cAAM2oB,YACJtuC,MACA0zC,iBACAC,iBACAC,iBACF;MACF;MAEAC,mCAAmCC,YAAmC;AACpE,eAAO,MAAMD,mCACXC,cAAc,CAAC,KAAK58B,MAAM+V,UAAUwK,SAAS,KAAKvgB,MAAMtZ,KAAK,CAC/D;MACF;MAEAm2C,gBACEp8B,MAEApC,UACAqC,SACc;AACd,YACED,KAAK1X,SAAS,gBACd0X,KAAKtR,SAAS,WACd,KAAK6Q,MAAM+V,UAAUwK,SAASliB,SAAS9X,KAAK,GAC5C;AACA,eAAKspB,KAAI;AAET,gBAAM/mB,OAAO,KAAK2/B,YAA8BpqB,QAAQ;AACxDvV,eAAKwW,SAASmB;AACd3X,eAAK0W,YAAY,MAAMs9B,6BAA4B,IAAY,KAAK;AACpEr8B,iBAAO,KAAKhD,WAAW3U,MAAM,gBAAgB;QAC9C,WACC2X,KAAK1X,SAAS,gBACd0X,KAAKtR,SAAS,WACd,KAAKuqB,MAAK,EAAM,GAChB;AACA,gBAAM1Z,QAAQ,KAAKA,MAAM1I,MAAK;AAC9B,gBAAM4N,QAAQ,KAAK0gB,SACjBoW,WAAS,KAAKe,kCAAkC1+B,QAAQ,KAAK29B,MAAO,GACpEh8B,KACF;AAIA,cAAI,CAACkF,MAAM/N,SAAS,CAAC+N,MAAMghB,QAAS,QAAOhhB,MAAMpc;AAEjD,gBAAMuuC,SAAS,KAAKzR,SAClB,MAAM,MAAMiX,gBAAgBp8B,MAAMpC,UAAUqC,OAAO,GACnDV,KACF;AAEA,cAAIq3B,OAAOvuC,QAAQ,CAACuuC,OAAOlgC,MAAO,QAAOkgC,OAAOvuC;AAEhD,cAAIoc,MAAMpc,MAAM;AACd,iBAAKkX,QAAQkF,MAAM8gB;AAEnB,mBAAO9gB,MAAMpc;UACf;AAEA,cAAIuuC,OAAOvuC,MAAM;AACf,iBAAKkX,QAAQq3B,OAAOrR;AACpB,mBAAOqR,OAAOvuC;UAChB;AAEA,gBAAMoc,MAAM/N,SAASkgC,OAAOlgC;QAC9B;AAEA,eAAO,MAAM0lC,gBAAgBp8B,MAAMpC,UAAUqC,OAAO;MACtD;MAEAF,eACEC,MAEApC,UACAqC,SACAs8B,gBACc;AACd,YAAI,KAAKtjB,MAAoB,EAAA,KAAK,KAAKujB,oBAAmB,GAAI;AAC5DD,yBAAer8B,sBAAsB;AACrC,cAAID,SAAS;AACXs8B,2BAAen8B,OAAO;AACtB,mBAAOJ;UACT;AACA,eAAKoP,KAAI;AACT,gBAAM/mB,OAAO,KAAK2/B,YAAsCpqB,QAAQ;AAChEvV,eAAKwW,SAASmB;AACd3X,eAAKo0C,gBAAgB,KAAKnM,oCAAmC;AAC7D,eAAKpL,OAAM,EAAU;AACrB78B,eAAK0W,YAAY,KAAKs9B,6BAA4B,IAAY,KAAK;AACnEh0C,eAAKuW,WAAW;AAChB,iBAAO,KAAKF,qBAAqBrW,MAAqB,IAAI;QAC5D,WAAW,CAAC4X,WAAW,KAAK2sB,iBAAkB,KAAI,KAAK3T,MAAK,EAAM,GAAG;AACnE,gBAAM5wB,OAAO,KAAK2/B,YAEhBpqB,QAAQ;AACVvV,eAAKwW,SAASmB;AAEd,gBAAM42B,SAAS,KAAKzR,SAAS,MAAM;AACjC98B,iBAAKo0C,gBACH,KAAKhL,6CAA4C;AACnD,iBAAKvM,OAAM,EAAU;AACrB78B,iBAAK0W,YAAY,MAAMs9B,6BAA4B,IAAY,KAAK;AACpE,gBAAIE,eAAer8B,qBAAqB;AACrC7X,mBAA0CuW,WAAW;YACxD;AACA,mBAAO,KAAKF,qBACVrW,MACAk0C,eAAer8B,mBACjB;UACF,CAAC;AAED,cAAI02B,OAAOvuC,MAAM;AACf,gBAAIuuC,OAAOlgC,MAAO,MAAK6I,QAAQq3B,OAAOrR;AACtC,mBAAOqR,OAAOvuC;UAChB;QACF;AAEA,eAAO,MAAM0X,eACXC,MAEApC,UACAqC,SACAs8B,cACF;MACF;MAEAG,eAAer0C,MAA6B;AAC1C,cAAMq0C,eAAer0C,IAAI;AAEzB,YAAIs0C,QAAQ;AACZ,YAAI,KAAK/P,iBAAkB,KAAI,KAAK3T,MAAW,EAAA,GAAG;AAChD0jB,kBAAQ,KAAKxX,SAAS,MACpB,KAAKsM,6CAA4C,CACnD,EAAEppC;QACJ;AACAA,aAAKo0C,gBAAgBE;MACvB;MAEAL,kCACE1+B,UAC8C;AAC9C,cAAMvV,OAAO,KAAK2/B,YAAuCpqB,QAAQ;AACjE,aAAK+8B,oBAAoBtyC,MAAM,KAAK;AACpC,YAAI,CAAC,KAAKuzC,WAAWvzC,IAAI,EAAG;AAC5B,eAAO,MAAMu0C,qBACXv0C,MACaoqB,QACC,IAChB;MACF;MAEA6L,sBAAsB93B,OAAoB;AACxC,cAAM4oB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,YACEpQ,UAA2B,MAC3B4oB,SAAI,MACJ,KAAK7P,MAAMkX,gBACX;AACA,eAAKlX,MAAMkX,iBAAiB;AAC5B,eAAKlX,MAAM3I,OAAO;AAClB,eAAK+kB,UAAS;AACd;QACF;AAEA,cAAM2C,sBAAsB93B,KAAI;MAClC;MAEAg4B,mBAAmBh4B,OAAoB;AACrC,cAAM4oB,OAAO,KAAK+E,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC;AACrD,YACEpQ,UAAI,OACJ4oB,SAAI,KACJ;AAEA,eAAK8O,SAAuB,GAAA,CAAC;AAC7B;QACF;AAEA,cAAMM,mBAAmBh4B,KAAI;MAC/B;MAEAq2C,cAAcrkC,MAAcskC,SAA4B;AACtD,cAAMC,WAAW,MAAMF,cAAcrkC,MAAMskC,OAAO;AAClD,YAAI,KAAKv9B,MAAMkX,gBAAgB;AAC7B,eAAKhY,MACH2pB,WAAWuD,yBACX,KAAKpsB,MAAM2X,YAAW,CACxB;QACF;AACA,eAAO6lB;MACT;MAEA5f,mBAA+C;AAC7C,YAAI,KAAKne,UAAU,cAAc,KAAK,KAAKg+B,gBAAe,GAAI;AAC5D,cAAI,KAAKz9B,MAAMkX,gBAAgB;AAC7B,kBAAM,KAAKhY,MAAM2pB,WAAWiC,mBAAmB,KAAK9qB,MAAM3B,QAAQ;UACpE;AACA,eAAKq/B,yBAAwB;AAC7B,gBAAMC,cAAc,KAAKF,gBAAe;AACxC,cAAIE,aAAa;AACf,iBAAK39B,MAAM3I,OAAOsmC;AAClB,iBAAK39B,MAAMkX,iBAAiB;UAC9B;AACA;QACF;AAEA,eAAO,MAAM0G,iBAAiB,KAAK5d,MAAMkX,iBAAiB,QAAQ,IAAI;MACxE;MAEAumB,kBAAkC;AAChC,cAAM;UAAEpmC;YAAQ,KAAK2I;AACrB,YAAI49B,4BAA4B;AAChC,eACE,CAAgC,IAAA,CAAA,EAACrd,SAE/B,KAAK3L,MAAMC,WAAWxd,MAAMumC,yBAAyB,CACvD,GACA;AACAA;QACF;AAEA,cAAMC,MAAM,KAAKjpB,MAAMC,WAAW+oB,4BAA4BvmC,GAAG;AACjE,cAAMymC,MAAM,KAAKlpB,MAAMC,WAAW+oB,4BAA4BvmC,MAAM,CAAC;AAErE,YAAIwmC,QAAG,MAAwBC,QAAG,IAAsB;AACtD,iBAAOF,4BAA4B;QACrC;AACA,YACE,KAAKhpB,MAAMgD,MACTgmB,4BAA4BvmC,KAC5BumC,4BAA4BvmC,MAAM,EACpC,MAAM,gBACN;AACA,iBAAOumC,4BAA4B;QACrC;AACA,YAAIC,QAAG,MAAwBC,QAAG,IAAsB;AACtD,iBAAOF;QACT;AACA,eAAO;MACT;MAEAF,2BAAiC;AAC/B,cAAM/2C,MAAM,KAAKiuB,MAAMwG,QAAQ,MAAM,KAAKpb,MAAM3I,GAAG;AACnD,YAAI1Q,QAAQ,IAAI;AACd,gBAAM,KAAKuY,MAAMzG,OAAO/E,qBAAqB,KAAKsM,MAAM2X,YAAW,CAAE;QACvE;MACF;MAIAomB,yCACE9mC,KACA;QACEsyB;QACAD;MAIF,GACM;AACN,aAAKpqB,MAAM2pB,WAAWQ,iCAAiCpyB,KAAK;UAC1DqyB;UACAC;QACF,CAAC;MACH;MAEAyU,sCACE/mC,KACAgnC,aACA;AACA,eAAO,KAAK/+B,MACV,CAAC++B,YAAYnU,eACTjB,WAAWmB,0CACXiU,YAAYnU,iBAAiB,WAC3BjB,WAAWkB,yCACXlB,WAAWgB,yCACjB5yB,KACAgnC,WACF;MACF;MAEAC,wCACEjnC,KACAC,SAIM;AACN,aAAKgI,MAAM2pB,WAAWsB,gCAAgClzB,KAAKC,OAAO;MACpE;MAEAinC,mDACEr1C,MACAoO,SAGM;AACN,aAAKgI,MACH2pB,WAAWuB,2CACXthC,MACAoO,OACF;MACF;MAEAknC,qBAAqC;AACnC,cAAM//B,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMggC,YAAYA,MAAM,KAAK3kB,MAAc,EAAA,KAAK,KAAKA,MAAK,CAAU;AACpE,gBAAQ,KAAK1Z,MAAMjX,MAAI;UACrB,KAAA,KAAa;AACX,kBAAMu1C,UAAU,KAAKjkC,oBAAoB,KAAK2F,MAAMhK,KAAK;AACzD,gBAAIqoC,UAAS,GAAI;AACf,qBAAO;gBAAEt1C,MAAM;gBAAUkO,KAAKqnC,QAAQrnC,IAAIvQ;gBAAOsP,OAAOsoC;;YAC1D;AACA,mBAAO;cAAEv1C,MAAM;cAAWkO,KAAKoH;;UACjC;UACA,KAAA,KAAgB;AACd,kBAAMigC,UAAU,KAAKlkC,mBAAmB,KAAK4F,MAAMhK,KAAK;AACxD,gBAAIqoC,UAAS,GAAI;AACf,qBAAO;gBAAEt1C,MAAM;gBAAUkO,KAAKqnC,QAAQrnC,IAAIvQ;gBAAOsP,OAAOsoC;;YAC1D;AACA,mBAAO;cAAEv1C,MAAM;cAAWkO,KAAKoH;;UACjC;UACA,KAAA;UACA,KAAA,IAAgB;AACd,kBAAMigC,UAAU,KAAK/jC,oBAAoB,KAAKmf,MAAc,EAAA,CAAC;AAC7D,gBAAI2kB,UAAS,GAAI;AACf,qBAAO;gBACLt1C,MAAM;gBACNkO,KAAKqnC,QAAQrnC,IAAIvQ;gBACjBsP,OAAOsoC;;YAEX;AACA,mBAAO;cAAEv1C,MAAM;cAAWkO,KAAKoH;;UACjC;UACA;AACE,mBAAO;cAAEtV,MAAM;cAAWkO,KAAKoH;;QACnC;MACF;MAEAkgC,oBAGE;AACA,cAAMtnC,MAAM,KAAK+I,MAAM3B;AACvB,cAAMtB,KAAK,KAAKqxB,gBAAgB,IAAI;AACpC,cAAM1X,OAAO,KAAK2F,IAAG,EAAM,IACvB,KAAK+hB,mBAAkB,IACvB;UAAEr1C,MAAM;UAAiBkO;;AAC7B,eAAO;UAAE8F;UAAI2Z;;MACf;MAEA8nB,kCACEvnC,KACA8W,SACA0wB,cACM;AACN,cAAM;UAAE3U;QAAc,IAAG/b;AACzB,YAAI+b,iBAAiB,MAAM;AACzB;QACF;AACA,YAAIA,iBAAiB2U,cAAc;AACjC,eAAKT,sCAAsC/mC,KAAK8W,OAAO;QACzD;MACF;MAEA2wB,gBAAgB;QACdnV;QACAO;MAIF,GAoBE;AACA,cAAM6U,YAAY,oBAAI5pC,IAAG;AACzB,cAAM6pC,UAAU;UAEdC,gBAAgB,CAAA;UAEhBC,eAAe,CAAA;UAEfC,eAAe,CAAA;UAEfC,kBAAkB,CAAA;;AAEpB,YAAIC,oBAAoB;AACxB,eAAO,CAAC,KAAKvlB,MAAK,CAAU,GAAG;AAC7B,cAAI,KAAK2C,IAAG,EAAY,GAAG;AACzB4iB,gCAAoB;AACpB;UACF;AACA,gBAAMC,aAAa,KAAK3hC,UAAS;AACjC,gBAAM;YAAER;YAAI2Z;UAAK,IAAI,KAAK6nB,kBAAiB;AAC3C,gBAAMjV,aAAavsB,GAAG5N;AACtB,cAAIm6B,eAAe,IAAI;AACrB;UACF;AACA,cAAI,SAAS3a,KAAK2a,UAAU,GAAG;AAC7B,iBAAKpqB,MAAM2pB,WAAWoB,uBAAuBltB,IAAI;cAC/CusB;cACAY,YAAYZ,WAAW,CAAC,EAAE6V,YAAW,IAAK7V,WAAW1R,MAAM,CAAC;cAC5D2R;YACF,CAAC;UACH;AACA,cAAIoV,UAAUpvB,IAAI+Z,UAAU,GAAG;AAC7B,iBAAKpqB,MAAM2pB,WAAWW,yBAAyBzsB,IAAI;cACjDusB;cACAC;YACF,CAAC;UACH;AACAoV,oBAAUvsB,IAAIkX,UAAU;AACxB,gBAAMvb,UAAU;YAAEwb;YAAUO;YAAcR;;AAC1C4V,qBAAWniC,KAAKA;AAChB,kBAAQ2Z,KAAK3tB,MAAI;YACf,KAAK,WAAW;AACd,mBAAKy1C,kCACH9nB,KAAKzf,KACL8W,SACA,SACF;AACAmxB,yBAAWxoB,OAAOA,KAAK1gB;AACvB4oC,sBAAQC,eAAeniC,KACrB,KAAKe,WAAWyhC,YAAY,mBAAmB,CACjD;AACA;YACF;YACA,KAAK,UAAU;AACb,mBAAKV,kCAAkC9nB,KAAKzf,KAAK8W,SAAS,QAAQ;AAClEmxB,yBAAWxoB,OAAOA,KAAK1gB;AACvB4oC,sBAAQE,cAAcpiC,KACpB,KAAKe,WAAWyhC,YAAY,kBAAkB,CAChD;AACA;YACF;YACA,KAAK,UAAU;AACb,mBAAKV,kCAAkC9nB,KAAKzf,KAAK8W,SAAS,QAAQ;AAClEmxB,yBAAWxoB,OAAOA,KAAK1gB;AACvB4oC,sBAAQG,cAAcriC,KACpB,KAAKe,WAAWyhC,YAAY,kBAAkB,CAChD;AACA;YACF;YACA,KAAK,WAAW;AACd,oBAAM,KAAKlB,sCAAsCtnB,KAAKzf,KAAK8W,OAAO;YACpE;YACA,KAAK,QAAQ;AACX,sBAAQ+b,cAAY;gBAClB,KAAK;AACH,uBAAKiU,yCACHrnB,KAAKzf,KACL8W,OACF;AACA;gBACF,KAAK;AACH,uBAAKmwB,wCAAwCxnB,KAAKzf,KAAK8W,OAAO;AAC9D;gBACF;AACE6wB,0BAAQI,iBAAiBtiC,KACvB,KAAKe,WAAWyhC,YAAY,qBAAqB,CACnD;cACJ;YACF;UACF;AAEA,cAAI,CAAC,KAAKxlB,MAAK,CAAU,GAAG;AAC1B,iBAAKiM,OAAM,EAAS;UACtB;QACF;AACA,eAAO;UAAEiZ;UAASK;;MACpB;MAEAG,sBACEC,oBACAL,kBACA;QACEzV;MAGF,GACe;AACf,YAAI8V,mBAAmBj/B,WAAW,GAAG;AACnC,iBAAO4+B;QACT,WAAWA,iBAAiB5+B,WAAW,GAAG;AACxC,iBAAOi/B;QACR,WAAUL,iBAAiB5+B,SAASi/B,mBAAmBj/B,QAAQ;AAC9D,qBAAWg4B,UAAUiH,oBAAoB;AACvC,iBAAKlB,mDAAmD/F,QAAQ;cAC9D7O;YACF,CAAC;UACH;AACA,iBAAOyV;QACT,OAAO;AACL,qBAAW5G,UAAU4G,kBAAkB;AACrC,iBAAKb,mDAAmD/F,QAAQ;cAC9D7O;YACF,CAAC;UACH;AACA,iBAAO8V;QACT;MACF;MAEAC,0BAA0B;QACxB/V;MAGF,GAAqB;AACnB,YAAI,CAAC,KAAKpE,cAAa,GAAO,EAAG,QAAO;AAExC,YAAI,CAACxY,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AACvC,gBAAM,KAAKmW,MACT2pB,WAAWe,wCACX,KAAK5pB,MAAM3B,UACX;YACEkrB;UACF,CACF;QACF;AAEA,cAAM;UAAEvzB;YAAU,KAAKgK;AACvB,aAAK6P,KAAI;AAET,YACE7Z,UAAU,aACVA,UAAU,YACVA,UAAU,YACVA,UAAU,UACV;AACA,eAAKkJ,MAAM2pB,WAAWa,yBAAyB,KAAK1pB,MAAM3B,UAAU;YAClEkrB;YACAI,iBAAiB3zB;UACnB,CAAC;QACH;AAEA,eAAOA;MACT;MAEAupC,aAAaz2C,MAA8BiU,IAA0B;AACnE,cAAMwsB,WAAWxsB,GAAG5N;AACpB,cAAMqwC,UAAUziC,GAAG9F,IAAIvQ;AACvB,cAAMojC,eAAe,KAAKwV,0BAA0B;UAAE/V;QAAS,CAAC;AAChE,aAAK5D,OAAM,CAAU;AACrB,cAAM;UAAEiZ;UAASK;QAAkB,IAAI,KAAKP,gBAAgB;UAC1DnV;UACAO;QACF,CAAC;AACDhhC,aAAKm2C,oBAAoBA;AAEzB,gBAAQnV,cAAY;UAClB,KAAK;AACHhhC,iBAAKghC,eAAe;AACpBhhC,iBAAK81C,UAAUA,QAAQC;AACvB,iBAAKlZ,OAAM,CAAU;AACrB,mBAAO,KAAKloB,WAAW3U,MAAM,iBAAiB;UAChD,KAAK;AACHA,iBAAKghC,eAAe;AACpBhhC,iBAAK81C,UAAUA,QAAQE;AACvB,iBAAKnZ,OAAM,CAAU;AACrB,mBAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;UAC/C,KAAK;AACHA,iBAAKghC,eAAe;AACpBhhC,iBAAK81C,UAAU,KAAKQ,sBAClBR,QAAQG,eACRH,QAAQI,kBACR;cAAEzV;YAAS,CACb;AACA,iBAAK5D,OAAM,CAAU;AACrB,mBAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;UAC/C,KAAK;AACHA,iBAAK81C,UAAUA,QAAQI;AACvB,iBAAKrZ,OAAM,CAAU;AACrB,mBAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;UAC/C,SAAS;AAEP,kBAAM22C,QAAQA,MAAM;AAClB32C,mBAAK81C,UAAU,CAAA;AACf,mBAAKjZ,OAAM,CAAU;AACrB,qBAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;;AAE/CA,iBAAKghC,eAAe;AAEpB,kBAAM4V,WAAWd,QAAQC,eAAez+B;AACxC,kBAAMu/B,UAAUf,QAAQE,cAAc1+B;AACtC,kBAAMw/B,UAAUhB,QAAQG,cAAc3+B;AACtC,kBAAMy/B,eAAejB,QAAQI,iBAAiB5+B;AAE9C,gBAAI,CAACs/B,YAAY,CAACC,WAAW,CAACC,WAAW,CAACC,cAAc;AACtD,qBAAOJ,MAAK;YACd,WAAW,CAACC,YAAY,CAACC,SAAS;AAChC72C,mBAAK81C,UAAU,KAAKQ,sBAClBR,QAAQG,eACRH,QAAQI,kBACR;gBAAEzV;cAAS,CACb;AACA,mBAAK5D,OAAM,CAAU;AACrB,qBAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;YAC9C,WAAU,CAAC62C,WAAW,CAACC,WAAWF,YAAYG,cAAc;AAC3D,yBAAWzH,UAAUwG,QAAQI,kBAAkB;AAC7C,qBAAKjB,yCAAyC3F,OAAOnhC,IAAIvQ,OAAO;kBAC9D6iC;kBACAD,YAAY8O,OAAOr7B,GAAG5N;gBACxB,CAAC;cACH;AACArG,mBAAK81C,UAAUA,QAAQC;AACvB,mBAAKlZ,OAAM,CAAU;AACrB,qBAAO,KAAKloB,WAAW3U,MAAM,iBAAiB;YAC/C,WAAU,CAAC42C,YAAY,CAACE,WAAWD,WAAWE,cAAc;AAC3D,yBAAWzH,UAAUwG,QAAQI,kBAAkB;AAC7C,qBAAKd,wCAAwC9F,OAAOnhC,IAAIvQ,OAAO;kBAC7D6iC;kBACAD,YAAY8O,OAAOr7B,GAAG5N;gBACxB,CAAC;cACH;AACArG,mBAAK81C,UAAUA,QAAQE;AACvB,mBAAKnZ,OAAM,CAAU;AACrB,qBAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;YAC/C,OAAO;AACL,mBAAKoW,MAAM2pB,WAAWY,8BAA8B+V,SAAS;gBAC3DjW;cACF,CAAC;AACD,qBAAOkW,MAAK;YACd;UACF;QACF;MACF;MAEA7J,yBACE9sC,MACuB;AACvB,cAAMiU,KAAK,KAAKqxB,gBAAe;AAC/BtlC,aAAKiU,KAAKA;AACVjU,aAAKmT,OAAO,KAAKsjC,aAAa,KAAKhiC,UAAS,GAAIR,EAAE;AAClD,eAAO,KAAKU,WAAW3U,MAAM,iBAAiB;MAChD;MAGAm0C,sBAA+B;AAC7B,cAAMptB,OAAO,KAAK8M,eAAc;AAChC,YAAI,KAAK/H,MAAMC,WAAWhF,IAAI,MAAC,IAAyB;AACtD,gBAAMiwB,YAAY,KAAKlrB,MAAMC,WAAWhF,OAAO,CAAC;AAChD,iBACEiwB,cAAS,MAA2BA,cAAgC;QAExE;AACA,eAAO;MACT;MAEA3D,8BAA8BrzC,MAAc;AAC1C,eAAOA,KAAKC,SAAS,uBAAuBD,KAAK4R,aAAa5R;MAChE;IACF;ACluHF,QAAMi3C,WAGF;MACFC,WAAW;MACXC,MAAM;MACNC,KAAK;MACLC,MAAM;MACNv5B,IAAI;MACJC,IAAI;MACJu5B,MAAM;MACNC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,KAAK;MACLC,QAAQ;MACRC,MAAM;MACNC,KAAK;MACLC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPC,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,MAAM;MACNC,KAAK;MACLC,QAAQ;MACRC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,MAAM;MACNC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,KAAK;MACLC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,QAAQ;MACRC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,KAAK;MACLC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,QAAQ;MACRC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNzgC,OAAO;MACP0gC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,SAAS;MACTC,MAAM;MACNC,KAAK;MACLC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,IAAI;MACJC,IAAI;MACJC,IAAI;MACJC,SAAS;MACTC,IAAI;MACJC,KAAK;MACLC,OAAO;MACPC,KAAK;MACLC,SAAS;MACTC,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,OAAO;MACPC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,SAAS;MACTC,MAAM;MACNC,KAAK;MACLC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,IAAI;MACJC,IAAI;MACJC,IAAI;MACJC,SAAS;MACTC,IAAI;MACJC,KAAK;MACLC,QAAQ;MACRC,OAAO;MACPC,KAAK;MACLC,SAAS;MACTC,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,OAAO;MACPC,UAAU;MACVC,OAAO;MACPC,KAAK;MACLC,MAAM;MACNC,MAAM;MACNC,QAAQ;MACRC,MAAM;MACNC,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,OAAO;MACPC,OAAO;MACPC,OAAO;MACPC,OAAO;MACPC,OAAO;MACPC,OAAO;MACPC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,MAAM;MACNC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC,OAAO;MACPC,SAAS;MACTC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,QAAQ;MACRC,MAAM;MACNC,OAAO;MACPnN,OAAO;MACPoN,OAAO;MACPC,MAAM;MACNC,OAAO;MACPC,IAAI;MACJC,MAAM;MACNC,KAAK;MACLC,OAAO;MACPC,QAAQ;MACRC,OAAO;MACPrvC,MAAM;MACNsvC,OAAO;MACPC,KAAK;MACLC,KAAK;MACLC,IAAI;MACJC,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,QAAQ;MACRC,KAAK;MACLC,MAAM;MACNC,OAAO;MACPC,IAAI;MACJC,OAAO;MACPC,IAAI;MACJC,IAAI;MACJC,KAAK;MACLC,KAAK;MACLC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,MAAM;MACNC,MAAM;MACNC,KAAK;MACLC,QAAQ;MACRC,OAAO;MACPC,QAAQ;MACRC,OAAO;IACT;AC5OA,QAAMC,YAAY53C,oBAAoB;MACpC63C,kBACE;MACFC,0BAA0BA,CAAC;QAAEC;YAC3B,+CAA+CA,cAAc;MAC/DC,2BAA2B;MAC3BC,8BACE;MAEFl9C,iBAAiBA,CAAC;QAChB1E;QACA6hD;MAIF,MACE,sBAAsB7hD,UAAU,sBAAsB6hD,UAAU,aAAa7hD,UAAU;MACzF8hD,qBACE;MACFC,wBAAwB;MACxBC,8BACE;IACJ,CAAC;AAID,aAASC,WAAWx3C,QAAsD;AACxE,aAAOA,SACHA,OAAO5P,SAAS,wBACd4P,OAAO5P,SAAS,uBAClB;IACN;AAIA,aAASqnD,oBACPz3C,QACQ;AACR,UAAIA,OAAO5P,SAAS,iBAAiB;AACnC,eAAO4P,OAAOxJ;MAChB;AAEA,UAAIwJ,OAAO5P,SAAS,qBAAqB;AACvC,eAAO4P,OAAO03C,UAAUlhD,OAAO,MAAMwJ,OAAOxJ,KAAKA;MACnD;AAEA,UAAIwJ,OAAO5P,SAAS,uBAAuB;AACzC,eACEqnD,oBAAoBz3C,OAAOA,MAAM,IACjC,MACAy3C,oBAAoBz3C,OAAOguB,QAAQ;MAEvC;AAIA,YAAM,IAAI4G,MAAM,+BAA+B50B,OAAO5P,IAAI;IAC5D;AAQA,QAAA6yC,MAAgB9iC,gBACd,MAAMw3C,uBAAuBx3C,WAA8C;MAGzEy3C,eAAqB;AACnB,YAAI73B,MAAM;AACV,YAAIE,aAAa,KAAK5Y,MAAM3I;AAC5B,mBAAS;AACP,cAAI,KAAK2I,MAAM3I,OAAO,KAAK+I,QAAQ;AACjC,kBAAM,KAAKlB,MACTuwC,UAAUQ,wBACV,KAAKjwC,MAAM3B,QACb;UACF;AAEA,gBAAM8Z,KAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;AAE/C,kBAAQ8gB,IAAE;YACR,KAAA;YACA,KAAA;AACE,kBAAI,KAAKnY,MAAM3I,QAAQ,KAAK2I,MAAMtZ,OAAO;AACvC,oBAAIyxB,OAAE,MAA2B,KAAKnY,MAAMwX,oBAAoB;AAC9D,oBAAE,KAAKxX,MAAM3I;AACb,uBAAKqmB,YAAW,GAAe;gBACjC,OAAO;AACL,wBAAMC,iBAAiBxF,EAAE;gBAC3B;AACA;cACF;AACAO,qBAAO,KAAK9D,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;AAClD,mBAAKqmB,YAAwBhF,KAAAA,GAAG;AAChC;YAEF,KAAA;AACEA,qBAAO,KAAK9D,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;AAClDqhB,qBAAO,KAAK83B,cAAa;AACzB53B,2BAAa,KAAK5Y,MAAM3I;AACxB;YAEF,KAAA;YACA,KAAA;YAUA;AACE,kBAAIge,UAAU8C,EAAE,GAAG;AACjBO,uBAAO,KAAK9D,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;AAClDqhB,uBAAO,KAAK+3B,eAAe,IAAI;AAC/B73B,6BAAa,KAAK5Y,MAAM3I;cAC1B,OAAO;AACL,kBAAE,KAAK2I,MAAM3I;cACf;UACJ;QACF;MACF;MAEAo5C,eAAeC,eAAgC;AAC7C,cAAMv4B,KAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;AAC/C,YAAIqhB;AACJ,UAAE,KAAK1Y,MAAM3I;AACb,YACE8gB,OAA+B,MAC/B,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG,MAAC,IACrC;AACA,YAAE,KAAK2I,MAAM3I;AACbqhB,gBAAMg4B,gBAAgB,OAAO;QAC/B,OAAO;AACLh4B,gBAAM1e,OAAO4U,aAAauJ,EAAE;QAC9B;AACA,UAAE,KAAKnY,MAAM2V;AACb,aAAK3V,MAAM4V,YAAY,KAAK5V,MAAM3I;AAElC,eAAOqhB;MACT;MAEAi4B,cAAcxvB,OAAqB;AACjC,YAAIzI,MAAM;AACV,YAAIE,aAAa,EAAE,KAAK5Y,MAAM3I;AAC9B,mBAAS;AACP,cAAI,KAAK2I,MAAM3I,OAAO,KAAK+I,QAAQ;AACjC,kBAAM,KAAKlB,MAAMzG,OAAO7E,oBAAoB,KAAKoM,MAAM3B,QAAQ;UACjE;AAEA,gBAAM8Z,KAAK,KAAKvD,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG;AAC/C,cAAI8gB,OAAOgJ,MAAO;AAClB,cAAIhJ,OAAE,IAA0B;AAC9BO,mBAAO,KAAK9D,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;AAClDqhB,mBAAO,KAAK83B,cAAa;AACzB53B,yBAAa,KAAK5Y,MAAM3I;UAC1B,WAAWge,UAAU8C,EAAE,GAAG;AACxBO,mBAAO,KAAK9D,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,GAAG;AAClDqhB,mBAAO,KAAK+3B,eAAe,KAAK;AAChC73B,yBAAa,KAAK5Y,MAAM3I;UAC1B,OAAO;AACL,cAAE,KAAK2I,MAAM3I;UACf;QACF;AACAqhB,eAAO,KAAK9D,MAAMgD,MAAMgB,YAAY,KAAK5Y,MAAM3I,KAAK;AACpD,aAAKqmB,YAAuBhF,KAAAA,GAAG;MACjC;MAEA83B,gBAAwB;AACtB,cAAM/2B,WAAW,EAAE,KAAKzZ,MAAM3I;AAC9B,YAAI,KAAK6lB,eAAe,KAAKld,MAAM3I,GAAG,MAAC,IAA2B;AAChE,YAAE,KAAK2I,MAAM3I;AAEb,cAAIhK,QAAQ;AACZ,cAAI,KAAK6vB,eAAe,KAAKld,MAAM3I,GAAG,MAAC,KAA2B;AAChEhK,oBAAQ;AACR,cAAE,KAAK2S,MAAM3I;UACf;AAEA,gBAAMu5C,YAAY,KAAK12B,QACrB7sB,OACU6lB,QACK,OACS,MAC1B;AACA,cACE09B,cAAc,QACd,KAAK1zB,eAAe,KAAKld,MAAM3I,GAAG,MAAC,IACnC;AACA,cAAE,KAAK2I,MAAM3I;AACb,mBAAO2C,OAAOuf,cAAcq3B,SAAS;UACvC;QACF,OAAO;AACL,cAAIC,QAAQ;AACZ,cAAIjsC,OAAO;AACX,iBACEisC,UAAU,MACV,KAAK7wC,MAAM3I,MAAM,KAAK+I,UACtB,EAAEwE,OAAO,KAAKsY,eAAe,KAAKld,MAAM3I,GAAG,MAAC,KAC5C;AACA,cAAE,KAAK2I,MAAM3I;UACf;AAEA,cAAIuN,MAAM;AACR,kBAAMksC,OAAO,KAAKl8B,MAAMgD,MAAM6B,UAAU,KAAKzZ,MAAM3I,GAAG;AACtD,kBAAM05C,SAASC,SAAcF,IAAI;AACjC,cAAE,KAAK9wC,MAAM3I;AAEb,gBAAI05C,QAAQ;AACV,qBAAOA;YACT;UACF;QACF;AAGA,aAAK/wC,MAAM3I,MAAMoiB;AACjB,eAAO;MACT;MASAw3B,cAAoB;AAClB,YAAI94B;AACJ,cAAMzxB,QAAQ,KAAKsZ,MAAM3I;AACzB,WAAG;AACD8gB,eAAK,KAAKvD,MAAMC,WAAW,EAAE,KAAK7U,MAAM3I,GAAG;QAC5C,SAAQwX,iBAAiBsJ,EAAE,KAAKA,OAAqB;AACtD,aAAKuF,YAAW,KAAa,KAAK9I,MAAMgD,MAAMlxB,OAAO,KAAKsZ,MAAM3I,GAAG,CAAC;MACtE;MAIA65C,qBAAsC;AACpC,cAAMpoD,OAAO,KAAKyU,UAAS;AAC3B,YAAI,KAAKmc,MAAK,GAAW,GAAG;AAC1B5wB,eAAKqG,OAAO,KAAK6Q,MAAMhK;QACxB,WAAUoX,eAAe,KAAKpN,MAAMjX,IAAI,GAAG;AAC1CD,eAAKqG,OAAOue,eAAe,KAAK1N,MAAMjX,IAAI;QAC5C,OAAO;AACL,eAAKmF,WAAU;QACjB;AACA,aAAK2hB,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,eAAe;MAC9C;MAIAqoD,yBAAgE;AAC9D,cAAM9yC,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMlP,OAAO,KAAK+hD,mBAAkB;AACpC,YAAI,CAAC,KAAK70B,IAAG,EAAS,EAAG,QAAOltB;AAEhC,cAAMrG,OAAO,KAAK2/B,YAAiCpqB,QAAQ;AAC3DvV,aAAKunD,YAAYlhD;AACjBrG,aAAKqG,OAAO,KAAK+hD,mBAAkB;AACnC,eAAO,KAAKzzC,WAAW3U,MAAM,mBAAmB;MAClD;MAKAsoD,sBAG0B;AACxB,cAAM/yC,WAAW,KAAK2B,MAAM3B;AAC5B,YAAIvV,OACF,KAAKqoD,uBAAsB;AAC7B,YAAIroD,KAAKC,SAAS,qBAAqB;AACrC,iBAAOD;QACT;AACA,eAAO,KAAKuzB,IAAG,EAAO,GAAG;AACvB,gBAAM4L,UAAU,KAAKQ,YAAmCpqB,QAAQ;AAChE4pB,kBAAQtvB,SAAS7P;AACjBm/B,kBAAQtB,WAAW,KAAKuqB,mBAAkB;AAC1CpoD,iBAAO,KAAK2U,WAAWwqB,SAAS,qBAAqB;QACvD;AACA,eAAOn/B;MACT;MAIAuoD,yBAGoB;AAClB,YAAIvoD;AACJ,gBAAQ,KAAKkX,MAAMjX,MAAI;UACrB,KAAA;AACED,mBAAO,KAAKyU,UAAS;AACrB,iBAAK+zC,WAAWrjC,MAAGvM,KAAK;AACxB,iBAAKmO,KAAI;AACT/mB,mBAAO,KAAKyoD,4BAA4BzoD,MAAMmlB,MAAGtM,MAAM;AACvD,gBAAI7Y,KAAK4R,WAAW3R,SAAS,sBAAsB;AACjD,mBAAKmW,MAAMuwC,UAAUC,kBAAkB5mD,IAAI;YAC7C;AACA,mBAAOA;UAET,KAAA;UACA,KAAA;AACE,mBAAO,KAAKymC,cAAa;UAE3B;AACE,kBAAM,KAAKrwB,MAAMuwC,UAAUO,qBAAqB,KAAKhwC,MAAM3B,QAAQ;QACvE;MACF;MAMAmzC,0BAAgD;AAC9C,cAAM1oD,OAAO,KAAK2/B,YAAY,KAAKzoB,MAAMsB,aAAa;AACtD,eAAO,KAAKH,aAAarY,MAAM,sBAAsB,KAAKkX,MAAM3B,QAAQ;MAC1E;MAIAozC,oBAAoB3oD,MAAkD;AACpE,aAAK+mB,KAAI;AACT/mB,aAAK4R,aAAa,KAAKozB,gBAAe;AACtC,aAAKwjB,WAAWrjC,MAAGpM,MAAM;AACzB,aAAK7B,MAAMwX,qBAAqB;AAChC,aAAKmO,OAAM,CAAU;AAErB,eAAO,KAAKloB,WAAW3U,MAAM,gBAAgB;MAC/C;MAIAyoD,4BACEzoD,MACA4oD,iBAC0B;AAC1B,YAAI,KAAKh4B,MAAK,CAAU,GAAG;AACzB5wB,eAAK4R,aAAa,KAAK82C,wBAAuB;QAChD,OAAO;AACL,gBAAM92C,aAAa,KAAKozB,gBAAe;AAcvChlC,eAAK4R,aAAaA;QACpB;AACA,aAAK42C,WAAWI,eAAe;AAC/B,aAAK1xC,MAAMwX,qBAAqB;AAChC,aAAKmO,OAAM,CAAU;AAErB,eAAO,KAAKloB,WAAW3U,MAAM,wBAAwB;MACvD;MAIA6oD,oBAA2D;AACzD,cAAM7oD,OAAO,KAAKyU,UAAS;AAC3B,YAAI,KAAKmc,MAAK,CAAU,GAAG;AACzB,eAAK43B,WAAWrjC,MAAGvM,KAAK;AACxB,eAAKmO,KAAI;AACT,eAAK8V,OAAM,EAAY;AACvB78B,eAAKgP,WAAW,KAAK8+B,wBAAuB;AAC5C,eAAK0a,WAAWrjC,MAAGtM,MAAM;AACzB,eAAK3B,MAAMwX,qBAAqB;AAChC,eAAKmO,OAAM,CAAU;AACrB,iBAAO,KAAKloB,WAAW3U,MAAM,oBAAoB;QACnD;AACAA,aAAKqG,OAAO,KAAKgiD,uBAAsB;AACvCroD,aAAKkN,QAAQ,KAAKqmB,IAAG,EAAM,IAAI,KAAKg1B,uBAAwB,IAAG;AAC/D,eAAO,KAAK5zC,WAAW3U,MAAM,cAAc;MAC7C;MAIA8oD,yBACEvzC,UAC4C;AAC5C,cAAMvV,OAAO,KAAK2/B,YAChBpqB,QACF;AACA,YAAI,KAAKge,IAAG,GAAa,GAAG;AAC1B,iBAAO,KAAK5e,WAAW3U,MAAM,oBAAoB;QACnD;AACAA,aAAKqG,OAAO,KAAKiiD,oBAAmB;AACpC,eAAO,KAAKS,gCACV/oD,IACF;MACF;MAEA+oD,gCACE/oD,MACqB;AACrB,cAAM6W,aAAwD,CAAA;AAC9D,eAAO,CAAC,KAAK+Z,MAAc,EAAA,KAAK,CAAC,KAAKA,MAAK,GAAa,GAAG;AACzD/Z,qBAAWjD,KAAK,KAAKi1C,kBAAmB,CAAA;QAC1C;AACA7oD,aAAK6W,aAAaA;AAClB7W,aAAKgpD,cAAc,KAAKz1B,IAAG,EAAS;AACpC,aAAKsJ,OAAM,GAAa;AACxB,eAAO,KAAKloB,WAAW3U,MAAM,mBAAmB;MAClD;MAIAipD,yBACE1zC,UAC4C;AAC5C,cAAMvV,OAAO,KAAK2/B,YAChBpqB,QACF;AACA,YAAI,KAAKge,IAAG,GAAa,GAAG;AAC1B,iBAAO,KAAK5e,WAAW3U,MAAM,oBAAoB;QACnD;AACAA,aAAKqG,OAAO,KAAKiiD,oBAAmB;AACpC,aAAKzrB,OAAM,GAAa;AACxB,eAAO,KAAKloB,WAAW3U,MAAM,mBAAmB;MAClD;MAKAkpD,kBAAkB3zC,UAAkD;AAClE,cAAMvV,OAAO,KAAK2/B,YAA0CpqB,QAAQ;AACpE,cAAM4zC,WAAW,CAAA;AACjB,cAAMC,iBAAiB,KAAKN,yBAAyBvzC,QAAQ;AAC7D,YAAI8zC,iBAAiB;AAErB,YAAI,CAACD,eAAeJ,aAAa;AAC/BM,mBAAU,YAAS;AACjB,oBAAQ,KAAKpyC,MAAMjX,MAAI;cACrB,KAAA;AACEsV,2BAAW,KAAK2B,MAAM3B;AACtB,qBAAKwR,KAAI;AACT,oBAAI,KAAKwM,IAAG,EAAS,GAAG;AACtB81B,mCAAiB,KAAKJ,yBAAyB1zC,QAAQ;AACvD,wBAAM+zC;gBACR;AACAH,yBAASv1C,KAAK,KAAKs1C,kBAAkB3zC,QAAQ,CAAC;AAC9C;cAEF,KAAA;AACE4zC,yBAASv1C,KAAK,KAAKvC,aAAa,KAAK6F,MAAMhK,OAAO,SAAS,CAAC;AAC5D;cAEF,KAAA,GAAgB;AACd,sBAAMlN,QAAO,KAAKyU,UAAS;AAG3B,qBAAK+zC,WAAWrjC,MAAGvM,KAAK;AACxB,qBAAKmO,KAAI;AACT,oBAAI,KAAK6J,MAAK,EAAY,GAAG;AAC3Bu4B,2BAASv1C,KAAK,KAAK+0C,oBAAoB3oD,KAAI,CAAC;gBAC9C,OAAO;AACLmpD,2BAASv1C,KACP,KAAK60C,4BAA4BzoD,OAAMmlB,MAAGpM,MAAM,CAClD;gBACF;AAEA;cACF;cAEA;AACE,qBAAK3T,WAAU;YACnB;UACF;AAEA,cACEiiD,WAAW+B,cAAc,KACzB,CAAC/B,WAAWgC,cAAc,KAC1BA,mBAAmB,MACnB;AACA,iBAAKjzC,MAAMuwC,UAAUI,2BAA2BsC,cAAc;UAChE,WAAW,CAAChC,WAAW+B,cAAc,KAAK/B,WAAWgC,cAAc,GAAG;AACpE,iBAAKjzC,MAAMuwC,UAAUE,0BAA0BwC,gBAAgB;cAC7DvC,gBAAgBQ,oBAAoB8B,eAAe/iD,IAAI;YACzD,CAAC;UACH,WAAW,CAACghD,WAAW+B,cAAc,KAAK,CAAC/B,WAAWgC,cAAc,GAAG;AACrE,gBACE/B,oBAAoB+B,eAAehjD,IAAI,MACvCihD,oBAAoB8B,eAAe/iD,IAAI,GACvC;AACA,mBAAK+P,MAAMuwC,UAAUE,0BAA0BwC,gBAAgB;gBAC7DvC,gBAAgBQ,oBAAoB8B,eAAe/iD,IAAI;cACzD,CAAC;YACH;UACF;QACF;AAEA,YAAIghD,WAAW+B,cAAc,GAAG;AAC9BppD,eAAKupD,kBAAkBH;AACvBppD,eAAKwpD,kBAAkBH;QACzB,OAAO;AACLrpD,eAAKopD,iBAAiBA;AACtBppD,eAAKqpD,iBAAiBA;QACxB;AACArpD,aAAKmpD,WAAWA;AAChB,YAAI,KAAKv4B,MAAK,EAAM,GAAG;AACrB,gBAAM,KAAKxa,MACTuwC,UAAUS,8BACV,KAAKlwC,MAAM3B,QACb;QACF;AAEA,eAAO8xC,WAAW+B,cAAc,IAC5B,KAAKz0C,WAAW3U,MAAM,aAAa,IACnC,KAAK2U,WAAW3U,MAAM,YAAY;MACxC;MAIAypD,kBAAgD;AAC9C,cAAMl0C,WAAW,KAAK2B,MAAM3B;AAC5B,aAAKwR,KAAI;AACT,eAAO,KAAKmiC,kBAAkB3zC,QAAQ;MACxC;MAEAizC,WAAWkB,YAAwB;AACjC,cAAM;UAAEzkC;YAAY,KAAK/N;AACzB+N,gBAAQA,QAAQ3N,SAAS,CAAC,IAAIoyC;MAChC;MAMAjjB,cAAcjxB,qBAA6D;AACzE,YAAI,KAAKob,MAAK,GAAe,GAAG;AAC9B,iBAAO,KAAK64B,gBAAe;QAC5B,WACC,KAAK74B,MAAW,EAAA,KAChB,KAAK9E,MAAMC,WAAW,KAAK7U,MAAM3I,GAAG,MAAC,IACrC;AAGA,eAAKgnB,aAAY,GAAe;AAChC,iBAAO,KAAKk0B,gBAAe;QAC7B,OAAO;AACL,iBAAO,MAAMhjB,cAAcjxB,mBAAmB;QAChD;MACF;MAEAmf,YAAY;AACV,cAAMlB,aAAa,KAAKA,WAAU;AAClC,YAAI,CAACA,WAAW/a,cAAe,OAAMic,UAAS;MAChD;MAEAE,iBAAiB12B,OAAoB;AACnC,cAAM8mB,UAAU,KAAKwO,WAAU;AAE/B,YAAIxO,YAAYE,MAAGpM,QAAQ;AACzB,eAAK0uC,aAAY;AACjB;QACF;AAEA,YAAIxiC,YAAYE,MAAGtM,UAAUoM,YAAYE,MAAGrM,QAAQ;AAClD,cAAI8M,kBAAkBznB,KAAI,GAAG;AAC3B,iBAAKgqD,YAAW;AAChB;UACF;AAEA,cAAIhqD,UAAI,IAA4B;AAClC,cAAE,KAAK+Y,MAAM3I;AACb,iBAAKqmB,YAAW,GAAa;AAC7B;UACF;AAEA,eACGz2B,UAAgC,MAAIA,UAAI,OACzC8mB,YAAYE,MAAGtM,QACf;AACA,iBAAKgvC,cAAc1pD,KAAI;AACvB;UACF;QACF;AAEA,YACEA,UAA2B,MAC3B,KAAK+Y,MAAMwX,sBACX,KAAK5C,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,IACzC;AACA,YAAE,KAAK2I,MAAM3I;AACb,eAAKqmB,YAAW,GAAe;AAC/B;QACF;AAEA,cAAMC,iBAAiB12B,KAAI;MAC7B;MAEAub,cAAc4b,UAA2B;AACvC,cAAM;UAAErQ;UAAShlB;YAAS,KAAKiX;AAC/B,YAAIjX,SAAI,MAAiBq1B,aAAQ,KAAqB;AAGpDrQ,kBAAQ0G,OAAO,IAAI,GAAGxG,MAAGrM,MAAM;AAC/B,eAAK5B,MAAMwX,qBAAqB;QAClC,WAAWzuB,SAAI,KAAqB;AAElCglB,kBAAQrR,KAAKuR,MAAGtM,MAAM;QACxB,WAAW5Y,SAAI,KAAmB;AAChC,gBAAM2vB,MAAM3K,QAAQA,QAAQ3N,SAAS,CAAC;AACtC,cAAKsY,QAAQzK,MAAGtM,UAAUyc,aAAqB,MAAK1F,QAAQzK,MAAGrM,QAAQ;AACrEmM,oBAAQC,IAAG;AACX,iBAAKhO,MAAMwX,qBACTzJ,QAAQA,QAAQ3N,SAAS,CAAC,MAAM6N,MAAGpM;UACvC,OAAO;AACL,iBAAKyvC,WAAWrjC,MAAGpM,MAAM;AACzB,iBAAK7B,MAAMwX,qBAAqB;UAClC;QACF,OAAO;AACL,eAAKxX,MAAMwX,qBAAqBzK,2BAA2BhkB,IAAI;QACjE;MACF;IACF;ACrnBF,QAAM0pD,kBAAN,cAA8BxiC,MAAM;MAAA7pB,eAAAwX,MAAA;AAAA,cAAA,GAAAA,IAAA;AAAA,aAClC80C,UAAmC,oBAAIhwC,IAAG;MAAE;IAC9C;AAKe,QAAMiwC,yBAAN,cAAqCviC,aAA8B;MAAAhqB,eAAAwX,MAAA;AAAA,cAAA,GAAAA,IAAA;AAAA,aAChFg1C,eAA8B,CAAA;MAAE;MAEhCvhC,YAAY/X,OAAmC;AAC7C,aAAKs5C,aAAal2C,KAAK,oBAAI3H,IAAK,CAAA;AAEhC,eAAO,IAAI09C,gBAAgBn5C,KAAK;MAClC;MAEAgY,MAAMhY,OAAwB;AAC5B,YAAIA,UAAK,KAA0B;AACjC,eAAKs5C,aAAal2C,KAAK,oBAAI3H,IAAK,CAAA;QAClC;AAEA,cAAMuc,MAAMhY,KAAK;MACnB;MAEAiY,OAAO;AACL,cAAMjY,QAAQ,MAAMiY,KAAI;AAExB,YAAIjY,UAAK,KAA0B;AACjC,eAAKs5C,aAAa5kC,IAAG;QACvB;AAEA,eAAO1U;MACT;MAEAu5C,UAAU1jD,MAAc2jD,aAAuB;AAC7C,cAAM/4B,MAAM,KAAK64B,aAAaxyC;AAC9B,YAAI,KAAKwyC,aAAa74B,MAAM,CAAC,EAAExK,IAAIpgB,IAAI,GAAG;AACxC,iBAAO;QACT;AACA,YAAI,CAAC2jD,eAAe/4B,MAAM,GAAG;AAC3B,mBAAStL,IAAI,GAAGA,IAAIsL,MAAM,GAAGtL,KAAK;AAChC,gBAAI,KAAKmkC,aAAankC,CAAC,EAAEc,IAAIpgB,IAAI,EAAG,QAAO;UAC7C;QACF;AACA,eAAO;MACT;MAEAsiB,YAAYtiB,MAAcuiB,aAA0Bza,KAAe;AACjE,YAAIya,cAAW,MAA+B;AAC5C,cAAI,KAAKmhC,UAAU1jD,MAAM,IAAI,GAAG;AAC9B,iBAAKkhB,OAAOnR,MAAMzG,OAAOzE,kBAAkBiD,KAAK;cAC9CpQ,gBAAgBsI;YAClB,CAAC;UACH;AACA,eAAKyjD,aAAa,KAAKA,aAAaxyC,SAAS,CAAC,EAAEgS,IAAIjjB,IAAI;AACxD;QACF;AAEA,cAAMqiB,QAAQ,KAAKf,aAAY;AAC/B,YAAI1nB,OAAOyoB,MAAMkhC,QAAQh7C,IAAIvI,IAAI,KAAK;AAEtC,YAAIuiB,cAAW,MAAoC;AACjD,eAAKE,mBAAmBJ,OAAOriB,IAAI;AACnCqiB,gBAAMkhC,QAAQ/6C,IAAIxI,MAAMpG,OAAI,EAAgC;AAC5D;QACF;AAEA,cAAM0oB,YAAYtiB,MAAMuiB,aAAaza,GAAG;AAExC,YAAIya,cAAW,GAA0B;AACvC,cAAI,EAAEA,cAAW,IAA4B;AAE3C,iBAAKC,0BAA0BH,OAAOriB,MAAMuiB,aAAaza,GAAG;AAC5D,iBAAK2a,mBAAmBJ,OAAOriB,IAAI;UACrC;AACApG,iBAAOA,OAAuB;QAChC;AACA,YAAI2oB,cAAW,KAA6B;AAC1C3oB,iBAAOA,OAAuB;QAChC;AACA,YAAI2oB,cAAW,KAAmC;AAChD3oB,iBAAOA,OAA4B;QACrC;AACA,YAAI2oB,cAAW,KAA2B;AACxC3oB,iBAAOA,OAAyB;QAClC;AACA,YAAIA,KAAMyoB,OAAMkhC,QAAQ/6C,IAAIxI,MAAMpG,IAAI;MACxC;MAEA+oB,oBACEN,OACAriB,MACAuiB,aACS;AACT,cAAM3oB,OAAOyoB,MAAMkhC,QAAQh7C,IAAIvI,IAAI;AACnC,aAAKpG,OAAuB,KAAI,GAAG;AACjC,cAAI2oB,cAAW,KAA6B;AAG1C,kBAAMqhC,UAAU,CAAC,EAAErhC,cAAW;AAC9B,kBAAMshC,YAAYjqD,OAAI,KAA4B;AAClD,mBAAOgqD,YAAYC;UACrB;AACA,iBAAO;QACT;AACA,YACEthC,cAAW,QACV3oB,OAAI,KAAyB,GAC9B;AACA,cAAIyoB,MAAMtB,MAAMxY,IAAIvI,IAAI,IAAC,GAAqB;AAE5C,mBAAO,CAAC,EAAEuiB,cAAW;UACvB,OAAO;AAEL,mBAAO;UACT;QACF;AACA,YAAIA,cAAW,MAA6B3oB,OAAI,KAAuB,GAAG;AACxE,iBAAO;QACT;AAEA,eAAO,MAAM+oB,oBAAoBN,OAAOriB,MAAMuiB,WAAW;MAC3D;MAEAK,iBAAiBhV,IAAkB;AACjC,cAAM;UAAE5N;QAAM,IAAG4N;AAEjB,YAAI,KAAK81C,UAAU1jD,IAAI,EAAG;AAE1B,cAAM4qB,MAAM,KAAKzJ,WAAWlQ;AAC5B,iBAASqO,IAAIsL,MAAM,GAAGtL,KAAK,GAAGA,KAAK;AACjC,gBAAM+C,QAAQ,KAAKlB,WAAW7B,CAAC;AAC/B,gBAAM1lB,OAAOyoB,MAAMkhC,QAAQh7C,IAAIvI,IAAI;AACnC,eACGpG,OAAI,KAAuB,MAC3BA,OAAI,MAAoC,GACzC;AACA;UACF;QACF;AAEA,cAAMgpB,iBAAiBhV,EAAE;MAC3B;IACF;AClIA,QAAMk2C,gCAAiCnqD,UAAqB;AAC1D,aAAOA,KAAKC,SAAS,4BACjBkqD,8BAA8BnqD,KAAK4R,UAAU,IAC7C5R;IACN;AAQe,QAAeoqD,aAAf,cAAkC1qB,UAAU;MAqDzD5pB,aAAa9V,MAAY+V,QAAiB,OAAmC;AAAA,YAAAo4B,aAAAkc;AAC3E,YAAI13C,gBAAgByX;AACpB,YAAIpqB,KAAKC,SAAS,8BAAyBkuC,cAAInuC,KAAK8R,UAAK,QAAVq8B,YAAYx7B,eAAe;AACxEA,0BAAgBw3C,8BAA8BnqD,IAAI;AAClD,cAAI+V,OAAO;AAKT,gBAAIpD,cAAc1S,SAAS,cAAc;AACvC,mBAAKu+B,gBAAgB1D,iCACnBnrB,OAAOtK,gCACPrF,IACF;YACF,WACE2S,cAAc1S,SAAS,sBACvB,CAAC,KAAKiY,2BAA2BvF,aAAa,GAC9C;AAIA,mBAAKyD,MAAMzG,OAAOtK,gCAAgCrF,IAAI;YACxD;UACF,OAAO;AACL,iBAAKoW,MAAMzG,OAAOtK,gCAAgCrF,IAAI;UACxD;QACF;AAEA,gBAAQA,KAAKC,MAAI;UACf,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;AACH;UAEF,KAAK;AACFD,iBAAcC,OAAO;AACtB,qBACM0lB,IAAI,GAAGrO,SAAStX,KAAKgsB,WAAW1U,QAAQgzC,OAAOhzC,SAAS,GAC5DqO,IAAIrO,QACJqO,KACA;AAAA,kBAAA4kC;AACA,oBAAMr1C,OAAOlV,KAAKgsB,WAAWrG,CAAC;AAC9B,oBAAMxP,SAASwP,MAAM2kC;AACrB,mBAAKp0C,iCAAiChB,MAAMiB,QAAQJ,KAAK;AAEzD,kBACEI,UACCjB,KAAcjV,SAAS,kBAAasqD,eACrCvqD,KAAK8R,UAAK,QAAVy4C,aAAYlc,kBACZ;AACA,qBAAKj4B,MAAMzG,OAAOrH,mBAAmBtI,KAAK8R,MAAMu8B,gBAAgB;cAClE;YACF;AACA;UAEF,KAAK,kBAAkB;AACrB,kBAAM;cAAEtnC;cAAKmG;YAAO,IAAGlN;AACvB,gBAAI,KAAKkU,cAAcnN,GAAG,GAAG;AAC3B,mBAAKiP,WAAWC,eACd,KAAKjC,iBAAiBjN,GAAG,GACzBA,IAAIoH,IAAIvQ,KACV;YACF;AACA,iBAAKkY,aAAa5I,OAAO6I,KAAK;AAC9B;UACF;UAEA,KAAK,iBAAiB;AACpB,kBAAM,IAAI0uB,MACR,8HAEF;UACF;UAEA,KAAK;AACFzkC,iBAAcC,OAAO;AACtB,iBAAKmuC,iBACHpuC,KAAK2qB,WAAQ0/B,eACbrqD,KAAK8R,UAALu4C,OAAAA,SAAAA,aAAYhc,kBACZt4B,KACF;AACA;UAEF,KAAK;AACH,gBAAI/V,KAAKwqD,aAAa,KAAK;AACzB,mBAAKp0C,MAAMzG,OAAO3J,uBAAuBhG,KAAK2vC,KAAKxhC,IAAItQ,GAAG;YAC5D;AAECmC,iBAAcC,OAAO;AACtB,mBAAOD,KAAKwqD;AACZ,iBAAK10C,aAAa9V,KAAK2vC,MAAM55B,KAAK;AAClC;UAEF,KAAK;AAEH,iBAAKD,aAAanD,eAAeoD,KAAK;AACtC;QAKJ;MACF;MAEAG,iCACEhB,MACAiB,QACAJ,OACA;AACA,YAAIb,KAAKjV,SAAS,gBAAgB;AAChC,eAAKmW,MACHlB,KAAK7U,SAAS,SAAS6U,KAAK7U,SAAS,QACjCsP,OAAO7H,qBACP6H,OAAO5H,kBACXmN,KAAKnO,GACP;QACF,WAAWmO,KAAKjV,SAAS,iBAAiB;AACvCiV,eAAcjV,OAAO;AACtB,gBAAMwqD,MAAMv1C,KAAKlG;AACjB,eAAK07C,sBAAsBD,KAAwB,KAAK;AACxD,eAAK30C,aAAa20C,KAAK10C,KAAK;AAE5B,cAAI,CAACI,QAAQ;AACX,iBAAKC,MAAMzG,OAAOrH,mBAAmB4M,IAAI;UAC3C;QACF,OAAO;AACL,eAAKY,aAAaZ,MAAMa,KAAK;QAC/B;MACF;MAIAq4B,iBACEwB,UACAvB,kBACAt4B,OACM;AACN,cAAMlY,MAAM+xC,SAASt4B,SAAS;AAE9B,iBAASqO,IAAI,GAAGA,KAAK9nB,KAAK8nB,KAAK;AAC7B,gBAAMglC,MAAM/a,SAASjqB,CAAC;AACtB,cAAI,CAACglC,IAAK;AAEV,cAAIA,IAAI1qD,SAAS,iBAAiB;AAC/B0qD,gBAA+B1qD,OAAO;AACvC,kBAAMwqD,MAAME,IAAI37C;AAChB,iBAAK07C,sBAAsBD,KAAwB,IAAI;AACvD,iBAAK30C,aAAa20C,KAAK10C,KAAK;UAC9B,OAAO;AACL,iBAAKD,aAAa60C,KAAK50C,KAAK;UAC9B;AAEA,cAAI40C,IAAI1qD,SAAS,eAAe;AAC9B,gBAAI0lB,IAAI9nB,KAAK;AACX,mBAAKuY,MAAMzG,OAAOrH,mBAAmBqiD,GAAG;YACzC,WAAUtc,kBAAkB;AAC3B,mBAAKj4B,MAAMzG,OAAOrH,mBAAmB+lC,gBAAgB;YACvD;UACF;QACF;MACF;MAEAz4B,aAAa5V,MAAY6V,WAA8B;AACrD,gBAAQ7V,KAAKC,MAAI;UACf,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;AACH,mBAAO;UAET,KAAK,oBAAoB;AACvB,kBAAMqqD,OAAOtqD,KAAKgsB,WAAW1U,SAAS;AACtC,mBAAOtX,KAAKgsB,WAAWkiB,MAAM,CAACh5B,MAAMyQ,MAAM;AACxC,qBACEzQ,KAAKjV,SAAS,mBACb0lB,MAAM2kC,QAAQp1C,KAAKjV,SAAS,oBAC7B,KAAK2V,aAAaV,IAAI;YAE1B,CAAC;UACH;UAEA,KAAK;AACH,mBAAO,KAAKU,aAAa5V,KAAKkN,KAAK;UAErC,KAAK;AACH,mBAAO,KAAK0I,aAAa5V,KAAKgP,QAAQ;UAExC,KAAK;AACH,mBAAOhP,KAAK2qB,SAASujB,MACnB0c,aAAWA,YAAY,QAAQ,KAAKh1C,aAAag1C,OAAO,CAC1D;UAEF,KAAK;AACH,mBAAO5qD,KAAKwqD,aAAa;UAE3B,KAAK;AACH,mBAAO,KAAK50C,aAAa5V,KAAK4R,UAAU;UAE1C,KAAK;UACL,KAAK;AACH,mBAAO,CAACiE;UAEV;AACE,mBAAO;QACX;MACF;MAIAg6B,iBACED,UAIAE,qBAG0C;AAC1C,eAAOF;MACT;MAEAib,qBACEjb,UAGAE,qBACM;AACN,aAAKD,iBAAiBD,UAAUE,mBAAmB;AAEnD,mBAAW9C,QAAQ4C,UAAU;AAC3B,eAAI5C,QAAAA,OAAAA,SAAAA,KAAM/sC,UAAS,mBAAmB;AACpC,iBAAK4qD,qBAAqB7d,KAAKriB,QAAQ;UACzC;QACF;MACF;MAIAmgC,YAEEt1C,qBACe;AACf,cAAMxV,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT/mB,aAAKgP,WAAW,KAAK8+B,wBACnBt4B,qBACA4U,MACF;AACA,eAAO,KAAKzV,WAAW3U,MAAM,eAAe;MAC9C;MAIA+qD,mBAA4C;AAC1C,cAAM/qD,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT/mB,aAAKgP,WAAW,KAAKqjC,iBAAgB;AACrC,eAAO,KAAK19B,WAAW3U,MAAM,aAAa;MAC5C;MAGAqyC,mBAAwC;AAEtC,gBAAQ,KAAKn7B,MAAMjX,MAAI;UACrB,KAAA,GAAkB;AAChB,kBAAMD,OAAO,KAAKyU,UAAS;AAC3B,iBAAKsS,KAAI;AAET/mB,iBAAK2qB,WAAW,KAAKqgC,iBAGnBC,GAAAA,IAAAA,CACF;AACA,mBAAO,KAAKt2C,WAAW3U,MAAM,cAAc;UAC7C;UAEA,KAAA;AACE,mBAAO,KAAKkrD,gBAAe,GAAY,IAAI;QAC/C;AAGA,eAAO,KAAK5lB,gBAAe;MAC7B;MAGA0lB,iBAEE/a,OACAkb,eACA36C,OACsC;AACtC,cAAM46C,aAAa56C,QAAK;AAExB,cAAM66C,OAA6C,CAAA;AACnD,YAAI/f,QAAQ;AACZ,eAAO,CAAC,KAAK/X,IAAI0c,KAAK,GAAG;AACvB,cAAI3E,OAAO;AACTA,oBAAQ;UACV,OAAO;AACL,iBAAKzO,OAAM,EAAS;UACtB;AACA,cAAIuuB,cAAc,KAAKx6B,MAAK,EAAS,GAAG;AACtCy6B,iBAAKz3C,KAAK,IAAI;UACf,WAAU,KAAK2f,IAAI0c,KAAK,GAAG;AAC1B;UACD,WAAU,KAAKrf,MAAK,EAAY,GAAG;AAClC,gBAAIphB,OAAgB,KAAKu7C,iBAAgB;AACzC,gBACoC,KAAKp0C,UAAU,MAAM,KACvDnG,QAAK,GACL;AACAhB,qBAAO,KAAKwhC,uBAAuBxhC,IAAI;YACzC;AACA67C,iBAAKz3C,KAAKpE,IAAI;AACd,gBAAI,CAAC,KAAK87C,oBAAoBH,aAAa,GAAG;AAC5C,mBAAKtuB,OAAOoT,KAAK;AACjB;YACF;UACF,OAAO;AACL,kBAAMj5B,aAAa,CAAA;AACnB,gBAAI,KAAK4Z,MAAK,EAAM,KAAK,KAAKja,UAAU,YAAY,GAAG;AACrD,mBAAKP,MAAMzG,OAAOlF,+BAA+B,KAAKyM,MAAM3B,QAAQ;YACtE;AAEA,mBAAO,KAAKqb,MAAK,EAAM,GAAG;AACxB5Z,yBAAWpD,KAAK,KAAK23C,eAAgB,CAAA;YACvC;AACAF,iBAAKz3C,KAAK,KAAK43C,wBAAwBh7C,OAAOwG,UAAU,CAAC;UAC3D;QACF;AACA,eAAOq0C;MACT;MAGAI,yBAEEv2C,MACa;AACb,aAAK6R,KAAI;AAET7R,aAAKlG,WAAW,KAAKs2B,gBAAe;AACpC,aAAKgmB,oBAAmB,GAA0B;AAClD,eAAO,KAAK32C,WAAWO,MAAM,aAAa;MAC5C;MAGAw2C,uBAAqE;AACnE,cAAM;UAAEzrD;UAAMsV;YAAa,KAAK2B;AAChC,YAAIjX,SAAI,IAAkB;AACxB,iBAAO,KAAKwrD,yBAAyB,KAAKh3C,UAAW,CAAA;QACvD;AAEA,cAAMS,OAAO,KAAKT,UAAS;AAC3B,YAAIxU,SAAI,KAAqB;AAC3B,eAAK01B,aAAa,wBAAwBpgB,QAAQ;AAClD,eAAKS,WAAWC,eAAe,KAAKiB,MAAMhK,OAAOqI,QAAQ;AACzDL,eAAKnO,MAAM,KAAK8M,iBAAgB;QAClC,OAAO;AACL,eAAK83C,kBAAkBz2C,IAAI;QAC7B;AACAA,aAAK3C,SAAS;AACd,eAAO,KAAKw+B,kBACV77B,MACAK,UACA,OACA,OACA,MACA,KACF;MACF;MAEAi2C,wBAEEh7C,OACAwG,YAC+B;AAC/B,cAAM24B,OAAO,KAAKsB,kBAAiB;AACnC,YACoC,KAAKt6B,UAAU,MAAM,KACvDnG,QAAK,GACL;AACA,eAAKwgC,uBAAuBrB,IAAI;QAClC;AACA,cAAMgb,MAAM,KAAK1Z,kBAAkBtB,KAAKxhC,IAAIvQ,OAAO+xC,IAAI;AACvD,YAAI34B,WAAWM,QAAQ;AACrBq4B,eAAK34B,aAAaA;QACpB;AACA,eAAO2zC;MACT;MAGA3Z,uBAAuB5E,OAAyB;AAC9C,eAAOA;MACT;MAIA6E,kBAEE17B,UACAo6B,MACS;AAAA,YAAA5E,WAAA6gB;AACT,SAAA7gB,YAAAx1B,aAAQ,OAAAw1B,YAARx1B,WAAa,KAAK2B,MAAM3B;AACxBo6B,gBAAIic,QAAGjc,SAAI,OAAAic,QAAI,KAAKvZ,iBAAgB;AACpC,YAAI,CAAC,KAAK9e,IAAG,EAAM,EAAG,QAAOoc;AAE7B,cAAM3vC,OAAO,KAAK2/B,YAA+BpqB,QAAQ;AACzDvV,aAAK2vC,OAAOA;AACZ3vC,aAAKsoC,QAAQ,KAAKwF,wBAAuB;AACzC,eAAO,KAAKn5B,WAAW3U,MAAM,mBAAmB;MAClD;MA8BAyV,YACExV,MAEAyV,2BAEAC,SACsC;AACtC,gBAAQ1V,MAAI;UACV,KAAK;AACH,mBAAO;UACT,KAAK;AACH,mBAAO;UACT,KAAK;AACH,mBAAO;UACT,KAAK;AACH,mBAAO;UACT,KAAK;AACH,mBAAO;UACT,KAAK;AACH,mBAAO;QACX;AACA,eAAO;MACT;MAGAiY,2BAA2BtG,YAA2B;AACpD,eAAOA,WAAW3R,SAAS;MAC7B;MA0BA4rD,UACEj6C,YAMA9M,UACA6Q,UAAoB,IACpBm2C,eAAoC,OACpClY,oBAA6B,OAC7BmY,2BAAoC,OAC9B;AAAA,YAAAC;AACN,cAAM/rD,OAAO2R,WAAW3R;AAKxB,YAAI,KAAKmY,eAAexG,UAAU,EAAG;AAErC,cAAMsG,6BACJ,KAAKA,2BAA2BtG,UAAU;AAE5C,YAAIsG,8BAA8BjY,SAAS,oBAAoB;AAC7D,cAAIiY,4BAA4B;AAC9B,iBAAKyd,aAAa,0BAA0B/jB,WAAWzD,IAAIvQ,KAAK;AAChE,gBAAIkH,SAAS7E,SAAS,wBAAwB;AAC5C,mBAAKmW,MAAMzG,OAAO3K,4BAA4B4M,YAAY;gBACxD9M;cACF,CAAC;YACH;UACF;AAEA,cAAI6Q,YAAO,IAA4B;AACrC,iBAAKS,MAAMzG,OAAOpK,+BAA+BqM,UAAU;UAC7D;AACA;QACF;AAEA,YAAI3R,SAAS,cAAc;AACzB,eAAKgsD,gBAAgBr6C,YAAY+D,SAASi+B,iBAAiB;AAE3D,gBAAM;YAAEvtC;UAAM,IAAGuL;AAEjB,cAAIk6C,cAAc;AAChB,gBAAIA,aAAarlC,IAAIpgB,IAAI,GAAG;AAC1B,mBAAK+P,MAAMzG,OAAO9H,WAAW+J,UAAU;YACzC,OAAO;AACLk6C,2BAAaxiC,IAAIjjB,IAAI;YACvB;UACF;AAEA;QACF;AAEA,cAAM6lD,WAAW,KAAKz2C,YACpBxV,MACA,EAAE8rD,6BAAwBC,oBAAIp6C,WAAWE,UAAXk6C,QAAAA,kBAAkBr5C,kBAC9C7N,SAAS7E,SAAS,wBACpB0V,OACF;AAEA,YAAIu2C,aAAa,KAAM;AACvB,YAAIA,aAAa,OAAO;AACtB,gBAAMC,kBACJx2C,YAAO,KACHhG,OAAO9K,aACP8K,OAAO5K;AAEb,eAAKqR,MAAM+1C,iBAAiBv6C,YAAY;YAAE9M;UAAS,CAAC;AACpD;QACF;AAEA,YAAIiC,KAAaqlD;AACjB,YAAI,OAAOF,aAAa,UAAU;AAChCnlD,gBAAMmlD;AACNE,sCAA4BnsD,SAAS;QACvC,OAAO;AACL,WAAC8G,KAAKqlD,yBAAyB,IAAIF;QACrC;AAEA,cAAMG,eACJpsD,SAAS,kBAAkBA,SAAS,kBAC/B;UAAEA;QAAM,IACT6E;AAGN,cAAMgtB,MAAMlgB,WAAW7K,GAAG;AAC1B,YAAIkI,MAAMC,QAAQ4iB,GAAG,GAAG;AACtB,qBAAWw6B,SAASx6B,KAAK;AACvB,gBAAIw6B,OAAO;AACT,mBAAKT,UACHS,OACAD,cACA12C,SACAm2C,cACAlY,mBACAwY,yBACF;YACF;UACF;QACD,WAAUt6B,KAAK;AACd,eAAK+5B,UACH/5B,KACAu6B,cACA12C,SACAm2C,cACAlY,mBACAwY,yBACF;QACF;MACF;MAEAH,gBACEvvC,IACAkM,aACAgrB,oBAA6B,OAC7B;AACA,YACE,KAAK18B,MAAM+O,WACV2tB,oBACGjtB,yBAAyBjK,GAAGrW,MAAM,KAAKkgB,QAAQ,IAC/CG,6BAA6BhK,GAAGrW,IAAI,IACxC;AACA,cAAIuiB,gBAAW,IAA4B;AACzC,iBAAKxS,MAAMzG,OAAOnE,qBAAqBkR,IAAI;cAAEjR,eAAeiR,GAAGrW;YAAK,CAAC;UACvE,OAAO;AACL,iBAAK+P,MAAMzG,OAAOjE,4BAA4BgR,IAAI;cAChD/Q,aAAa+Q,GAAGrW;YAClB,CAAC;UACH;QACF;AAEA,YAAIuiB,cAAW,QAAyClM,GAAGrW,SAAS,OAAO;AACzE,eAAK+P,MAAMzG,OAAO/J,qBAAqB8W,EAAE;QAC3C;AAEA,YAAI,EAAEkM,cAAW,KAA2B;AAC1C,eAAK2jC,0BAA0B7vC,IAAIkM,WAAW;QAChD;MACF;MAEA2jC,0BAA0BC,YAAwB72C,SAAsB;AACtE,aAAK+S,MAAMC,YAAY6jC,WAAWnmD,MAAMsP,SAAS62C,WAAWr+C,IAAIvQ,KAAK;MACvE;MAEA8sD,sBAAsB1qD,MAAYysD,cAA6B;AAC7D,gBAAQzsD,KAAKC,MAAI;UACf,KAAK;AACH,iBAAKyqD,sBAAsB1qD,KAAK4R,YAAY66C,YAAY;AACxD;UACF,KAAK;UACL,KAAK;AACH;UACF,KAAK;UACL,KAAK;AACH,gBAAIA,aAAc;UAEpB;AACE,iBAAKr2C,MAAMzG,OAAOlK,8BAA8BzF,IAAI;QACxD;MACF;MAEAsrD,oBACErb,OACS;AACT,YAAI,CAAC,KAAKrf,MAAK,EAAS,GAAG;AACzB,iBAAO;QACT;AAEA,aAAKxa,MACH,KAAK4d,kBAAiB,MAAOic,QACzBtgC,OAAOrH,oBACPqH,OAAOlN,kBACX,KAAKyU,MAAM3B,QACb;AAEA,eAAO;MACT;IACF;AC9tBA,aAASm3C,QAAWC,GAAiB;AACnC,UAAIA,KAAK,MAAM;AACb,cAAM,IAAIloB,MAAM,cAAckoB,CAAC,SAAS;MAC1C;AACA,aAAOA;IACT;AAEA,aAASC,OAAOD,GAAkB;AAChC,UAAI,CAACA,GAAG;AACN,cAAM,IAAIloB,MAAM,aAAa;MAC/B;IACF;AAgBA,QAAMooB,WAAW99C,2BAA2B;MAC1C+9C,iCAAiCA,CAAC;QAAEC;YAClC,WAAWA,UAAU;MACvBC,gCAAgCA,CAAC;QAC/BC;YAIA,aAAaA,YAAY;MAC3BC,0BACE;MACFr/C,oCACE;MACFC,kCAAkC;MAClCq/C,uBAAuB;MACvBC,wBAAwB;MACxBr/C,oEACE;MACFs/C,8BACE;MACFC,iBAAiBA,CAAC;QAAEjtD;YAClB,+BAA+BA,IAAI;MACrCktD,iCACE;MACFC,kCACE;MACFC,gCAGEA,CAAC;QAAEC;MAAyC,MAC1C;MACJC,mBAAmBA,CAAC;QAAED;YACpB,wBAAwBA,QAAQ;MAGlCE,yBAAyBA,CAAC;QAAErhD;YAC1B,IAAIA,KAAK;MACXshD,oBAAoB;MACpBC,qBAAqB;MACrBC,mCACE;MACFC,0BAA0B;MAC1BxsB,+BACE;MACFysB,uBAAuBA,CAAC;QACtBC;YAIA,IAAIA,UAAU,CAAC,CAAC,mCAAmCA,UAAU,CAAC,CAAC;MACjEC,2BACE;MACFC,gCAAgCA,CAAC;QAC/BV;YAIA,4DAA4DA,QAAQ;MACtEW,0BACE;MACFC,2BACE;MACFC,yBACE;MACFC,uCACE;MACFC,6BAA6BA,CAAC;QAAEf;YAC9B,IAAIA,QAAQ;MACdgB,gCAAgCA,CAAC;QAAEhB;YACjC,IAAIA,QAAQ;MACdiB,yCAAyCA,CAAC;QACxCjB;YAIA,IAAIA,QAAQ;MACdkB,uBAAuBA,CAAC;QACtBC;YAIA,IAAIA,iBAAiB,CAAC,CAAC,4BAA4BA,iBAAiB,CAAC,CAAC;MACxEC,mDACE;MAEFC,yBACE;MACFC,sBACE;MACFC,mCACE;MACFC,0CACE;MACFC,4BACE;MACFC,uBACE;MACFntB,mBACE;MACFotB,2BACE;MACFC,gCAAgCA,CAAC;QAC/B5B;YAIA,4DAA4DA,QAAQ;MACtE6B,4BACE;MACFC,wBACE;MACFC,uBACE;MACFzhD,wCACE;MACFC,oCACE;MACFC,iCACE;MACFwhD,yCAAyCA,CAAC;QACxCC;MAGD,MACC,yBAAyBA,iBAAiB,kDAAkDA,iBAAiB;MAC/GC,+BACE;MACFC,wBACE;MACFC,2BACE;MACFC,wCACE;MACFC,iCACE;MACFC,iCACE;MACFC,6BACE;MACFC,oBACE;MACFC,0BAA0B;MAC1BC,+BAA+B;MAC/BC,+BACE;MACFC,kCACE;MACFC,mCAAmCA,CAAC;QAAEvwD;YACpC,yFAAyFA,IAAI;IACjG,CAAC;AAMD,aAASwwD,oBAAoBvjD,OAAgD;AAC3E,cAAQA,OAAK;QACX,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT,KAAK;AACH,iBAAO;QACT;AACE,iBAAOkd;MACX;IACF;AAEA,aAASsmC,mBAAmBhD,UAA+C;AACzE,aACEA,aAAa,aAAaA,aAAa,YAAYA,aAAa;IAEpE;AAEA,aAASiD,wBACPjD,UACmC;AACnC,aAAOA,aAAa,QAAQA,aAAa;IAC3C;AASA,QAAAkD,aAAgB5gD,gBACd,MAAM6gD,8BAA8B7gD,WAA6B;MAAA1S,eAAAwX,MAAA;AAAA,cAAA,GAAAA,IAAA;AAAA,aA4X/Dg8C,wBAAwB,KAAKC,iBAAiBC,KAAK,MAAM;UACvDC,kBAAkB,CAAC,MAAM,KAAK;UAC9BC,qBAAqB,CACnB,SACA,UACA,WACA,aACA,YACA,WACA,YACA,UAAU;UAEZC,eAAetE,SAAS6B;QAC1B,CAAC;AAAC,aAEF0C,uBAAuB,KAAKL,iBAAiBC,KAAK,MAAM;UACtDC,kBAAkB,CAAC,OAAO;UAE1BC,qBAAqB,CAAC,MAAM,KAAK;UACjCC,eAAetE,SAAS8B;QAC1B,CAAC;AAAC,aAEF0C,6BAA6B,KAAKN,iBAAiBC,KAAK,MAAM;UAC5DC,kBAAkB,CAAC,MAAM,OAAO,OAAO;UACvCC,qBAAqB,CACnB,UACA,WACA,aACA,YACA,WACA,YACA,UAAU;UAEZC,eAAetE,SAAS6B;QAC1B,CAAC;MAAC;MA7ZFtwB,kBAAgE;AAC9D,eAAOyrB;MACT;MAEAyH,iBAA0B;AAGxB,eAAOztC,kBAAkB,KAAK3M,MAAMjX,IAAI;MAC1C;MAEAsxD,2BAA2B;AACzB,eACE,KAAK3gC,MAAK,CAAY,KACtB,KAAKA,MAAK,CAAU,KACpB,KAAKA,MAAa,EAAA,KAClB,KAAKA,MAAiB,EAAA,KACtB,KAAKA,MAAK,GAAe,KACzB,KAAKgN,sBAAqB;MAE9B;MAEA4zB,4CAA4C;AAC1C,aAAKzqC,KAAI;AACT,YAAI,KAAKyV,sBAAqB,GAAI;AAChC,iBAAO;QACT;AACA,eAAO,KAAK+0B,yBAAwB;MACtC;MAEAE,+BAA+B;AAI7B,YAAI,KAAK7gC,MAAK,GAAW,GAAG;AAC1B,eAAK7J,KAAI;AACT,iBAAO,KAAKwqC,yBAAwB;QACtC;AACA,eAAO,KAAKC,0CAAyC;MACvD;MAGAE,gBACET,kBACAU,+BACsB;AACtB,YACE,CAAC9tC,kBAAkB,KAAK3M,MAAMjX,IAAI,KAClC,KAAKiX,MAAMjX,SAAI,MACf,KAAKiX,MAAMjX,SAAI,IACf;AACA,iBAAOmqB;QACT;AAEA,cAAMsjC,WAAW,KAAKx2C,MAAMhK;AAC5B,YAAI+jD,iBAAiBx5B,SAASi2B,QAAQ,GAAG;AACvC,cAAIiE,iCAAiC,KAAKC,wBAAuB,GAAI;AACnE,mBAAOxnC;UACT;AACA,cAAI,KAAKynC,WAAW,KAAKJ,6BAA6BT,KAAK,IAAI,CAAC,GAAG;AACjE,mBAAOtD;UACT;QACF;AACA,eAAOtjC;MACT;MAOA2mC,iBACE;QACEE;QACAC;QACAS;QACAR,gBAAgBtE,SAAS4B;MAM1B,GACDqD,UACM;AACN,cAAMC,eAAeA,CACnB5jD,KACAu/C,UACAsE,QACAC,UACG;AACH,cAAIvE,aAAasE,UAAUF,SAASG,KAAK,GAAG;AAC1C,iBAAK77C,MAAMy2C,SAAS+B,uBAAuBzgD,KAAK;cAC9C0gD,kBAAkB,CAACmD,QAAQC,KAAK;YAClC,CAAC;UACH;;AAEF,cAAMC,eAAeA,CACnB/jD,KACAu/C,UACAyE,MACAC,SACG;AACH,cACGN,SAASK,IAAI,KAAKzE,aAAa0E,QAC/BN,SAASM,IAAI,KAAK1E,aAAayE,MAChC;AACA,iBAAK/7C,MAAMy2C,SAASoB,uBAAuB9/C,KAAK;cAC9C+/C,WAAW,CAACiE,MAAMC,IAAI;YACxB,CAAC;UACH;;AAGF,mBAAS;AACP,gBAAM;YAAE78C;cAAa,KAAK2B;AAC1B,gBAAMw2C,WAA0C,KAAKgE,gBACnDT,iBAAiB79C,OAAO89C,uBAAmB,OAAnBA,sBAAuB,CAAA,CAAE,GACjDS,6BACF;AAEA,cAAI,CAACjE,SAAU;AAEf,cAAIgD,mBAAmBhD,QAAQ,GAAG;AAChC,gBAAIoE,SAASO,eAAe;AAC1B,mBAAKj8C,MAAMy2C,SAASY,gCAAgCl4C,UAAU;gBAC5Dm4C;cACF,CAAC;YACH,OAAO;AACLqE,2BAAax8C,UAAUm4C,UAAUA,UAAU,UAAU;AACrDqE,2BAAax8C,UAAUm4C,UAAUA,UAAU,QAAQ;AACnDqE,2BAAax8C,UAAUm4C,UAAUA,UAAU,UAAU;AAErDoE,uBAASO,gBAAgB3E;YAC3B;UACF,WAAWiD,wBAAwBjD,QAAQ,GAAG;AAC5C,gBAAIoE,SAASpE,QAAQ,GAAG;AACtB,mBAAKt3C,MAAMy2C,SAASc,mBAAmBp4C,UAAU;gBAAEm4C;cAAS,CAAC;YAC/D;AACAoE,qBAASpE,QAAQ,IAAI;AAErBqE,yBAAax8C,UAAUm4C,UAAU,MAAM,KAAK;UAC9C,OAAO;AACL,gBAAI4E,eAAA5f,KAAcof,UAAUpE,QAAQ,GAAG;AACrC,mBAAKt3C,MAAMy2C,SAASc,mBAAmBp4C,UAAU;gBAAEm4C;cAAS,CAAC;YAC/D,OAAO;AACLqE,2BAAax8C,UAAUm4C,UAAU,UAAU,UAAU;AACrDqE,2BAAax8C,UAAUm4C,UAAU,UAAU,UAAU;AACrDqE,2BAAax8C,UAAUm4C,UAAU,YAAY,UAAU;AACvDqE,2BAAax8C,UAAUm4C,UAAU,YAAY,UAAU;AAEvDwE,2BAAa38C,UAAUm4C,UAAU,WAAW,UAAU;AACtDwE,2BAAa38C,UAAUm4C,UAAU,UAAU,UAAU;YACvD;AACAoE,qBAASpE,QAAQ,IAAI;UACvB;AAEA,cAAIwD,uBAAmB,QAAnBA,oBAAqBz5B,SAASi2B,QAAQ,GAAG;AAC3C,iBAAKt3C,MAAM+6C,eAAe57C,UAAU;cAClCm4C;YACF,CAAC;UACH;QACF;MACF;MAEA6E,mBAAmBlyD,MAA+B;AAChD,gBAAQA,MAAI;UACV,KAAK;UACL,KAAK;AACH,mBAAO,KAAKuwB,MAAK,CAAU;UAC7B,KAAK;AACH,mBAAO,KAAKA,MAAK,CAAU;UAC7B,KAAK;AACH,mBAAO,KAAKA,MAAK,CAAY;UAC/B,KAAK;AACH,mBAAO,KAAKA,MAAK,EAAM;QAC3B;MACF;MAEA4hC,YACEnyD,MACAoyD,cACK;AACL,cAAMlkB,SAAc,CAAA;AACpB,eAAO,CAAC,KAAKgkB,mBAAmBlyD,IAAI,GAAG;AAErCkuC,iBAAO36B,KAAK6+C,aAAY,CAAE;QAC5B;AACA,eAAOlkB;MACT;MAEAmkB,qBACEryD,MACAoyD,cACAE,qBAGK;AACL,eAAOjG,QACL,KAAKkG,2BACHvyD,MACAoyD,cACoB,MACpBE,mBACF,CACF;MACF;MAMAC,2BACEvyD,MACAoyD,cACAI,eACAF,qBAGiB;AACjB,cAAMpkB,SAAc,CAAA;AACpB,YAAIukB,mBAAmB;AAEvB,mBAAS;AACP,cAAI,KAAKP,mBAAmBlyD,IAAI,GAAG;AACjC;UACF;AACAyyD,6BAAmB;AAEnB,gBAAMlI,UAAU6H,aAAY;AAC5B,cAAI7H,WAAW,MAAM;AACnB,mBAAOxgC;UACT;AACAmkB,iBAAO36B,KAAKg3C,OAAO;AAEnB,cAAI,KAAKr3B,IAAG,EAAS,GAAG;AACtBu/B,+BAAmB,KAAK57C,MAAMC,gBAAgB1Z;AAC9C;UACF;AAEA,cAAI,KAAK80D,mBAAmBlyD,IAAI,GAAG;AACjC;UACF;AAEA,cAAIwyD,eAAe;AAEjB,iBAAKh2B,OAAM,EAAS;UACtB;AACA,iBAAOzS;QACT;AAEA,YAAIuoC,qBAAqB;AACvBA,8BAAoBzlD,QAAQ4lD;QAC9B;AAEA,eAAOvkB;MACT;MAEAwkB,qBACE1yD,MACAoyD,cACAO,SACAC,gBACAN,qBAGK;AACL,YAAI,CAACM,gBAAgB;AACnB,cAAID,SAAS;AACX,iBAAKn2B,OAAM,CAAY;UACzB,OAAO;AACL,iBAAKA,OAAM,EAAM;UACnB;QACF;AAEA,cAAM0R,SAAS,KAAKmkB,qBAClBryD,MACAoyD,cACAE,mBACF;AAEA,YAAIK,SAAS;AACX,eAAKn2B,OAAM,CAAY;QACzB,OAAO;AACL,eAAKA,OAAM,EAAM;QACnB;AAEA,eAAO0R;MACT;MAEA2kB,oBAAoC;AAClC,cAAMlzD,OAAO,KAAKyU,UAAS;AAC3B,aAAKooB,OAAM,EAAW;AACtB,aAAKA,OAAM,EAAU;AACrB,YAAI,CAAC,KAAKjM,MAAK,GAAU,GAAG;AAC1B,eAAKxa,MAAMy2C,SAASyD,+BAA+B,KAAKp5C,MAAM3B,QAAQ;QACxE;AAGAvV,aAAKgP,WAAW,MAAMy3B,cAAa;AACnC,YACE,KAAK9vB,UAAU,kBAAkB,KACC,KAAKA,UAAU,kBAAkB,GACnE;AACA3W,eAAKoQ,UAAU;QACjB;AACA,YAAI,KAAKmjB,IAAG,EAAS,GAAG;AACtB,cAEE,CAAC,KAAK5c,UAAU,kBAAkB,GAClC;AACA,iBAAKgf,aAAa,kBAAkB;UACtC;AACA,cAAI,CAAC,KAAK/E,MAAK,EAAU,GAAG;AAC1B5wB,iBAAKoQ,UAAU,MAAM09B,wBAAuB;AAC5C,iBAAKva,IAAG,EAAS;UACnB;QACF;AACA,aAAKsJ,OAAM,EAAU;AAErB,YAAI,KAAKtJ,IAAG,EAAO,GAAG;AAGpBvzB,eAAKmzD,YAAY,KAAKC,kBAAiB;QACzC;AACA,YAAI,KAAKxiC,MAAK,EAAM,GAAG;AACrB5wB,eAAK2T,iBAAiB,KAAK0/C,qBAAoB;QACjD;AACA,eAAO,KAAK1+C,WAAW3U,MAAM,cAAc;MAC7C;MAEAozD,kBAAkBE,qBAA8B,MAAsB;AACpE,YAAIrL,SAAyB,KAAK3iB,gBAAgBguB,kBAAkB;AACpE,eAAO,KAAK//B,IAAG,EAAO,GAAG;AACvB,gBAAMvzB,OACJ,KAAKiY,gBAAmCgwC,MAAM;AAChDjoD,eAAK2vC,OAAOsY;AACZjoD,eAAKsoC,QAAQ,KAAKhD,gBAAgBguB,kBAAkB;AACpDrL,mBAAS,KAAKtzC,WAAW3U,MAAM,iBAAiB;QAClD;AACA,eAAOioD;MACT;MAEAsL,uBAA0C;AACxC,cAAMvzD,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKwzD,WAAW,KAAKJ,kBAAiB;AACtC,YAAI,CAAC,KAAK52B,sBAAqB,KAAM,KAAK5L,MAAW,EAAA,GAAG;AACtD5wB,eAAK2T,iBAAiB,KAAK0/C,qBAAoB;QACjD;AACA,eAAO,KAAK1+C,WAAW3U,MAAM,iBAAiB;MAChD;MAEAyzD,yBAAyBC,KAAsC;AAC7D,aAAK3sC,KAAI;AACT,cAAM/mB,OAAO,KAAKiY,gBAAmCy7C,GAAG;AACxD1zD,aAAK2zD,gBAAgBD;AACrB1zD,aAAK8lC,iBAAiB,KAAK8tB,sBAAqC,KAAK;AACrE5zD,aAAK6zD,UAAU;AACf,eAAO,KAAKl/C,WAAW3U,MAAM,iBAAiB;MAChD;MAEA8zD,sBAAoC;AAClC,cAAM9zD,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,YAAY;MAC3C;MAEA+zD,mBAAkC;AAChC,cAAM/zD,OAAO,KAAKyU,UAAS;AAC3B,aAAKooB,OAAM,EAAW;AACtB,YAAI,KAAKjM,MAAK,EAAW,GAAG;AAC1B5wB,eAAKg0D,WAAW,KAAKd,kBAAiB;QACxC,OAAO;AACLlzD,eAAKg0D,WAAW,KAAKZ,kBAAiB;QACxC;AACA,YAAI,CAAC,KAAK52B,sBAAqB,KAAM,KAAK5L,MAAW,EAAA,GAAG;AACtD5wB,eAAK2T,iBAAiB,KAAK0/C,qBAAoB;QACjD;AACA,eAAO,KAAK1+C,WAAW3U,MAAM,aAAa;MAC5C;MAsCAi0D,qBACEC,gBACmB;AACnB,cAAMl0D,OAAO,KAAKyU,UAAS;AAE3By/C,uBAAel0D,IAAI;AAEnBA,aAAKqG,OAAO,KAAK8tD,yBAAwB;AACzCn0D,aAAKo0D,aAAa,KAAKC,mBAAkB,EAAY;AACrDr0D,aAAK6mC,UAAU,KAAKwtB,mBAAkB,EAAM;AAC5C,eAAO,KAAK1/C,WAAW3U,MAAM,iBAAiB;MAChD;MAEAs0D,yBACEJ,gBACiD;AACjD,YAAI,KAAKtjC,MAAK,EAAM,GAAG;AACrB,iBAAO,KAAK2jC,sBAAsBL,cAAc;QAClD;MACF;MAEAK,sBAAsBL,gBAAmD;AACvE,cAAMl0D,OAAO,KAAKyU,UAAS;AAE3B,YAAI,KAAKmc,MAAW,EAAA,KAAK,KAAKA,MAAoB,GAAA,GAAG;AACnD,eAAK7J,KAAI;QACX,OAAO;AACL,eAAK3hB,WAAU;QACjB;AAEA,cAAMutD,sBAAsB;UAAEzlD,OAAO;;AAErClN,aAAKwS,SAAS,KAAKugD,qBACjB,6BACA,KAAKkB,qBAAqBjD,KAAK,MAAMkD,cAAc,GACrC,OACO,MACrBvB,mBACF;AACA,YAAI3yD,KAAKwS,OAAO8E,WAAW,GAAG;AAC5B,eAAKlB,MAAMy2C,SAASiB,qBAAqB9tD,IAAI;QAC/C;AACA,YAAI2yD,oBAAoBzlD,UAAU,IAAI;AACpC,eAAK4uB,SAAS97B,MAAM,iBAAiB2yD,oBAAoBzlD,KAAK;QAChE;AACA,eAAO,KAAKyH,WAAW3U,MAAM,4BAA4B;MAC3D;MAIAw0D,gBACEC,aACAC,WACM;AAEN,cAAMC,sBAAsBF,gBAAwB;AAGpD,cAAMG,YAAsD;AAC5D,cAAMC,gBAEF;AAEJH,kBAAU/gD,iBAAiB,KAAK2gD,yBAC9B,KAAKlD,oBACP;AACA,aAAKv0B,OAAM,EAAU;AACrB63B,kBAAUE,SAAS,IAAI,KAAKE,+BAA8B;AAC1D,YAAIH,qBAAqB;AACvBD,oBAAUG,aAAa,IACrB,KAAKE,qCAAqCN,WAAW;QACxD,WAAU,KAAK7jC,MAAM6jC,WAAW,GAAG;AAClCC,oBAAUG,aAAa,IACrB,KAAKE,qCAAqCN,WAAW;QACzD;MACF;MAEAK,iCAEE;AACA,cAAM9wB,OAAO,MAAMgnB,iBAGjBC,IAAAA,IAAAA,CACF;AACA,mBAAW16C,WAAWyzB,MAAM;AAC1B,gBAAM;YAAE/jC;UAAM,IAAGsQ;AACjB,cAAItQ,SAAS,uBAAuBA,SAAS,uBAAuB;AAClE,iBAAKmW,MAAMy2C,SAAS2D,mCAAmCjgD,SAAS;cAC9DtQ;YACF,CAAC;UACH;QACF;AACA,eAAO+jC;MAIT;MAEAgxB,6BAAmC;AACjC,YAAI,CAAC,KAAKzhC,IAAY,EAAA,KAAK,CAAC,KAAKmJ,iBAAgB,GAAI;AACnD,eAAKG,OAAM,EAAQ;QACrB;MACF;MAEAo4B,uBACE50D,MACAL,MAGkE;AAClE,aAAKw0D,gBAA0Bx0D,IAAAA,IAAI;AACnC,aAAKg1D,2BAA0B;AAC/B,eAAO,KAAKrgD,WAAW3U,MAAMK,IAAI;MACnC;MAEA60D,kCAAkC;AAChC,aAAKnuC,KAAI;AACT,YAAIlD,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AACtC,eAAK8mB,KAAI;AACT,iBAAO,KAAK6J,MAAK,EAAS;QAC5B;AACA,eAAO;MACT;MAEAukC,yBACEn1D,MACgC;AAChC,YACE,EACE,KAAK4wB,MAAK,CAAY,KACtB,KAAKwkC,YAAY,KAAKF,gCAAgClE,KAAK,IAAI,CAAC,IAElE;AACA;QACF;AAEA,aAAKn0B,OAAM,CAAY;AACvB,cAAM5oB,KAAK,KAAKqxB,gBAAe;AAC/BrxB,WAAG6xB,iBAAiB,KAAK8tB,sBAAqB;AAC9C,aAAKr7C,iBAAiBtE,EAAE;AAExB,aAAK4oB,OAAM,CAAY;AACvB78B,aAAKq1D,aAAa,CAACphD,EAAE;AAErB,cAAMhU,OAAO,KAAKq1D,yBAAwB;AAC1C,YAAIr1D,KAAMD,MAAK8lC,iBAAiB7lC;AAChC,aAAK+0D,2BAA0B;AAC/B,eAAO,KAAKrgD,WAAW3U,MAAM,kBAAkB;MACjD;MAEAu1D,iCACEv1D,MACAw1D,UAC6C;AAC7C,YAAI,KAAKjiC,IAAe,EAAA,EAAGvzB,MAAKuW,WAAW;AAC3C,cAAMk/C,UAAez1D;AAErB,YAAI,KAAK4wB,MAAe,EAAA,KAAK,KAAKA,MAAW,EAAA,GAAG;AAC9C,cAAI4kC,UAAU;AACZ,iBAAKp/C,MAAMy2C,SAAS0C,4BAA4BvvD,IAAI;UACtD;AACA,gBAAMuS,SAA8BkjD;AACpC,cAAIljD,OAAOlS,QAAQ,KAAKuwB,MAAW,EAAA,GAAG;AACpC,iBAAKxa,MACHy2C,SAAS/+C,kCACT,KAAKoJ,MAAM2X,YAAW,CACxB;UACF;AACA,eAAK2lC,gBAA0BjiD,IAAAA,MAAM;AACrC,eAAKyiD,2BAA0B;AAC/B,gBAAMJ,YAEF;AACJ,gBAAMC,gBAEF;AACJ,cAAItiD,OAAOlS,SAAS,OAAO;AACzB,gBAAIkS,OAAOqiD,SAAS,EAAEt9C,SAAS,GAAG;AAChC,mBAAKlB,MAAMzG,OAAO7O,gBAAgB,KAAKoW,MAAM2X,YAAW,CAAE;AAC1D,kBAAI,KAAK2hB,YAAYj+B,OAAOqiD,SAAS,EAAE,CAAC,CAAC,GAAG;AAC1C,qBAAKx+C,MACHy2C,SAASh/C,oCACT,KAAKqJ,MAAM2X,YAAW,CACxB;cACF;YACF;UACF,WAAWtc,OAAOlS,SAAS,OAAO;AAChC,gBAAIkS,OAAOqiD,SAAS,EAAEt9C,WAAW,GAAG;AAClC,mBAAKlB,MAAMzG,OAAO5O,gBAAgB,KAAKmW,MAAM2X,YAAW,CAAE;YAC5D,OAAO;AACL,oBAAM6mC,iBAAiBnjD,OAAOqiD,SAAS,EAAE,CAAC;AAC1C,kBAAI,KAAKpkB,YAAYklB,cAAc,GAAG;AACpC,qBAAKt/C,MACHy2C,SAASh/C,oCACT,KAAKqJ,MAAM2X,YAAW,CACxB;cACF;AACA,kBACE6mC,eAAez1D,SAAS,gBACxBy1D,eAAen/C,UACf;AACA,qBAAKH,MACHy2C,SAAS7+C,wCACT,KAAKkJ,MAAM2X,YAAW,CACxB;cACF;AACA,kBAAI6mC,eAAez1D,SAAS,eAAe;AACzC,qBAAKmW,MACHy2C,SAAS5+C,oCACT,KAAKiJ,MAAM2X,YAAW,CACxB;cACF;YACF;AACA,gBAAItc,OAAOsiD,aAAa,GAAG;AACzB,mBAAKz+C,MACHy2C,SAAS3+C,iCACTqE,OAAOsiD,aAAa,CACtB;YACF;UACF,OAAO;AACLtiD,mBAAOlS,OAAO;UAChB;AACA,iBAAO,KAAKsU,WAAWpC,QAAQ,mBAAmB;QACpD,OAAO;AACL,gBAAMsrB,WAAkC43B;AACxC,cAAID,SAAU33B,UAAS23B,WAAW;AAClC,gBAAMv1D,OAAO,KAAKq1D,yBAAwB;AAC1C,cAAIr1D,KAAM49B,UAASiI,iBAAiB7lC;AACpC,eAAK+0D,2BAA0B;AAC/B,iBAAO,KAAKrgD,WAAWkpB,UAAU,qBAAqB;QACxD;MACF;MAEA83B,oBAAqC;AACnC,cAAM31D,OAAY,KAAKyU,UAAS;AAEhC,YAAI,KAAKmc,MAAe,EAAA,KAAK,KAAKA,MAAW,EAAA,GAAG;AAC9C,iBAAO,KAAKqkC,uBAAuB,8BAA8Bj1D,IAAI;QACvE;AAEA,YAAI,KAAK4wB,MAAK,EAAQ,GAAG;AACvB,gBAAM3c,KAAK,KAAKQ,UAAS;AACzB,eAAKsS,KAAI;AACT,cAAI,KAAK6J,MAAe,EAAA,KAAK,KAAKA,MAAW,EAAA,GAAG;AAC9C,mBAAO,KAAKqkC,uBACV,mCACAj1D,IACF;UACF,OAAO;AACLA,iBAAK+G,MAAM,KAAK8kC,iBAAiB53B,IAAI,KAAK;AAC1C,mBAAO,KAAKshD,iCAAiCv1D,MAAM,KAAK;UAC1D;QACF;AAEA,aAAK+wD,iBACH;UACEE,kBAAkB,CAAC,UAAU;UAC7BC,qBAAqB,CACnB,WACA,YACA,WACA,aACA,UACA,UACA,UAAU;QAEb,GACDlxD,IACF;AAEA,cAAM41D,MAAM,KAAKT,yBAAyBn1D,IAAI;AAC9C,YAAI41D,KAAK;AACP,iBAAOA;QACT;AAEA,cAAMjK,kBAAkB3rD,IAAI;AAC5B,YACE,CAACA,KAAK0U,YACN1U,KAAK+G,IAAI9G,SAAS,iBACjBD,KAAK+G,IAAIV,SAAS,SAASrG,KAAK+G,IAAIV,SAAS,UAC9C,KAAKkrD,yBAAwB,GAC7B;AACAvxD,eAAKK,OAAOL,KAAK+G,IAAIV;AACrB,gBAAMslD,kBAAkB3rD,IAAI;QAC9B;AACA,eAAO,KAAKu1D,iCAAiCv1D,MAAM,CAAC,CAACA,KAAKw1D,QAAQ;MACpE;MAEAK,qBAAsC;AACpC,cAAM71D,OAAO,KAAKyU,UAAS;AAC3BzU,aAAK81C,UAAU,KAAKggB,yBAAwB;AAC5C,eAAO,KAAKnhD,WAAW3U,MAAM,eAAe;MAC9C;MAEA81D,2BAAmD;AACjD,aAAKj5B,OAAM,CAAU;AACrB,cAAMiZ,UAAU,KAAK0c,YACnB,eACA,KAAKmD,kBAAkB3E,KAAK,IAAI,CAClC;AACA,aAAKn0B,OAAM,CAAU;AACrB,eAAOiZ;MACT;MAEAigB,wBAAiC;AAC/B,aAAKhvC,KAAI;AACT,YAAI,KAAKwM,IAAG,EAAW,GAAG;AACxB,iBAAO,KAAKwI,aAAY,GAAa;QACvC;AACA,YAAI,KAAKA,aAAY,GAAa,GAAG;AACnC,eAAKhV,KAAI;QACX;AACA,YAAI,CAAC,KAAK6J,MAAK,CAAY,GAAG;AAC5B,iBAAO;QACT;AACA,aAAK7J,KAAI;AACT,YAAI,CAAC,KAAKuqC,eAAc,GAAI;AAC1B,iBAAO;QACT;AACA,aAAKvqC,KAAI;AACT,eAAO,KAAK6J,MAAK,EAAO;MAC1B;MAEAolC,oBAAoC;AAClC,cAAMh2D,OAAO,KAAKyU,UAAS;AAE3B,aAAKooB,OAAM,CAAU;AAErB,YAAI,KAAKjM,MAAK,EAAW,GAAG;AAC1B5wB,eAAKw1D,WAAW,KAAKt+C,MAAMhK;AAC3B,eAAK6Z,KAAI;AACT,eAAKuV,iBAAgB,GAAa;QACnC,WAAU,KAAKD,cAAa,GAAa,GAAG;AAC3Cr8B,eAAKw1D,WAAW;QAClB;AAEA,aAAK34B,OAAM,CAAY;AAIhB;AACL,gBAAMqM,gBAAgB,KAAKz0B,UAAS;AACpCy0B,wBAAc7iC,OAAO,KAAK8tD,yBAAwB;AAClDjrB,wBAAckrB,aAAa,KAAK6B,sBAAqB,EAAO;AAE5Dj2D,eAAKkpC,gBAAgB,KAAKv0B,WAAWu0B,eAAe,iBAAiB;QACvE;AACAlpC,aAAKk2D,WAAW,KAAK75B,cAAa,EAAO,IAAI,KAAK85B,YAAa,IAAG;AAElE,aAAKt5B,OAAM,CAAY;AAEvB,YAAI,KAAKjM,MAAK,EAAW,GAAG;AAC1B5wB,eAAKuW,WAAW,KAAKW,MAAMhK;AAC3B,eAAK6Z,KAAI;AACT,eAAK8V,OAAM,EAAY;QACxB,WAAU,KAAKtJ,IAAG,EAAY,GAAG;AAChCvzB,eAAKuW,WAAW;QAClB;AAEAvW,aAAK8lC,iBAAiB,KAAKswB,eAAc;AACzC,aAAKz5B,UAAS;AACd,aAAKE,OAAM,CAAU;AAErB,eAAO,KAAKloB,WAAW3U,MAAM,cAAc;MAC7C;MAEAq2D,mBAAkC;AAChC,cAAMr2D,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKs2D,eAAe,KAAKvD,qBACvB,qBACA,KAAKwD,wBAAwBvF,KAAK,IAAI,GACxB,MACO,KACvB;AAIA,YAAIwF,sBAAsB;AAC1Bx2D,aAAKs2D,aAAa9hC,QAAQiiC,iBAAe;AACvC,gBAAM;YAAEx2D;UAAM,IAAGw2D;AAEjB,cACED,uBACAv2D,SAAS,gBACTA,SAAS,oBACT,EAAEA,SAAS,wBAAwBw2D,YAAYlgD,WAC/C;AACA,iBAAKH,MAAMy2C,SAASsC,4BAA4BsH,WAAW;UAC7D;AAEAD,kCAAAA,sBACGv2D,SAAS,wBAAwBw2D,YAAYlgD,YAC9CtW,SAAS;QACb,CAAC;AAED,eAAO,KAAK0U,WAAW3U,MAAM,aAAa;MAC5C;MAEAu2D,0BAA2D;AAGzD,cAAM;UAAEhhD;YAAa,KAAK2B;AAE1B,cAAM1H,OAAO,KAAK+jB,IAAG,EAAY;AAEjC,YAAImjC;AACJ,YAAIp9C;AACJ,YAAI/C;AACJ,YAAItW;AAEJ,cAAM02D,SAAS5yC,2BAA2B,KAAK7M,MAAMjX,IAAI;AACzD,cAAM22D,cAAcD,SAAS,KAAK3iC,kBAAiB,IAAK;AACxD,YAAI4iC,gBAAW,IAAsB;AACnCF,oBAAU;AACVngD,qBAAW;AACX+C,kBAAQ,KAAKgsB,gBAAgB,IAAI;AACjC,eAAKzI,OAAM,EAAS;AACpB58B,iBAAO,KAAKk2D,YAAW;QACzB,WAAWS,gBAAW,IAA6B;AACjDrgD,qBAAW;AACX,gBAAMhB,YAAW,KAAK2B,MAAM3B;AAC5B,gBAAMshD,WAAW,KAAK3/C,MAAMhK;AAC5B,gBAAM4pD,cAAc,KAAKC,oBAAmB;AAE5C,cAAI,KAAK/iC,kBAAmB,MAAA,IAAsB;AAChD0iC,sBAAU;AACVp9C,oBAAQ,KAAKuyB,iBACX,KAAKlM,YAA0BpqB,SAAQ,GACvCshD,QACF;AACA,iBAAKh6B,OAAM,EAAY;AACvB,iBAAKA,OAAM,EAAS;AACpB58B,mBAAO,KAAKk2D,YAAW;UACzB,OAAO;AACLO,sBAAU;AACVz2D,mBAAO62D;AACP,iBAAKj6B,OAAM,EAAY;UACzB;QACF,OAAO;AACL58B,iBAAO,KAAKk2D,YAAW;AACvB5/C,qBAAW,KAAKgd,IAAG,EAAY;AAI/BmjC,oBAAU,KAAKnjC,IAAG,EAAS;QAC7B;AAEA,YAAImjC,SAAS;AACX,cAAIM;AACJ,cAAI19C,OAAO;AACT09C,0BAAc,KAAK/+C,gBAAsCqB,KAAK;AAC9D09C,wBAAYzgD,WAAWA;AACvBygD,wBAAY19C,QAAQA;AACpB09C,wBAAYt9B,cAAcz5B;AAE1B,gBAAI,KAAKszB,IAAG,EAAY,GAAG;AACzByjC,0BAAYzgD,WAAW;AACvB,mBAAKH,MACHy2C,SAASgD,wBACT,KAAK34C,MAAMC,eACb;YACF;UACF,OAAO;AACL6/C,0BAAc,KAAK/+C,gBAAsChY,IAAI;AAC7D+2D,wBAAYzgD,WAAWA;AACvB,iBAAKH,MAAMy2C,SAASkC,yBAAyB9uD,IAAI;AAGjD+2D,wBAAY19C,QAAQrZ;AACpB+2D,wBAAYt9B,cAAc,KAAKy8B,YAAW;UAC5C;AACAl2D,iBAAO,KAAK0U,WAAWqiD,aAAa,oBAAoB;QACzD,WAAUzgD,UAAU;AACnB,gBAAM0gD,mBAAmB,KAAKh/C,gBAAkChY,IAAI;AACpEg3D,2BAAiBnxB,iBAAiB7lC;AAClCA,iBAAO,KAAK0U,WAAWsiD,kBAAkB,gBAAgB;QAC3D;AAEA,YAAIznD,MAAM;AACR,gBAAM0nD,WAAW,KAAKv3B,YAA0BpqB,QAAQ;AACxD2hD,mBAASpxB,iBAAiB7lC;AAC1BA,iBAAO,KAAK0U,WAAWuiD,UAAU,YAAY;QAC/C;AAEA,eAAOj3D;MACT;MAEAk3D,2BAAkD;AAChD,cAAMn3D,OAAO,KAAKyU,UAAS;AAC3B,aAAKooB,OAAM,EAAU;AACrB78B,aAAK8lC,iBAAiB,KAAKqwB,YAAW;AACtC,aAAKt5B,OAAM,EAAU;AACrB,eAAO,KAAKloB,WAAW3U,MAAM,qBAAqB;MACpD;MAEAo3D,iCACEn3D,MACAo3D,UAC+B;AAC/B,cAAMr3D,OAAO,KAAKyU,UAAS;AAG3B,YAAIxU,SAAS,qBAAqB;AAC/BD,eAAqCq3D,WAAW,CAAC,CAACA;AACnD,cAAIA,SAAU,MAAKtwC,KAAI;AACvB,eAAKA,KAAI;QACX;AACA,aAAKuwC,iCAAiC,MACpC,KAAK9C,gBAAe,IAAWx0D,IAAI,CACrC;AACA,eAAO,KAAK2U,WAAW3U,MAAMC,IAAI;MACnC;MAEAs3D,yBAA0C;AACxC,cAAMv3D,OAAO,KAAKyU,UAAS;AAC3B,gBAAQ,KAAKyC,MAAMjX,MAAI;UACrB,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;AAGED,iBAAKw1C,UAAU,MAAM/O,cAAa;AAClC;UACF;AACE,iBAAKrhC,WAAU;QACnB;AACA,eAAO,KAAKuP,WAAW3U,MAAM,eAAe;MAC9C;MAEAw3D,6BAAuC;AACrC,cAAMx3D,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKw1C,UAAU,MAAMiiB,cAAc,KAAK;AACxC,eAAO,KAAK9iD,WAAW3U,MAAM,eAAe;MAC9C;MAEA03D,4BAAqD;AACnD,YAAI,KAAKxgD,MAAMgX,OAAQ,QAAO,KAAKioC,YAAW;AAC9C,eAAO,MAAMuB,0BAAyB;MACxC;MAEAC,qCAAuE;AACrE,cAAMC,cAAc,KAAK9D,oBAAmB;AAC5C,YAAI,KAAK/3B,aAAY,GAAO,KAAK,CAAC,KAAKS,sBAAqB,GAAI;AAC9D,iBAAO,KAAKi3B,yBAAyBmE,WAAW;QAClD,OAAO;AACL,iBAAOA;QACT;MACF;MAEAb,sBAAgC;AAC9B,gBAAQ,KAAK7/C,MAAMjX,MAAI;UACrB,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;UACA,KAAA;AACE,mBAAO,KAAKs3D,uBAAsB;UACpC,KAAA;AACE,gBAAI,KAAKrgD,MAAMhK,UAAU,KAAK;AAC5B,oBAAMlN,OAAO,KAAKyU,UAAS;AAC3B,oBAAM6e,YAAY,KAAKI,UAAS;AAChC,kBAAIJ,UAAUrzB,SAAI,OAAeqzB,UAAUrzB,SAAI,KAAgB;AAC7D,qBAAKmF,WAAU;cACjB;AAEApF,mBAAKw1C,UAAU,KAAKqiB,gBAAe;AACnC,qBAAO,KAAKljD,WAAW3U,MAAM,eAAe;YAC9C;AACA;UACF,KAAA;AACE,mBAAO,KAAK23D,mCAAkC;UAChD,KAAA;AACE,mBAAO,KAAK5D,iBAAgB;UAC9B,KAAA;AACE,mBAAO,KAAKb,kBAAiB;UAC/B,KAAA;AACE,mBAAO,KAAKkC,YAAY,KAAKW,sBAAsB/E,KAAK,IAAI,CAAC,IACzD,KAAKgF,kBAAiB,IACtB,KAAKH,mBAAkB;UAC7B,KAAA;AACE,mBAAO,KAAKQ,iBAAgB;UAC9B,KAAA;AAaE,mBAAO,KAAKc,yBAAwB;UACtC,KAAA;UACA,KAAA;AACE,mBAAO,KAAKK,2BAA0B;UACxC,SAAS;AACP,kBAAM;cAAEv3D;gBAAS,KAAKiX;AACtB,gBACE2M,kBAAkB5jB,IAAI,KACtBA,SAAiB,MACjBA,SAAI,IACJ;AACA,oBAAM63D,WACJ73D,SAAI,KACA,kBACAA,SAAI,KACF,kBACAwwD,oBAAoB,KAAKv5C,MAAMhK,KAAK;AAC5C,kBACE4qD,aAAa1tC,UACb,KAAK4J,kBAAiB,MAAE,IACxB;AACA,sBAAMh0B,OAAO,KAAKyU,UAAS;AAC3B,qBAAKsS,KAAI;AACT,uBAAO,KAAKpS,WAAW3U,MAAM83D,QAAQ;cACvC;AACA,qBAAO,KAAKvE,qBAAoB;YAClC;UACF;QACF;AAEA,aAAKnuD,WAAU;MACjB;MAEA2yD,2BAAqC;AACnC,YAAI93D,OAAO,KAAK82D,oBAAmB;AACnC,eAAO,CAAC,KAAKv6B,sBAAqB,KAAM,KAAKjJ,IAAe,CAAA,GAAG;AAC7D,cAAI,KAAK3C,MAAK,CAAY,GAAG;AAC3B,kBAAM5wB,OAAO,KAAKiY,gBAA+BhY,IAAI;AACrDD,iBAAK05B,cAAcz5B;AACnB,iBAAK48B,OAAM,CAAY;AACvB58B,mBAAO,KAAK0U,WAAW3U,MAAM,aAAa;UAC5C,OAAO;AACL,kBAAMA,OAAO,KAAKiY,gBAAuChY,IAAI;AAC7DD,iBAAKgsC,aAAa/rC;AAClBD,iBAAKisC,YAAY,KAAKkqB,YAAW;AACjC,iBAAKt5B,OAAM,CAAY;AACvB58B,mBAAO,KAAK0U,WAAW3U,MAAM,qBAAqB;UACpD;QACF;AACA,eAAOC;MACT;MAEA+3D,sBAAwC;AACtC,cAAMh4D,OAAO,KAAKyU,UAAS;AAC3B,cAAM+1C,WAAW,KAAKtzC,MAAMhK;AAC5B,aAAK6Z,KAAI;AACT/mB,aAAKwqD,WAAWA;AAChBxqD,aAAK8lC,iBAAiB,KAAKmyB,4BAA2B;AAEtD,YAAIzN,aAAa,YAAY;AAC3B,eAAK0N,iCAAiCl4D,IAAI;QAC5C;AAEA,eAAO,KAAK2U,WAAW3U,MAAM,gBAAgB;MAC/C;MAEAk4D,iCAAiCl4D,MAAgC;AAC/D,gBAAQA,KAAK8lC,eAAe7lC,MAAI;UAC9B,KAAK;UACL,KAAK;AACH;UACF;AACE,iBAAKmW,MAAMy2C,SAASsD,oBAAoBnwD,IAAI;QAChD;MACF;MAEAm4D,mBAAkC;AAChC,cAAMn4D,OAAO,KAAKyU,UAAS;AAC3B,aAAK6nB,iBAAgB,GAAU;AAC/B,cAAM4M,gBAAgB,KAAKz0B,UAAS;AACpCy0B,sBAAc7iC,OAAO,KAAK8tD,yBAAwB;AAClDjrB,sBAAckrB,aAAa,KAAKvC,WAAW,MACzC,KAAKuG,8BAA6B,CACpC;AACAp4D,aAAKkpC,gBAAgB,KAAKv0B,WAAWu0B,eAAe,iBAAiB;AACrE,eAAO,KAAKv0B,WAAW3U,MAAM,aAAa;MAC5C;MAEAo4D,gCAAgC;AAC9B,YAAI,KAAK7kC,IAAG,EAAY,GAAG;AACzB,gBAAM6gC,aAAa,KAAKiE,oCAAoC,MAC1D,KAAKlC,YAAW,CAClB;AACA,cACE,KAAKj/C,MAAMqX,qCACX,CAAC,KAAKqC,MAAiB,EAAA,GACvB;AACA,mBAAOwjC;UACT;QACF;MACF;MAEA6D,8BAAwC;AACtC,cAAMK,iBACJ5zC,sBAAsB,KAAKxN,MAAMjX,IAAI,KAAK,CAAC,KAAKiX,MAAMyX;AACxD,eAAO2pC,iBACH,KAAKN,oBAAqB,IAC1B,KAAKj8B,aAAY,GAAU,IACzB,KAAKo8B,iBAAgB,IACrB,KAAKb,iCAAiC,MACpC,KAAKS,yBAAwB,CAC/B;MACR;MAEAQ,+BACEl4D,MACAm4D,sBACAhO,UACU;AACV,cAAMxqD,OAAO,KAAKyU,UAAS;AAC3B,cAAMgkD,qBAAqB,KAAKllC,IAAIi3B,QAAQ;AAC5C,cAAM7xC,SAAQ,CAAA;AACd,WAAG;AACDA,UAAAA,OAAM/E,KAAK4kD,qBAAoB,CAAE;QACnC,SAAS,KAAKjlC,IAAIi3B,QAAQ;AAC1B,YAAI7xC,OAAMrB,WAAW,KAAK,CAACmhD,oBAAoB;AAC7C,iBAAO9/C,OAAM,CAAC;QAChB;AACA3Y,aAAK2Y,QAAQA;AACb,eAAO,KAAKhE,WAAW3U,MAAMK,IAAI;MACnC;MAEAq4D,kCAA4C;AAC1C,eAAO,KAAKH,+BACV,sBACA,KAAKN,4BAA4BjH,KAAK,IAAI,GAAC,EAE7C;MACF;MAEA2H,2BAA2B;AACzB,eAAO,KAAKJ,+BACV,eACA,KAAKG,gCAAgC1H,KAAK,IAAI,GAAC,EAEjD;MACF;MAEA4H,0BAA0B;AACxB,YAAI,KAAKhoC,MAAK,EAAM,GAAG;AACrB,iBAAO;QACT;AACA,eACE,KAAKA,MAAK,EAAU,KACpB,KAAKwkC,YAAY,KAAKyD,qCAAqC7H,KAAK,IAAI,CAAC;MAEzE;MAEA8H,uBAAgC;AAC9B,YAAIj1C,kBAAkB,KAAK3M,MAAMjX,IAAI,KAAK,KAAK2wB,MAAK,EAAS,GAAG;AAC9D,eAAK7J,KAAI;AACT,iBAAO;QACT;AAEA,YAAI,KAAK6J,MAAK,CAAU,GAAG;AAEzB,gBAAM;YAAE7D;cAAW,KAAK7V;AACxB,gBAAM6hD,qBAAqBhsC,OAAOzV;AAClC,cAAI;AACF,iBAAK4zC,gBAA2B,GAAA,IAAI;AACpC,mBAAOn+B,OAAOzV,WAAWyhD;UAC1B,SAAC/nD,SAAM;AACN,mBAAO;UACT;QACF;AAEA,YAAI,KAAK4f,MAAK,CAAY,GAAG;AAC3B,eAAK7J,KAAI;AAET,gBAAM;YAAEgG;cAAW,KAAK7V;AACxB,gBAAM6hD,qBAAqBhsC,OAAOzV;AAClC,cAAI;AACF,kBAAM0zC,iBAAgB,GAAA,IAAA,CAItB;AACA,mBAAOj+B,OAAOzV,WAAWyhD;UAC1B,SAACC,UAAM;AACN,mBAAO;UACT;QACF;AAEA,eAAO;MACT;MAEAH,uCAAgD;AAC9C,aAAK9xC,KAAI;AACT,YAAI,KAAK6J,MAAe,EAAA,KAAK,KAAKA,MAAiB,EAAA,GAAG;AAGpD,iBAAO;QACT;AACA,YAAI,KAAKkoC,qBAAoB,GAAI;AAC/B,cACE,KAAKloC,MAAK,EAAS,KACnB,KAAKA,MAAc,EAAA,KACnB,KAAKA,MAAK,EAAY,KACtB,KAAKA,MAAW,EAAA,GAChB;AAKA,mBAAO;UACT;AACA,cAAI,KAAKA,MAAK,EAAU,GAAG;AACzB,iBAAK7J,KAAI;AACT,gBAAI,KAAK6J,MAAK,EAAS,GAAG;AAExB,qBAAO;YACT;UACF;QACF;AACA,eAAO;MACT;MAEAmkC,qCACEN,aACoB;AACpB,eAAO,KAAKwE,SAAS,MAAM;AACzB,gBAAMC,IAAI,KAAKzkD,UAAS;AACxB,eAAKooB,OAAO43B,WAAW;AAEvB,gBAAMz0D,OAAO,KAAKyU,UAAS;AAE3B,gBAAMo/C,UAAU,CAAC,CAAC,KAAKhC,WACrB,KAAKsH,4BAA4BnI,KAAK,IAAI,CAC5C;AAEA,cAAI6C,WAAW,KAAKjjC,MAAK,EAAS,GAAG;AAGnC,gBAAIwoC,oBAAoB,KAAKzB,mCAAkC;AAG/D,gBAAIyB,kBAAkBn5D,SAAS,cAAc;AAC3CD,mBAAK2zD,gBAAgByF;AACrBp5D,mBAAK6zD,UAAU;AACd7zD,mBAA2B8lC,iBAAiB;AAC7CszB,kCAAoB,KAAKzkD,WAAW3U,MAAM,iBAAiB;YAC7D,OAAO;AACL,mBAAK4/B,2BAA2Bw5B,mBAAmBp5D,IAAI;AACvDo5D,gCAAkBvF,UAAU;YAC9B;AACAqF,cAAEpzB,iBAAiBszB;AACnB,mBAAO,KAAKzkD,WAAWukD,GAAG,kBAAkB;UAC9C;AAEA,gBAAMG,wBACJ,KAAK/H,eAAc,KACnB,KAAKO,WAAW,KAAKyH,2BAA2BtI,KAAK,IAAI,CAAC;AAE5D,cAAI,CAACqI,uBAAuB;AAC1B,gBAAI,CAACxF,SAAS;AAEZ,qBAAO,KAAKD,sBAAqC,OAAOsF,CAAC;YAC3D;AAGAl5D,iBAAK2zD,gBAAgB,KAAKruB,gBAAe;AACzCtlC,iBAAK6zD,UAAUA;AACd7zD,iBAA2B8lC,iBAAiB;AAC7CozB,cAAEpzB,iBAAiB,KAAKnxB,WAAW3U,MAAM,iBAAiB;AAC1D,mBAAO,KAAK2U,WAAWukD,GAAG,kBAAkB;UAC9C;AAGA,gBAAMj5D,OAAO,KAAK2zD,sBAAqC,KAAK;AAC5D5zD,eAAK2zD,gBAAgB0F;AACrBr5D,eAAK8lC,iBAAiB7lC;AACtBD,eAAK6zD,UAAUA;AACfqF,YAAEpzB,iBAAiB,KAAKnxB,WAAW3U,MAAM,iBAAiB;AAC1D,iBAAO,KAAK2U,WAAWukD,GAAG,kBAAkB;QAC9C,CAAC;MACH;MAEAK,0CAA0E;AACxE,YAAI,KAAK3oC,MAAK,EAAS,GAAG;AACxB,iBAAO,KAAKmkC,qCAAoC,EAAS;QAC3D;MACF;MAEAO,2BAA2D;AACzD,YAAI,KAAK1kC,MAAK,EAAS,GAAG;AACxB,iBAAO,KAAKgjC,sBAAqB;QACnC;MACF;MAEAwC,iBAAuC;AACrC,eAAO,KAAK/B,mBAAkB,EAAS;MACzC;MAEAiF,6BAAuD;AACrD,cAAMrlD,KAAK,KAAKqxB,gBAAe;AAC/B,YAAI,KAAKvJ,aAAY,GAAO,KAAK,CAAC,KAAKS,sBAAqB,GAAI;AAC9D,eAAKzV,KAAI;AACT,iBAAO9S;QACT;MACF;MAEAklD,8BAAuC;AACrC,YAAI,KAAKjiD,MAAMjX,SAAI,KAAkB;AACnC,iBAAO;QACT;AACA,cAAM0uB,cAAc,KAAKzX,MAAMyX;AAC/B,aAAK5H,KAAI;AACT,YAAI,CAAClD,kBAAkB,KAAK3M,MAAMjX,IAAI,KAAK,CAAC,KAAK2wB,MAAK,EAAS,GAAG;AAChE,iBAAO;QACT;AAEA,YAAIjC,aAAa;AACf,eAAKvY,MACHzG,OAAOjL,4BACP,KAAKwS,MAAMC,iBACX;YACExS,cAAc;UAChB,CACF;QACF;AAEA,eAAO;MACT;MAEAivD,sBACE4F,WAAW,MACXN,IAAgC,KAAKzkD,UAAS,GAC1B;AACpB,aAAKwkD,SAAS,MAAM;AAClB,cAAIO,SAAU,MAAK38B,OAAM,EAAS;AAClCq8B,YAAEpzB,iBAAiB,KAAKqwB,YAAW;QACrC,CAAC;AACD,eAAO,KAAKxhD,WAAWukD,GAAG,kBAAkB;MAC9C;MAGA/C,cAAwB;AAEtBvJ,eAAO,KAAK11C,MAAMgX,MAAM;AACxB,cAAMjuB,OAAO,KAAKw5D,0BAAyB;AAE3C,YACE,KAAKviD,MAAMqX,qCACX,KAAKiO,sBAAuB,KAC5B,CAAC,KAAKjJ,IAAG,EAAY,GACrB;AACA,iBAAOtzB;QACT;AACA,cAAMD,OAAO,KAAKiY,gBAAqChY,IAAI;AAC3DD,aAAK05D,YAAYz5D;AAEjBD,aAAK25D,cAAc,KAAKtB,oCAAoC,MAC1D,KAAKoB,0BAAyB,CAChC;AAEA,aAAK58B,OAAM,EAAY;AACvB78B,aAAK45D,WAAW,KAAKtC,iCAAiC,MACpD,KAAKnB,YAAW,CAClB;AAEA,aAAKt5B,OAAM,EAAS;AACpB78B,aAAK65D,YAAY,KAAKvC,iCAAiC,MACrD,KAAKnB,YAAW,CAClB;AAEA,eAAO,KAAKxhD,WAAW3U,MAAM,mBAAmB;MAClD;MAEA85D,iCAA0C;AACxC,eACE,KAAK/9B,aAAY,GAAa,KAAK,KAAKrI,UAAW,EAACzzB,SAAgB;MAExE;MAEAw5D,4BAAsC;AACpC,YAAI,KAAKb,wBAAuB,GAAI;AAClC,iBAAO,KAAKxB,iCAAiC,gBAAgB;QAC/D;AACA,YAAI,KAAKxmC,MAAK,EAAQ,GAAG;AAEvB,iBAAO,KAAKwmC,iCAAiC,mBAAmB;QAClE,WAAW,KAAK0C,+BAA8B,GAAI;AAEhD,iBAAO,KAAK1C,iCACV,qBACe,IACjB;QACF;AACA,eAAO,KAAKuB,yBAAwB;MACtC;MAEAoB,uBAA0C;AACxC,YAAI,KAAKjmD,gBAAgB,cAAc,0BAA0B,GAAG;AAClE,eAAKsC,MAAMy2C,SAAS4C,uBAAuB,KAAKv4C,MAAM3B,QAAQ;QAChE;AAEA,cAAMvV,OAAO,KAAKyU,UAAS;AAC3BzU,aAAK8lC,iBAAiB,KAAKmzB,SAAS,MAAM;AACxC,eAAKlyC,KAAI;AACT,iBAAO,KAAK6J,MAAe,EAAA,IACvB,KAAK2iC,qBAAsB,IAC3B,KAAK4C,YAAW;QACtB,CAAC;AACD,aAAKt5B,OAAM,EAAM;AACjB78B,aAAK4R,aAAa,KAAKimD,gBAAe;AACtC,eAAO,KAAKljD,WAAW3U,MAAM,iBAAiB;MAChD;MAIAg6D,sBACEztD,OAC2D;AAC3D,cAAM0tD,mBAAmB,KAAK/iD,MAAM3B;AAEpC,cAAM2kD,gBAAgB,KAAKxH,qBACzB,yBACA,MAAM;AACJ,gBAAM1yD,OAAO,KAAKyU,UAAS;AAG3BzU,eAAK4R,aAAa,KAAKwhD,kBAAiB;AACxC,cAAI,KAAKxiC,MAAK,EAAM,GAAG;AACrB5wB,iBAAK2T,iBAAiB,KAAK0/C,qBAAoB;UACjD;AAEA,iBAAO,KAAK1+C,WACV3U,MAMI,+BACN;QACF,CACF;AAEA,YAAI,CAACk6D,cAAc5iD,QAAQ;AACzB,eAAKlB,MAAMy2C,SAASe,yBAAyBqM,kBAAkB;YAC7D1tD;UACF,CAAC;QACH;AAEA,eAAO2tD;MAGT;MAEAC,4BACEn6D,MACAgsB,aAEI,CAAA,GAC6B;AACjC,YAAI,KAAKyQ,sBAAqB,EAAI,QAAO;AACzC,aAAKH,iBAAgB,GAAc;AACnC,YAAItQ,WAAWuc,QAASvoC,MAAKuoC,UAAU;AACvC,YAAI1kB,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AACtCD,eAAKiU,KAAK,KAAKqxB,gBAAe;AAC9B,eAAK2mB,gBAAgBjsD,KAAKiU,IAAE,GAA+B;QAC7D,OAAO;AACLjU,eAAKiU,KAAK;AACV,eAAKmC,MAAMy2C,SAASmC,sBAAsB,KAAK93C,MAAM3B,QAAQ;QAC/D;AAEAvV,aAAK2T,iBAAiB,KAAK2gD,yBACzB,KAAKjD,0BACP;AACA,YAAI,KAAK99B,IAAG,EAAY,GAAG;AACzBvzB,eAAKsnC,UAAU,KAAK0yB,sBAAsB,SAAS;QACrD;AACA,cAAM7mD,OAAO,KAAKsB,UAAS;AAC3BtB,aAAKA,OAAO,KAAK8lD,SAAS,KAAKnD,yBAAyB9E,KAAK,IAAI,CAAC;AAClEhxD,aAAKmT,OAAO,KAAKwB,WAAWxB,MAAM,iBAAiB;AACnD,eAAO,KAAKwB,WAAW3U,MAAM,wBAAwB;MACvD;MAEAo6D,4BACEp6D,MAC0B;AAC1BA,aAAKiU,KAAK,KAAKqxB,gBAAe;AAC9B,aAAK2mB,gBAAgBjsD,KAAKiU,IAAE,CAA0B;AAEtDjU,aAAK8lC,iBAAiB,KAAKmzB,SAAS,MAAM;AACxCj5D,eAAK2T,iBAAiB,KAAK2gD,yBACzB,KAAKxD,qBACP;AAEA,eAAKj0B,OAAM,EAAM;AAEjB,cACE,KAAKd,aAAY,GAAc,KAC/B,KAAKrI,UAAW,EAACzzB,SAAI,IACrB;AACA,kBAAMD,QAAO,KAAKyU,UAAS;AAC3B,iBAAKsS,KAAI;AACT,mBAAO,KAAKpS,WAAW3U,OAAM,oBAAoB;UACnD;AAEA,iBAAO,KAAKm2D,YAAW;QACzB,CAAC;AAED,aAAKx5B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,wBAAwB;MACvD;MAEAq6D,cAAiBC,IAAgB;AAC/B,cAAMC,aAAa,KAAKrjD,MAAM+N;AAC9B,aAAK/N,MAAM+N,UAAU,CAACs1C,WAAW,CAAC,CAAC;AACnC,YAAI;AACF,iBAAOD,GAAE;QACX,UAAC;AACC,eAAKpjD,MAAM+N,UAAUs1C;QACvB;MACF;MAOAtB,SAAYqB,IAAgB;AAC1B,cAAM11B,YAAY,KAAK1tB,MAAMgX;AAC7B,aAAKhX,MAAMgX,SAAS;AACpB,YAAI;AACF,iBAAOosC,GAAE;QACX,UAAC;AACC,eAAKpjD,MAAMgX,SAAS0W;QACtB;MACF;MAEAyzB,oCAAuCiC,IAAgB;AACrD,cAAME,uCACJ,KAAKtjD,MAAMqX;AACb,aAAKrX,MAAMqX,oCAAoC;AAC/C,YAAI;AACF,iBAAO+rC,GAAE;QACX,UAAC;AACC,eAAKpjD,MAAMqX,oCACTisC;QACJ;MACF;MAEAlD,iCAAoCgD,IAAgB;AAClD,cAAME,uCACJ,KAAKtjD,MAAMqX;AACb,aAAKrX,MAAMqX,oCAAoC;AAC/C,YAAI;AACF,iBAAO+rC,GAAE;QACX,UAAC;AACC,eAAKpjD,MAAMqX,oCACTisC;QACJ;MACF;MAEAnG,mBAAmB9nD,OAAwC;AACzD,YAAI,KAAKqkB,MAAMrkB,KAAK,GAAG;AACrB,iBAAO,KAAKkuD,oBAAmB;QACjC;MACF;MAEAxE,sBAAsB1pD,OAA4B;AAChD,eAAO,KAAK0sD,SAAS,MAAM;AACzB,eAAKp8B,OAAOtwB,KAAK;AACjB,iBAAO,KAAK4pD,YAAW;QACzB,CAAC;MACH;MAEAsE,sBAAgC;AAC9B,eAAO,KAAKxB,SAAS,MAAM;AACzB,eAAKlyC,KAAI;AACT,iBAAO,KAAKovC,YAAW;QACzB,CAAC;MACH;MAEAuE,oBAAoC;AAClC,cAAM16D,OAAO,KAAKyU,UAAS;AAE3BzU,aAAKiU,KAAK,KAAK2c,MAAe,GAAA,IAC1B,MAAMtf,mBAAmB,KAAK4F,MAAMhK,KAAK,IACzC,KAAKo4B,gBAA8B,IAAI;AAC3C,YAAI,KAAK/R,IAAG,EAAM,GAAG;AACnBvzB,eAAK26D,cAAc,MAAM7sB,wBAAuB;QAClD;AACA,eAAO,KAAKn5B,WAAW3U,MAAM,cAAc;MAC7C;MAEA46D,uBACE56D,MACAgsB,aAGI,CAAA,GACiB;AACrB,YAAIA,WAAW4X,MAAO5jC,MAAK4jC,QAAQ;AACnC,YAAI5X,WAAWuc,QAASvoC,MAAKuoC,UAAU;AACvC,aAAKjM,iBAAgB,GAAS;AAC9Bt8B,aAAKiU,KAAK,KAAKqxB,gBAAe;AAC9B,aAAK2mB,gBACHjsD,KAAKiU,IACLjU,KAAK4jC,QAAK,OAAA,IACZ;AAEA,aAAK/G,OAAM,CAAU;AACrB78B,aAAK81C,UAAU,KAAK4c,qBAClB,eACA,KAAKgI,kBAAkB1J,KAAK,IAAI,CAClC;AACA,aAAKn0B,OAAM,CAAU;AACrB,eAAO,KAAKloB,WAAW3U,MAAM,mBAAmB;MAClD;MAEA66D,qBAAsC;AACpC,cAAM76D,OAAO,KAAKyU,UAAS;AAC3B,aAAKiU,MAAMF,MAAK,CAAgB;AAEhC,aAAKqU,OAAM,CAAU;AAErB,cAAMi+B,4BACH96D,KAAKmT,OAAO,CAAA,GACIiX,QACF,MAAI,CAErB;AACA,aAAK1B,MAAMD,KAAI;AACf,eAAO,KAAK9T,WAAW3U,MAAM,eAAe;MAC9C;MAEA+6D,oCACE/6D,MACAg7D,SAAkB,OACK;AACvBh7D,aAAKiU,KAAK,KAAKqxB,gBAAe;AAE9B,YAAI,CAAC01B,QAAQ;AACX,eAAK/O,gBAAgBjsD,KAAKiU,IAAE,IAA+B;QAC7D;AAEA,YAAI,KAAKsf,IAAG,EAAO,GAAG;AACpB,gBAAM0nC,QAAQ,KAAKxmD,UAAS;AAC5B,eAAKsmD,oCAAoCE,OAAO,IAAI;AAEpDj7D,eAAKmT,OAAO8nD;QACd,OAAO;AACL,eAAKvyC,MAAMF,MAAK,GAAoB;AACpC,eAAK8V,UAAU9V,MAAK,CAAgB;AACpCxoB,eAAKmT,OAAO,KAAK0nD,mBAAkB;AACnC,eAAKv8B,UAAU7V,KAAI;AACnB,eAAKC,MAAMD,KAAI;QACjB;AACA,eAAO,KAAK9T,WAAW3U,MAAM,qBAAqB;MACpD;MAEAk7D,wCACEl7D,MACuB;AACvB,YAAI,KAAK+7B,aAAY,GAAW,GAAG;AACjC/7B,eAAKm7D,SAAS;AACdn7D,eAAKiU,KAAK,KAAKqxB,gBAAe;QAC/B,WAAU,KAAK1U,MAAK,GAAU,GAAG;AAChC5wB,eAAKiU,KAAK,MAAM3C,mBAAmB,KAAK4F,MAAMhK,KAAK;QACrD,OAAO;AACL,eAAK9H,WAAU;QACjB;AACA,YAAI,KAAKwrB,MAAK,CAAU,GAAG;AACzB,eAAKlI,MAAMF,MAAK,GAAoB;AACpC,eAAK8V,UAAU9V,MAAK,CAAgB;AACpCxoB,eAAKmT,OAAO,KAAK0nD,mBAAkB;AACnC,eAAKv8B,UAAU7V,KAAI;AACnB,eAAKC,MAAMD,KAAI;QACjB,OAAO;AACL,eAAKkU,UAAS;QAChB;AAEA,eAAO,KAAKhoB,WAAW3U,MAAM,qBAAqB;MACpD;MAEAo7D,+BACEp7D,MACAq7D,wBACA5pB,UAC6B;AAC7BzxC,aAAKyxC,WAAWA,YAAY;AAC5BzxC,aAAKiU,KAAKonD,0BAA0B,KAAK/1B,gBAAe;AACxD,aAAK2mB,gBAAgBjsD,KAAKiU,IAAE,IAAkC;AAC9D,aAAK4oB,OAAM,EAAM;AACjB,cAAMy+B,kBAAkB,KAAKC,uBAAsB;AACnD,YACEv7D,KAAK0jC,eAAe,UACpB43B,gBAAgBr7D,SAAS,6BACzB;AACA,eAAKmW,MAAMy2C,SAASmB,0BAA0BsN,eAAe;QAC/D;AACAt7D,aAAKs7D,kBAAkBA;AACvB,aAAK3+B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,2BAA2B;MAC1D;MAEAw7D,8BAAuC;AACrC,eACE,KAAKz/B,aAAwB,GAAA,KAC7B,KAAK/H,kBAAmB,MAA8B;MAE1D;MAEAunC,yBAA8C;AAC5C,eAAO,KAAKC,4BAA2B,IACnC,KAAKC,+BAA8B,IACnC,KAAKrI,kBAA2C,KAAK;MAC3D;MAEAqI,iCAA8D;AAC5D,cAAMz7D,OAAO,KAAKyU,UAAS;AAC3B,aAAK6nB,iBAAgB,GAAY;AACjC,aAAKO,OAAM,EAAU;AACrB,YAAI,CAAC,KAAKjM,MAAK,GAAU,GAAG;AAC1B,eAAKxrB,WAAU;QACjB;AAEApF,aAAK4R,aAAa,MAAM60B,cAAa;AACrC,aAAK5J,OAAM,EAAU;AACrB,aAAKrT,oBAAoB;AACzB,eAAO,KAAK7U,WAAW3U,MAAM,2BAA2B;MAC1D;MAIAo1D,YAAesG,GAAe;AAC5B,cAAMxkD,QAAQ,KAAKA,MAAM1I,MAAK;AAC9B,cAAMyhB,MAAMyrC,EAAC;AACb,aAAKxkD,QAAQA;AACb,eAAO+Y;MACT;MAEA0rC,mBACED,GACsB;AACtB,cAAMntB,SAAS,KAAKzR,SAClBoW,WAEEwoB,EAAG,KAAIxoB,MAAK,CAChB;AAEA,YAAI3E,OAAOnR,WAAW,CAACmR,OAAOvuC,KAAM;AACpC,YAAIuuC,OAAOlgC,MAAO,MAAK6I,QAAQq3B,OAAOrR;AAEtC,eAAOqR,OAAOvuC;MAChB;MAEA6xD,WAAc6J,GAA+C;AAC3D,cAAMxkD,QAAQ,KAAKA,MAAM1I,MAAK;AAC9B,cAAM+/B,SAASmtB,EAAC;AAChB,YAAIntB,WAAWnkB,UAAamkB,WAAW,OAAO;AAC5C,iBAAOA;QACT;AACA,aAAKr3B,QAAQA;MACf;MAEA0kD,kBAAkBC,MAAsC;AACtD,YAAI,KAAKn/B,iBAAgB,GAAI;AAC3B;QACF;AACA,YAAIo/B,YAAY,KAAK5kD,MAAMjX;AAC3B,YAAII;AAEJ,YAAI,KAAK07B,aAAY,GAAQ,GAAG;AAC9B+/B,sBAAmB;AACnBz7D,iBAAO;QACT;AAGA,eAAO,KAAK07D,mBAAmB,MAAM;AACnC,kBAAQD,WAAS;YACf,KAAA;AACED,mBAAKtzB,UAAU;AACf,qBAAO,MAAMyzB,uBACXH,MACY,OACe,KAC7B;YACF,KAAA;AAGEA,mBAAKtzB,UAAU;AACf,qBAAO,KAAK0zB,WACVJ,MACkB,MACD,KACnB;YACF,KAAA;AACE,qBAAO,KAAKjB,uBAAuBiB,MAAM;gBAAEtzB,SAAS;cAAK,CAAC;YAC5D,KAAA;AACE,qBAAO,KAAK2yB,wCAAwCW,IAAI;YAC1D,KAAA;YACA,KAAA;AACE,kBAAI,CAAC,KAAKjrC,MAAK,EAAU,KAAK,CAAC,KAAKwL,sBAAsB,MAAM,GAAG;AACjEy/B,qBAAKtzB,UAAU;AACf,uBAAO,KAAK2zB,kBACVL,MACAx7D,QAAQ,KAAK6W,MAAMhK,OACnB,IACF;cACF;AAGA,mBAAK2vB,OAAM,EAAU;AACrB,qBAAO,KAAK+9B,uBAAuBiB,MAAM;gBACvCj4B,OAAO;gBACP2E,SAAS;cACX,CAAC;YACH,KAAA,KAAoB;AAClB,oBAAMgG,SAAS,KAAK4rB,4BAA4B0B,MAAM;gBACpDtzB,SAAS;cACX,CAAC;AACD,kBAAIgG,OAAQ,QAAOA;YACrB;YAEA;AACE,kBAAI1qB,kBAAkBi4C,SAAS,GAAG;AAChC,uBAAO,KAAKK,mBACVN,MACA,KAAK3kD,MAAMhK,OACA,MACM,IACnB;cACF;UACJ;QACF,CAAC;MACH;MAGAkvD,8BAAyD;AACvD,eAAO,KAAKD,mBACV,KAAK1nD,UAAW,GAChB,KAAKyC,MAAMhK,OACA,MACM,IACnB;MACF;MAEAmvD,2BACEr8D,MACAgtC,MACAh2B,YAC2B;AAC3B,gBAAQg2B,KAAK3mC,MAAI;UACf,KAAK,WAAW;AACd,kBAAMmR,cAAc,KAAKokD,kBAAkB57D,IAAI;AAC/C,gBAAIwX,aAAa;AACfA,0BAAY+wB,UAAU;YACxB;AACA,mBAAO/wB;UACT;UACA,KAAK;AAGH,gBAAI,KAAKoZ,MAAK,CAAU,GAAG;AACzB,mBAAKlI,MAAMF,MAAK,GAAoB;AACpC,mBAAK8V,UAAU9V,MAAK,CAAgB;AACpC,oBAAM8zC,MAAMt8D;AACZs8D,kBAAInB,SAAS;AACbmB,kBAAIroD,KAAK+4B;AACTsvB,kBAAInpD,OAAO,KAAK0nD,mBAAkB;AAClC,mBAAKnyC,MAAMD,KAAI;AACf,mBAAK6V,UAAU7V,KAAI;AACnB,qBAAO,KAAK9T,WAAW2nD,KAAK,qBAAqB;YACnD;AACA;UAEF;AACE,mBAAO,KAAKH,mBACVn8D,MACAgtC,KAAK3mC,MACM,OACX2Q,UACF;QACJ;MACF;MAGAmlD,mBACEn8D,MACAkN,OACA6Z,MACA/P,YACkC;AAElC,gBAAQ9J,OAAK;UACX,KAAK;AACH,gBACE,KAAKqvD,sBAAsBx1C,IAAI,MAC9B,KAAK6J,MAAK,EAAU,KAAK/M,kBAAkB,KAAK3M,MAAMjX,IAAI,IAC3D;AACA,qBAAO,KAAKu8D,2BAA2Bx8D,MAAMgX,UAAU;YACzD;AACA;UAEF,KAAK;AACH,gBAAI,KAAKulD,sBAAsBx1C,IAAI,GAAG;AACpC,kBAAI,KAAK6J,MAAK,GAAU,GAAG;AACzB,uBAAO,KAAKsqC,wCAAwCl7D,IAAI;cACzD,WAAU6jB,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AAC7C,uBAAO,KAAK86D,oCAAoC/6D,IAAI;cACtD;YACF;AACA;UAEF,KAAK;AACH,gBACE,KAAKu8D,sBAAsBx1C,IAAI,KAC/BlD,kBAAkB,KAAK3M,MAAMjX,IAAI,GACjC;AACA,qBAAO,KAAK86D,oCAAoC/6D,IAAI;YACtD;AACA;UAEF,KAAK;AACH,gBACE,KAAKu8D,sBAAsBx1C,IAAI,KAC/BlD,kBAAkB,KAAK3M,MAAMjX,IAAI,GACjC;AACA,qBAAO,KAAKm6D,4BAA4Bp6D,IAAI;YAC9C;AACA;QACJ;MACF;MAEAu8D,sBAAsBx1C,MAAe;AACnC,YAAIA,MAAM;AACR,cAAI,KAAK0V,sBAAqB,EAAI,QAAO;AACzC,eAAK1V,KAAI;AACT,iBAAO;QACT;AACA,eAAO,CAAC,KAAK2V,iBAAgB;MAC/B;MAEA+/B,oCACElnD,UACuC;AACvC,YAAI,CAAC,KAAKqb,MAAK,EAAM,EAAG;AAExB,cAAM8rC,4BAA4B,KAAKxlD,MAAM+W;AAC7C,aAAK/W,MAAM+W,yBAAyB;AAEpC,cAAMgC,MACJ,KAAK0rC,mBAAmB,MAAM;AAC5B,gBAAM37D,OAAO,KAAK2/B,YAAuCpqB,QAAQ;AACjEvV,eAAK2T,iBAAiB,KAAK4gD,sBACzB,KAAKnD,oBACP;AAEA,gBAAM9e,oBAAoBtyC,IAAI;AAC9BA,eAAK6lC,aAAa,KAAK0zB,wCAAuC;AAC9D,eAAK18B,OAAM,EAAS;AACpB,iBAAO78B;QACT,CAAC;AAEH,aAAKkX,MAAM+W,yBAAyByuC;AAEpC,YAAI,CAACzsC,IAAK;AAEV,eAAO,MAAMskB,qBACXtkB,KAC6B,MACjB,IACd;MACF;MAIA0sC,mCAEc;AACZ,YAAI,KAAKC,UAAS,MAAE,GAAY;AAChC,eAAO,KAAKvJ,qBAAoB;MAClC;MAEAA,uBAAuD;AACrD,cAAMrzD,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKwS,SAAS,KAAKymD,SAAS,MAE1B,KAAKoB,cAAc,MAAM;AACvB,eAAKx9B,OAAM,EAAM;AACjB,iBAAO,KAAK61B,qBACV,6BACA,KAAKyD,YAAYnF,KAAK,IAAI,CAC5B;QACD,CAAA,CACH;AACA,YAAIhxD,KAAKwS,OAAO8E,WAAW,GAAG;AAC5B,eAAKlB,MAAMy2C,SAASgB,oBAAoB7tD,IAAI;QAC9C,WAAW,CAAC,KAAKkX,MAAMgX,UAAU,KAAKuF,WAAU,MAAOtO,MAAGvM,OAAO;AAG/D,eAAKikD,aAAY;QACnB;AACA,aAAKhgC,OAAM,EAAM;AACjB,eAAO,KAAKloB,WAAW3U,MAAM,8BAA8B;MAC7D;MAEA88D,uBAAgC;AAC9B,eAAOn4C,0BAA0B,KAAKzN,MAAMjX,IAAI;MAClD;MAMAitC,2BAAoC;AAClC,YAAI,KAAK4vB,qBAAoB,EAAI,QAAO;AACxC,eAAO,MAAM5vB,yBAAwB;MACvC;MAEAse,wBACEh7C,OACAwG,YACmC;AAEnC,cAAMzB,WAAW,KAAK2B,MAAM3B;AAE5B,cAAMu8C,WAAyB,CAAA;AAC/B,aAAKf,iBACH;UACEE,kBAAkB,CAChB,UACA,WACA,aACA,YACA,UAAU;QAEb,GACDa,QACF;AACA,cAAMO,gBAAgBP,SAASO;AAC/B,cAAM0K,WAAWjL,SAASiL;AAC1B,cAAMvH,WAAW1D,SAAS0D;AAC1B,YACE,EAAEhlD,QAAK,OACN6hD,iBAAiBmD,YAAYuH,WAC9B;AACA,eAAK3mD,MAAMy2C,SAASqD,6BAA6B36C,QAAQ;QAC3D;AAEA,cAAMo6B,OAAO,KAAKsB,kBAAiB;AACnC,YAAIzgC,QAAK,GAA6C;AACpD,eAAKwgC,uBAAuBrB,IAAI;QAClC;AACA,cAAMgb,MAAM,KAAK1Z,kBAAkBtB,KAAKxhC,IAAIvQ,OAAO+xC,IAAI;AACvD,YAAI0iB,iBAAiBmD,YAAYuH,UAAU;AACzC,gBAAMC,KAAK,KAAKr9B,YAAmCpqB,QAAQ;AAC3D,cAAIyB,WAAWM,QAAQ;AACrB0lD,eAAGhmD,aAAaA;UAClB;AACA,cAAIq7C,cAAe2K,IAAG3K,gBAAgBA;AACtC,cAAImD,SAAUwH,IAAGxH,WAAWA;AAC5B,cAAIuH,SAAUC,IAAGD,WAAWA;AAC5B,cAAIpS,IAAI1qD,SAAS,gBAAgB0qD,IAAI1qD,SAAS,qBAAqB;AACjE,iBAAKmW,MAAMy2C,SAAS0D,kCAAkCyM,EAAE;UAC1D;AACAA,aAAGC,YAAYtS;AACf,iBAAO,KAAKh2C,WAAWqoD,IAAI,qBAAqB;QAClD;AAEA,YAAIhmD,WAAWM,QAAQ;AACrBq4B,eAAK34B,aAAaA;QACpB;AAEA,eAAO2zC;MACT;MAEAuS,kBAAkBl9D,MAAkD;AAClE,eACGA,KAAKC,SAAS,yBACb,MAAMi9D,kBAAkBl9D,KAAKi9D,SAAS,KACxC,MAAMC,kBAAkBl9D,IAAI;MAEhC;MAEAm9D,0BAA0Bn9D,MAA0B;AAClD,mBAAWosC,SAASpsC,KAAKwS,QAAQ;AAC/B,cACE45B,MAAMnsC,SAAS,gBACdmsC,MAAc71B,YACf,CAAC,KAAKW,MAAMmX,kBACZ;AACA,iBAAKjY,MAAMy2C,SAAS5qB,mBAAmBmK,KAAK;UAC9C;QACF;MACF;MAEAqH,2BACEzzC,MACAwS,QACA67B,kBACM;AACN,cAAMoF,2BAA2BzzC,MAAMwS,QAAQ67B,gBAAgB;AAC/D,aAAK8uB,0BAA0Bn9D,IAAI;MACrC;MAEA2sC,2BAME3sC,MAAiBC,MAAiBoU,WAAoB,OAAU;AAChE,YAAI,KAAKuc,MAAK,EAAS,GAAG;AACxB5wB,eAAK6lC,aAAa,KAAKkvB,qCAAoC,EAAS;QACtE;AAEA,cAAMqI,eACJn9D,SAAS,wBACL,sBACAA,SAAS,iBAAiBA,SAAS,uBACjC,oBACAmqB;AACR,YAAIgzC,gBAAgB,CAAC,KAAKxsC,MAAK,CAAU,KAAK,KAAK8L,iBAAgB,GAAI;AACrE,iBAAO,KAAK/nB,WAAW3U,MAAMo9D,YAAY;QAC3C;AACA,YAAIA,iBAAiB,uBAAuB,KAAKlmD,MAAMmX,kBAAkB;AACvE,eAAKjY,MAAMy2C,SAASW,kCAAkCxtD,IAAI;AAC1D,cAAKA,KAAuCuoC,SAAS;AACnD,mBAAO,MAAMoE,2BAA2B3sC,MAAMo9D,cAAc/oD,QAAQ;UACtE;QACF;AACA,aAAK8oD,0BAA0Bn9D,IAAI;AAEnC,eAAO,MAAM2sC,2BAA2B3sC,MAAMC,MAAMoU,QAAQ;MAC9D;MAEAgpD,4BAA4Br9D,MAAwB;AAClD,YAAI,CAACA,KAAKmT,QAAQnT,KAAKiU,IAAI;AAGzB,eAAKg4C,gBAAgBjsD,KAAKiU,IAAE,IAA6B;QAC3D,OAAO;AACL,gBAAMopD,4BAA4Br9D,IAAI;QACxC;MACF;MAEAs9D,2BAA2BC,OAA8C;AACvEA,cAAM/oC,QAAQx0B,UAAQ;AACpB,eAAIA,QAAAA,OAAAA,SAAAA,KAAMC,UAAS,wBAAwB;AACzC,iBAAKmW,MAAMy2C,SAASuD,0BAA0BpwD,KAAK8lC,cAAc;UACnE;QACF,CAAC;MACH;MAEA+J,iBACED,UAEA4tB,YACwC;AAKxC,aAAKF,2BAA2B1tB,QAAQ;AACxC,eAAOA;MACT;MAEAI,eACEC,OACAC,cACAC,SACA36B,qBACuC;AACvC,cAAMxV,OAAO,MAAMgwC,eACjBC,OACAC,cACAC,SACA36B,mBACF;AAEA,YAAIxV,KAAKC,SAAS,mBAAmB;AACnC,eAAKq9D,2BAA2Bt9D,KAAK2qB,QAAQ;QAC/C;AAEA,eAAO3qB;MACT;MAEA0X,eACEC,MAEApC,UACAqC,SACAV,OACc;AACd,YAAI,CAAC,KAAKslB,sBAAqB,KAAM,KAAK5L,MAAa,EAAA,GAAG;AAIxD,eAAK1Z,MAAMwX,qBAAqB;AAChC,eAAK3H,KAAI;AAET,gBAAM02C,oBACJ,KAAK99B,YAAmCpqB,QAAQ;AAClDkoD,4BAAkB7rD,aAAa+F;AAC/B,iBAAO,KAAKhD,WAAW8oD,mBAAmB,qBAAqB;QACjE;AAEA,YAAIC,iBAAiB;AACrB,YACE,KAAK9sC,MAAK,EAAe,KACzB,KAAKoD,kBAAmB,MAAA,IACxB;AACA,cAAIpc,SAAS;AACXV,kBAAMa,OAAO;AACb,mBAAOJ;UACT;AACAT,gBAAMW,sBAAsB6lD,iBAAiB;AAC7C,eAAK32C,KAAI;QACX;AAGA,YAAI,KAAK6J,MAAW,EAAA,KAAK,KAAKA,MAAkB,EAAA,GAAG;AACjD,cAAI+sC;AAIJ,gBAAMpvB,SAAS,KAAKotB,mBAAmB,MAAM;AAC3C,gBAAI,CAAC/jD,WAAW,KAAKgmD,qBAAqBjmD,IAAI,GAAG;AAG/C,oBAAMkmD,eACJ,KAAKpB,oCAAoClnD,QAAQ;AACnD,kBAAIsoD,cAAc;AAChB,uBAAOA;cACT;YACF;AAEA,kBAAMzpB,gBAAgB,KAAKuoB,iCAAgC;AAC3D,gBAAI,CAACvoB,cAAe;AAEpB,gBAAIspB,kBAAkB,CAAC,KAAK9sC,MAAK,EAAU,GAAG;AAC5C+sC,qCAAuB,KAAKzmD,MAAM2X,YAAW;AAC7C;YACF;AAEA,gBAAI9J,gBAAgB,KAAK7N,MAAMjX,IAAI,GAAG;AACpC,oBAAMsuC,UAAS,MAAMuvB,8BACnBnmD,MACApC,UACA2B,KACF;AACAq3B,cAAAA,QAAO56B,iBAAiBygC;AACxB,qBAAO7F;YACT;AAEA,gBAAI,CAAC32B,WAAW,KAAK2b,IAAG,EAAU,GAAG;AACnC,oBAAMvzB,QAAO,KAAK2/B,YAEhBpqB,QAAQ;AACVvV,cAAAA,MAAKwW,SAASmB;AAGd3X,cAAAA,MAAK0W,YAAY,KAAKs9B,6BAA4B,IAE5B,KACtB;AAGA,mBAAKspB,2BAA2Bt9D,MAAK0W,SAAS;AAE9C1W,cAAAA,MAAK2T,iBAAiBygC;AACtB,kBAAIl9B,MAAMW,qBAAqB;AAC5B7X,gBAAAA,MAA0CuW,WACzCmnD;cACJ;AAEA,qBAAO,KAAKrnD,qBAAqBrW,OAAMkX,MAAMW,mBAAmB;YAClE;AAEA,kBAAMkmD,YAAY,KAAK7mD,MAAMjX;AAC7B,gBAEE89D,cAAS,MAETA,cAAS,MAERA,cAAS,MACR75C,wBAAwB65C,SAAS,KACjC,CAAC,KAAKvhC,sBAAqB,GAC7B;AAEA;YACF;AAEA,kBAAMx8B,OAAO,KAAK2/B,YAAyCpqB,QAAQ;AACnEvV,iBAAK4R,aAAa+F;AAClB3X,iBAAK2T,iBAAiBygC;AACtB,mBAAO,KAAKz/B,WAAW3U,MAAM,2BAA2B;UAC1D,CAAC;AAED,cAAI29D,sBAAsB;AACxB,iBAAKv4D,WAAWu4D,sBAAoB,EAAW;UACjD;AAEA,cAAIpvB,QAAQ;AACV,gBACEA,OAAOtuC,SAAS,gCACf,KAAK2wB,MAAK,EAAO,KACf,KAAKA,MAAoB,EAAA,KACxB,KAAKoD,kBAAmB,MAA+B,KAC3D;AACA,mBAAK5d,MACHy2C,SAASiC,mDACT,KAAK53C,MAAM3B,QACb;YACF;AACA,mBAAOg5B;UACT;QACF;AAEA,eAAO,MAAM72B,eAAeC,MAAMpC,UAAUqC,SAASV,KAAK;MAC5D;MAEAm9B,eAAer0C,MAA6B;AAAA,YAAAg+D;AAC1C,cAAM3pB,eAAer0C,IAAI;AAEzB,cAAM;UAAEwW;QAAQ,IAAGxW;AACnB,YACEwW,OAAOvW,SAAS,+BAChB,GAAA+9D,gBAACxnD,OAAO1E,UAAK,QAAZksD,cAAcrrD,gBACf;AACA3S,eAAK2T,iBAAiB6C,OAAO7C;AAC7B3T,eAAKwW,SAASA,OAAO5E;QACvB;MACF;MAEAqsD,YACEtuB,MACAuuB,cACAC,SACc;AACd,YAAIC;AACJ,YACEv5C,wBAAuB,EAAO,IAAIs5C,WAClC,CAAC,KAAK3hC,sBAAqB,MAC1B,KAAKT,aAAmB,EAAA,MACtBqiC,cAAc,KAAKriC,aAA0B,GAAA,KAChD;AACA,gBAAM/7B,OAAO,KAAK2/B,YAEhBu+B,YAAY;AACdl+D,eAAK4R,aAAa+9B;AAClB3vC,eAAK8lC,iBAAiB,KAAKmzB,SAAS,MAAM;AACxC,iBAAKlyC,KAAI;AACT,gBAAI,KAAK6J,MAAK,EAAU,GAAG;AACzB,kBAAIwtC,aAAa;AACf,qBAAKhoD,MAAMzG,OAAOtG,mBAAmB,KAAK6N,MAAM3B,UAAU;kBACxDjM,SAAS;gBACX,CAAC;cACH;AACA,qBAAO,KAAKiqD,qBAAoB;YAClC;AAEA,mBAAO,KAAK4C,YAAW;UACzB,CAAC;AACD,eAAKxhD,WACH3U,MACAo+D,cAAc,0BAA0B,gBAC1C;AAEA,eAAKvB,aAAY;AACjB,iBAAO,KAAKoB,YAEVj+D,MACAk+D,cACAC,OACF;QACF;AAEA,eAAO,MAAMF,YAAYtuB,MAAMuuB,cAAcC,OAAO;MACtD;MAEA/rB,kBACE9rB,MACA/Q,UACA8oD,eACAxoD,WACM;AAGN,YAAI,CAAC,KAAKqB,MAAMmX,kBAAkB;AAChC,gBAAM+jB,kBAAkB9rB,MAAM/Q,UAAU8oD,eAAexoD,SAAS;QAClE;MACF;MAEAq7B,sBAAsBlxC,MAAmC;AACvD,cAAMkxC,sBAAsBlxC,IAAI;AAChC,YAAIA,KAAKmxC,UAAUnxC,KAAK0jC,eAAe,SAAS;AAC9C,eAAKttB,MACHy2C,SAASrrB,+BACTxhC,KAAKqX,WAAW,CAAC,EAAElJ,IAAIvQ,KACzB;QACF;MACF;MAWA0gE,wBAAwB;MAAC;MAEzB9sB,uBAAuBC,UAA4B;AACjD,YAAI,MAAMD,uBAAuBC,QAAQ,EAAG,QAAO;AACnD,YAAI,KAAK1V,aAAY,GAAS,GAAG;AAC/B,gBAAM1M,KAAK,KAAK2E,kBAAiB;AACjC,iBAAOyd,WACHpiB,OAAE,OAAiCA,OAAE,KACrCA,OAAyB;QAC/B;AACA,eAAO,CAACoiB,YAAY,KAAK1V,aAAY,EAAW;MAClD;MAEA2V,iBACE1xC,MACAyxC,UACAjvC,OACA2L,KACM;AACN,cAAMujC,iBAAiB1xC,MAAMyxC,UAAUjvC,OAAO2L,GAAG;AACjD,YAAIsjC,UAAU;AACXzxC,eAAkC+mC,aACjCvkC,UAAU,SAAS,SAAS;QAChC,OAAO;AACJxC,eAA6B0jC,aAC5BlhC,UAAU,UAAUA,UAAU,WAAWA,QAAQ;QACrD;MACF;MAEAmkC,YACE3mC,MACa;AACb,YAAI,KAAK4wB,MAAK,GAAU,GAAG;AACzB5wB,eAAK0jC,aAAa;AAClB,iBAAO,MAAMiD,YAAY3mC,IAAmC;QAC9D;AAEA,YAAIu+D;AACJ,YACE16C,kBAAkB,KAAK3M,MAAMjX,IAAI,KACjC,KAAK+zB,kBAAmB,MAAA,IACxB;AACAh0B,eAAK0jC,aAAa;AAClB,iBAAO,KAAK03B,+BACVp7D,IACF;QACD,WAAU,KAAK+7B,aAAY,GAAS,GAAG;AACtC,gBAAMs/B,yBAAyB,KAAKmD,sBAClCx+D,MACe,KACjB;AACA,cAAI,KAAKg0B,kBAAmB,MAAA,IAAyB;AACnD,mBAAO,KAAKonC,+BACVp7D,MACAq7D,sBACF;UACF,OAAO;AACLkD,yBAAa,MAAME,8BACjBz+D,MACAq7D,sBACF;UACF;QACF,OAAO;AACLkD,uBAAa,MAAM53B,YAAY3mC,IAAmC;QACpE;AAIA,YACEu+D,WAAW76B,eAAe,UAE1B66B,WAAWlnD,WAAWC,SAAS,KAE/BinD,WAAWlnD,WAAW,CAAC,EAAEpX,SAAS,0BAClC;AACA,eAAKmW,MAAMy2C,SAASkD,wCAAwCwO,UAAU;QACxE;AAEA,eAAOA;MACT;MAEAxnD,YACE/W,MAKAgX,YACa;AACb,YAAI,KAAK4Z,MAAK,EAAW,GAAG;AAE1B,eAAK7J,KAAI;AACT,gBAAM23C,mBAAmB1+D;AACzB,cAAIq7D,yBAA8C;AAClD,cACE,KAAKt/B,aAAY,GAAS,KAE1B,KAAKyV,uBAAsC,KAAK,GAChD;AACA6pB,qCAAyB,KAAKmD,sBAC5BE,kBACe,KACjB;UACF,OAAO;AACLA,6BAAiBh7B,aAAa;UAChC;AACA,iBAAO,KAAK03B,+BACVsD,kBACArD,wBACe,IACjB;QACD,WAAU,KAAK9nC,IAAG,EAAM,GAAG;AAE1B,gBAAM5kB,SAAS3O;AACf2O,iBAAOiD,aAAa,MAAMozB,gBAAe;AACzC,eAAKrI,UAAS;AACd,eAAKnT,oBAAoB;AACzB,iBAAO,KAAK7U,WAAWhG,QAAQ,oBAAoB;QACpD,WAAU,KAAK0tB,cAAa,EAAO,GAAG;AAErC,gBAAMmW,OAAOxyC;AAEb,eAAKs8B,iBAAgB,GAAc;AACnCkW,eAAKv+B,KAAK,KAAKqxB,gBAAe;AAC9B,eAAK3I,UAAS;AACd,iBAAO,KAAKhoB,WAAW69B,MAAM,8BAA8B;QAC7D,OAAO;AACL,iBAAO,MAAMz7B,YACX/W,MACAgX,UACF;QACF;MACF;MAEA2nD,kBAA2B;AACzB,eACE,KAAK5iC,aAAY,GAAa,KAAK,KAAKrI,UAAW,EAACzzB,SAAkB;MAE1E;MAEAktC,+BAA0E;AACxE,YAAI,KAAKwxB,gBAAe,GAAI;AAC1B,gBAAMC,MAAM,KAAKnqD,UAAS;AAC1B,eAAKsS,KAAI;AACT63C,cAAIvH,WAAW;AACf,iBAAO,KAAK4E,WAAW2C,KAAK,MAAM,IAAI;QACxC;AAIA,YAAI,KAAKhuC,MAAK,GAAc,GAAG;AAC7B,gBAAM2d,SAAS,KAAK4rB,4BAClB,KAAK1lD,UACP,CAAA;AACA,cAAI85B,OAAQ,QAAOA;QACrB;AAEA,eAAO,MAAMpB,6BAA4B;MAC3C;MAEA+uB,kBACEl8D,MACAK,MACAw+D,0BAAmC,OACnC;AACA,cAAM;UAAExwC;YAAqB,KAAKnX;AAClC,cAAMM,cAAc,MAAM0kD,kBACxBl8D,MACAK,MACAw+D,2BAA2BxwC,gBAC7B;AAEA,YAAI,CAACA,iBAAkB,QAAO7W;AAE9B,mBAAW;UAAEvD;UAAI2Z;QAAK,KAAKpW,YAAYsnD,cAAc;AAEnD,cAAI,CAAClxC,KAAM;AAGX,cAAIvtB,SAAS,WAAW,CAAC,CAAC4T,GAAG6xB,gBAAgB;AAC3C,iBAAK1vB,MAAMy2C,SAAS2B,uCAAuC5gC,IAAI;UACjE,WACE,CAACmxC,+BAA+BnxC,MAAM,KAAKjX,UAAU,QAAQ,CAAC,GAC9D;AACA,iBAAKP,MACHy2C,SAAS9+C,oEACT6f,IACF;UACF;QACF;AAEA,eAAOpW;MACT;MAEAwnD,sBACExuD,OACAwG,YACa;AACb,YAAI,KAAK4Z,MAAK,EAAU,KAAK,KAAKwL,sBAAsB,MAAM,GAAG;AAC/D,gBAAMp8B,OAAO,KAAKyU,UAAS;AAC3B,eAAKooB,OAAM,EAAU;AACrB,iBAAO,KAAK+9B,uBAAuB56D,MAAM;YAAE4jC,OAAO;UAAK,CAAC;QAC1D;AAEA,YAAI,KAAK7H,aAAY,GAAS,GAAG;AAC/B,iBAAO,KAAK6+B,uBACV,KAAKnmD,UACP,CAAA;QACF;AAEA,YAAI,KAAKsnB,aAAY,GAAc,GAAG;AACpC,gBAAMwS,SAAS,KAAK4rB,4BAA4B,KAAK1lD,UAAW,CAAA;AAChE,cAAI85B,OAAQ,QAAOA;QACrB;AAEA,eAAO,MAAMywB,sBAAsBxuD,OAAOwG,UAAU;MACtD;MAEAioD,sBAA0D;AACxD,eAAO,KAAKvN,gBAAgB,CAAC,UAAU,aAAa,SAAS,CAAC;MAChE;MAEAwN,mBAAmB5vB,QAAa4e,WAA2C;AACzE,eAAOA,UAAUl1B,KAAK00B,cAAY;AAChC,cAAIgD,mBAAmBhD,QAAQ,GAAG;AAChC,mBAAOpe,OAAO+iB,kBAAkB3E;UAClC;AACA,iBAAO,CAAC,CAACpe,OAAOoe,QAAQ;QAC1B,CAAC;MACH;MAEAkE,0BAA0B;AACxB,eACE,KAAK71B,aAAuB,GAAA,KAC5B,KAAK/H,kBAAmB,MAA6B;MAEzD;MAEAqb,iBACE/7B,WACAg8B,QACAp4B,OACM;AACN,cAAMg3C,YAAY,CAChB,WACA,WACA,UACA,aACA,YACA,YACA,YACA,QAAQ;AAEV,aAAK6C,iBACH;UACEE,kBAAkB/C;UAClBgD,qBAAqB,CAAC,MAAM,KAAK;UACjCS,+BAA+B;UAC/BR,eAAetE,SAAS8B;QACzB,GACDrf,MACF;AAEA,cAAM6vB,mCAAmCA,MAAM;AAC7C,cAAI,KAAKvN,wBAAuB,GAAI;AAClC,iBAAK7qC,KAAI;AACT,iBAAKA,KAAI;AACT,gBAAI,KAAKm4C,mBAAmB5vB,QAAQ4e,SAAS,GAAG;AAC9C,mBAAK93C,MACHy2C,SAAS+C,+BACT,KAAK14C,MAAM2X,YAAW,CACxB;YACF;AACA,kBAAMuwC,sBAAsB9rD,WAAWg8B,MAAuB;UAChE,OAAO;AACL,iBAAK+vB,6BACH/rD,WACAg8B,QACAp4B,OACA,CAAC,CAACo4B,OAAO5F,MACX;UACF;;AAEF,YAAI4F,OAAO/G,SAAS;AAClB,eAAKwzB,mBAAmBoD,gCAAgC;QAC1D,OAAO;AACLA,2CAAgC;QAClC;MACF;MAEAE,6BACE/rD,WACAg8B,QACAp4B,OACAuyB,UACM;AACN,cAAMmsB,MAAM,KAAKT,yBACf7lB,MACF;AACA,YAAIsmB,KAAK;AACPtiD,oBAAUH,KAAKS,KAAKgiD,GAAG;AAEvB,cAAKtmB,OAAe+nB,UAAU;AAC5B,iBAAKjhD,MAAMy2C,SAASsB,2BAA2B7e,MAAM;UACvD;AACA,cAAKA,OAAe+iB,eAAe;AACjC,iBAAKj8C,MAAMy2C,SAASuB,gCAAgC9e,QAAQ;cAC1Doe,UAAWpe,OAAe+iB;YAC5B,CAAC;UACH;AACA,cAAK/iB,OAAe/G,SAAS;AAC3B,iBAAKnyB,MAAMy2C,SAASwB,0BAA0B/e,MAAM;UACtD;AACA,cAAKA,OAAeytB,UAAU;AAC5B,iBAAK3mD,MAAMy2C,SAASyB,2BAA2Bhf,MAAM;UACvD;AAEA;QACF;AAEA,YAAI,CAAC,KAAKp4B,MAAMoX,mBAAoBghB,OAAe+nB,UAAU;AAC3D,eAAKjhD,MAAMy2C,SAASoC,mCAAmC3f,MAAM;QAC/D;AAEA,YAAKA,OAAeytB,UAAU;AAC5B,cAAI,CAAC7lD,MAAMooD,eAAe;AACxB,iBAAKlpD,MAAMy2C,SAASuC,uBAAuB9f,MAAM;UACnD;QACF;AAIA,cAAM+vB,6BACJ/rD,WACAg8B,QACAp4B,OACAuyB,QACF;MACF;MAEA81B,6BACEC,cACM;AACN,cAAMjpD,WAAW,KAAKgd,IAAG,EAAY;AACrC,YAAIhd,SAAUipD,cAAajpD,WAAW;AAEtC,YAAKipD,aAAqBhK,YAAY,KAAK5kC,MAAe,EAAA,GAAG;AAC3D,eAAKxa,MAAMy2C,SAASO,wBAAwBoS,YAAY;QAC1D;AAEA,YAAKA,aAAqBj3B,WAAW,KAAK3X,MAAe,EAAA,GAAG;AAC1D,eAAKxa,MAAMy2C,SAASM,uBAAuBqS,YAAY;QACzD;MACF;MAOAzyB,yBACE/sC,MACAgtC,MACAh2B,YACa;AACb,cAAMw7B,OACJxF,KAAK/sC,SAAS,eAEV,KAAKo8D,2BAA2Br8D,MAAMgtC,MAAMh2B,UAAU,IACtDoT;AACN,eAAOooB,QAAQ,MAAMzF,yBAAyB/sC,MAAMgtC,MAAMh2B,UAAU;MACtE;MAIAi2B,+BAAwC;AACtC,YAAI,KAAK6vB,qBAAoB,EAAI,QAAO;AACxC,eAAO,MAAM7vB,6BAA4B;MAC3C;MAGAG,iBACEJ,MAEAz3B,UACAC,qBACc;AAGd,YAAI,CAAC,KAAK0B,MAAM+W,0BAA0B,CAAC,KAAK2C,MAAK,EAAY,GAAG;AAClE,iBAAO,MAAMwc,iBACXJ,MAEAz3B,UACAC,mBACF;QACF;AAEA,cAAM+4B,SAAS,KAAKzR,SAAS,MAC3B,MAAMsQ,iBAAiBJ,MAAMz3B,QAAQ,CACvC;AAEA,YAAI,CAACg5B,OAAOvuC,MAAM;AAChB,cAAIuuC,OAAOlgC,OAAO;AAEhB,kBAAMg/B,2BAA2B73B,qBAAqB+4B,OAAOlgC,KAAK;UACpE;AAEA,iBAAO2+B;QACT;AACA,YAAIuB,OAAOlgC,MAAO,MAAK6I,QAAQq3B,OAAOrR;AACtC,eAAOqR,OAAOvuC;MAChB;MAIAwuC,eACExuC,MACAuV,UAC4B;AAC5B,cAAM4pB,UAAU,MAAMqP,eAAexuC,MAAMuV,QAAQ;AACnD,YAAI,KAAKge,IAAG,EAAY,GAAG;AACxB4L,kBAAyB5oB,WAAW;AAIrC,eAAKgC,iBAAiBvY,IAAI;QAC5B;AAEA,YAAI,KAAK4wB,MAAK,EAAS,GAAG;AACxB,gBAAM6d,eAAe,KAAK9O,YAAoCpqB,QAAQ;AACtEk5B,uBAAa78B,aAAa5R;AAC1ByuC,uBAAa3I,iBAAiB,KAAK8tB,sBAAqB;AAExD,iBAAO,KAAKj/C,WAAW85B,cAAc,sBAAsB;QAC7D;AAEA,eAAOzuC;MACT;MAEA2uC,uBACE3uC,MACkC;AAClC,YAAI,CAAC,KAAKkX,MAAMmX,oBAAoB,KAAK0N,aAAwB,GAAA,GAAG;AAClE,iBAAO,KAAKggC,mBAAmB,MAAM,KAAKptB,uBAAuB3uC,IAAI,CAAC;QACxE;AAGA,cAAMuV,WAAW,KAAK2B,MAAM3B;AAE5B,cAAMkqD,YAAY,KAAKpjC,cAAa,GAAY;AAEhD,YACEojC,cACC,KAAK1jC,aAAwB,GAAA,KAAK,CAAC,KAAKkR,6BAA4B,IACrE;AACA,gBAAM,KAAK72B,MACTy2C,SAASkB,mCACT,KAAK72C,MAAM3B,QACb;QACF;AAEA,cAAMmqD,eAAe77C,kBAAkB,KAAK3M,MAAMjX,IAAI;AACtD,cAAMuX,cACHkoD,gBAAgB,KAAKtD,4BAA6B,KACnD,MAAMztB,uBAAuB3uC,IAAI;AAEnC,YAAI,CAACwX,YAAa,QAAO;AAEzB,YACEA,YAAYvX,SAAS,4BACrBuX,YAAYvX,SAAS,4BACrBw/D,WACA;AACAz/D,eAAK+mC,aAAa;QACpB;AAEA,YAAI04B,WAAW;AAEb,eAAKhoD,mBAAmBD,aAAajC,QAAQ;AAE7CiC,sBAAY+wB,UAAU;QACxB;AAEA,eAAO/wB;MACT;MAEA03B,aACElvC,MACAmvC,aACAC,YAEAxmB,aACM;AACN,aAAK,CAACumB,eAAeC,eAAe,KAAKrT,aAA2B,GAAA,GAAG;AACrE;QACF;AAEA,cAAMmT,aACJlvC,MACAmvC,aACAC,YACCpvC,KAAauoC,UAAO,OAAA,IAGvB;AACA,cAAM50B,iBAAiB,KAAK2gD,yBAC1B,KAAKjD,0BACP;AACA,YAAI19C,eAAgB3T,MAAK2T,iBAAiBA;MAC5C;MAEAgsD,6BACE3/D,MACM;AACN,YAAI,CAACA,KAAKuW,UAAU;AAClB,cAAI,KAAKgd,IAAG,EAAQ,GAAG;AACrBvzB,iBAAK4/D,WAAW;UACjB,WAAU,KAAKrsC,IAAG,EAAY,GAAG;AAChCvzB,iBAAKuW,WAAW;UAClB;QACF;AAEA,cAAMtW,OAAO,KAAKq1D,yBAAwB;AAC1C,YAAIr1D,KAAMD,MAAK8lC,iBAAiB7lC;MAClC;MAEA4U,mBAAmB7U,MAAwC;AACzD,aAAK2/D,6BAA6B3/D,IAAI;AAEtC,YACE,KAAKkX,MAAMmX,oBACX,EAAEruB,KAAKw1D,YAAY,CAACx1D,KAAK8lC,mBACzB,KAAKlV,MAAW,EAAA,GAChB;AACA,eAAKxa,MACHy2C,SAASU,iCACT,KAAKr2C,MAAM3B,QACb;QACF;AACA,YAAIvV,KAAKq3D,YAAY,KAAKzmC,MAAW,EAAA,GAAG;AACtC,gBAAM;YAAE7pB;UAAK,IAAG/G;AAChB,eAAKoW,MACHy2C,SAASG,gCACT,KAAK91C,MAAM3B,UACX;YACE03C,cACElmD,IAAI9G,SAAS,gBAAgB,CAACD,KAAK0U,WAC/B3N,IAAIV,OACJ,IAAI,KAAKylB,MAAMgD,MAAM/nB,IAAInJ,OAAOmJ,IAAIlJ,GAAG,CAAC;UAChD,CACF;QACF;AAEA,eAAO,MAAMgX,mBAAmB7U,IAAI;MACtC;MAEAgV,0BACEhV,MACwB;AAExB,YAAIA,KAAKq3D,UAAU;AACjB,eAAKjhD,MAAMy2C,SAASwC,2BAA2BrvD,IAAI;QACrD;AAGA,YAAIA,KAAKqyD,eAAe;AACtB,eAAKj8C,MAAMy2C,SAASyC,gCAAgCtvD,MAAM;YAExD0tD,UAAU1tD,KAAKqyD;UACjB,CAAC;QACH;AAEA,aAAKsN,6BAA6B3/D,IAAI;AACtC,eAAO,MAAMgV,0BAA0BhV,IAAI;MAC7C;MAEA6/D,2BACE7/D,MACyB;AACzB,aAAK2/D,6BAA6B3/D,IAAI;AACtC,YAAIA,KAAKuW,UAAU;AACjB,eAAKH,MAAMy2C,SAASK,0BAA0BltD,IAAI;QACpD;AACA,eAAO,MAAM6/D,2BAA2B7/D,IAAI;MAC9C;MAEAqT,gBACEC,WACAf,QACAgB,aACApB,SACAqB,eACAC,mBACM;AACN,cAAME,iBAAiB,KAAK2gD,yBAC1B,KAAKlD,oBACP;AACA,YAAIz9C,kBAAkBH,eAAe;AACnC,eAAK4C,MAAMy2C,SAASQ,8BAA8B15C,cAAc;QAClE;AAGA,cAAM;UAAE40B,UAAU;UAAOloC;QAAM,IAAGkS;AAElC,YAAIg2B,YAAYloC,SAAS,SAASA,SAAS,QAAQ;AACjD,eAAK+V,MAAMy2C,SAASS,iBAAiB/6C,QAAQ;YAAElS;UAAK,CAAC;QACvD;AACA,YAAIsT,eAAgBpB,QAAOoB,iBAAiBA;AAC5C,cAAMN,gBACJC,WACAf,QACAgB,aACApB,SACAqB,eACAC,iBACF;MACF;MAEAg9B,uBACEn9B,WACAf,QACAgB,aACApB,SACM;AACN,cAAMwB,iBAAiB,KAAK2gD,yBAC1B,KAAKlD,oBACP;AACA,YAAIz9C,eAAgBpB,QAAOoB,iBAAiBA;AAC5C,cAAM88B,uBAAuBn9B,WAAWf,QAAQgB,aAAapB,OAAO;MACtE;MAEA2tD,iCACE9/D,MACAK,MACA;AACA,YAAIL,KAAKC,SAAS,kBAAmB;AAErC,YACGD,KAAgBC,SAAS,sBAC1B,CAACqyD,eAAA5f,KACE1yC,KAA6CkN,OAC9C,MACF,GACA;AACA;QACF;AAEA,cAAM4yD,iCAAiC9/D,MAAMK,IAAI;MACnD;MAEAqwC,gBAAgB1wC,MAAqB;AACnC,cAAM0wC,gBAAgB1wC,IAAI;AAE1B,YAAIA,KAAKgQ,eAAe,KAAK4gB,MAAK,EAAM,KAAK,KAAKA,MAAkB,EAAA,IAAI;AACtE5wB,eAAK2wC,sBAAsB,KAAKgsB,iCAAgC;QAClE;AACA,YAAI,KAAKtgC,cAAa,GAAe,GAAG;AACtCr8B,eAAKwnC,aAAa,KAAKwyB,sBAAsB,YAAY;QAC3D;MACF;MAEAjpB,kBACE77B,MACAK,UACAhC,aACApB,SACAgD,WACAC,YACAI,qBACG;AACH,cAAM7B,iBAAiB,KAAK2gD,yBAC1B,KAAKlD,oBACP;AACA,YAAIz9C,eAAgBuB,MAAKvB,iBAAiBA;AAE1C,eAAO,MAAMo9B,kBACX77B,MAEAK,UACAhC,aACApB,SACAgD,WACAC,YACAI,mBACF;MACF;MAEA88B,oBAAoBtyC,MAAkBwT,eAA8B;AAClE,cAAMG,iBAAiB,KAAK2gD,yBAC1B,KAAKlD,oBACP;AACA,YAAIz9C,eAAgB3T,MAAK2T,iBAAiBA;AAC1C,cAAM2+B,oBAAoBtyC,MAAMwT,aAAa;MAC/C;MAGA++B,WACEC,MACAnyC,MACM;AACN,cAAMkyC,WAAWC,MAAMnyC,IAAI;AAC3B,YACEmyC,KAAKv+B,GAAGhU,SAAS,gBACjB,CAAC,KAAKu8B,sBAAqB,KAC3B,KAAKjJ,IAAG,EAAQ,GAChB;AACAif,eAAKotB,WAAW;QAClB;AAEA,cAAM3/D,OAAO,KAAKq1D,yBAAwB;AAC1C,YAAIr1D,MAAM;AACRuyC,eAAKv+B,GAAG6xB,iBAAiB7lC;AACzB,eAAKsY,iBAAiBi6B,KAAKv+B,EAAE;QAC/B;MACF;MAGAw+B,kCACEzyC,MACA0yC,MAC2B;AAC3B,YAAI,KAAK9hB,MAAK,EAAS,GAAG;AACxB5wB,eAAK6lC,aAAa,KAAK+tB,sBAAqB;QAC9C;AACA,eAAO,MAAMnhB,kCAAkCzyC,MAAM0yC,IAAI;MAC3D;MAEA7E,iBACEr4B,qBACAo9B,gBACc;AAAA,YAAAC,MAAAG,OAAA+sB,WAAA9sB,OAAA+sB;AAGd,YAAI9oD;AACJ,YAAI47B;AACJ,YAAImtB;AAEJ,YACE,KAAKtpD,UAAU,KAAK,MACnB,KAAKia,MAAoB,GAAA,KAAK,KAAKA,MAAW,EAAA,IAC/C;AAEA1Z,kBAAQ,KAAKA,MAAM1I,MAAK;AAExBskC,UAAAA,OAAM,KAAKhW,SACT,MAAM,MAAM+Q,iBAAiBr4B,qBAAqBo9B,cAAc,GAChE17B,KACF;AAIA,cAAI,CAAC47B,KAAIzkC,MAAO,QAAOykC,KAAI9yC;AAK3B,gBAAM;YAAEilB;cAAY,KAAK/N;AACzB,gBAAM67B,iBAAiB9tB,QAAQA,QAAQ3N,SAAS,CAAC;AACjD,cAAIy7B,mBAAmB5tB,MAAGtM,UAAUk6B,mBAAmB5tB,MAAGpM,QAAQ;AAChEkM,oBAAQC,IAAG;UACb;QACF;AAEA,YAAI,GAAA2tB,OAACC,SAAG,QAAHD,KAAKxkC,UAAS,CAAC,KAAKuiB,MAAK,EAAM,GAAG;AACrC,iBAAO,MAAMid,iBAAiBr4B,qBAAqBo9B,cAAc;QACnE;AAOA,YAAI,CAAC17B,SAASA,UAAU,KAAKA,MAAOA,SAAQ,KAAKA,MAAM1I,MAAK;AAE5D,YAAImF;AAEJ,cAAMyI,QAAQ,KAAK0gB,SAAUoW,WAAuB;AAAA,cAAAnD,aAAAmwB;AAElDvsD,2BAAiB,KAAK4gD,sBAAsB,KAAKnD,oBAAoB;AACrE,gBAAMpkB,OAAO,MAAMa,iBACjBr4B,qBACAo9B,cACF;AAEA,cACE5F,KAAK/sC,SAAS,8BAAyB8vC,cACvC/C,KAAKl7B,UAAK,QAAVi+B,YAAYp9B,eACZ;AACAugC,kBAAK;UACP;AAGA,gBAAIgtB,kBAAAvsD,mBAAAusD,OAAAA,SAAAA,gBAAgB1tD,OAAO8E,YAAW,GAAG;AACvC,iBAAKsoB,2BAA2BoN,MAAMr5B,cAAc;UACtD;AACAq5B,eAAKr5B,iBAAiBA;AA2BtB,iBAAOq5B;QACR,GAAE91B,KAAK;AAGR,YAAI,CAACkF,MAAM/N,SAAS,CAAC+N,MAAMghB,SAAS;AAIlC,cAAIzpB,eAAgB,MAAKwsD,6BAA6BxsD,cAAc;AACpE,iBAAOyI,MAAMpc;QACf;AAEA,YAAI,CAAC8yC,MAAK;AAIR8Z,iBAAO,CAAC,KAAKj2C,UAAU,KAAK,CAAC;AAI7BspD,qBAAW,KAAKnjC,SACd,MAAM,MAAM+Q,iBAAiBr4B,qBAAqBo9B,cAAc,GAChE17B,KACF;AAGA,cAAI,CAAC+oD,SAAS5xD,MAAO,QAAO4xD,SAASjgE;QACvC;AAEA,aAAAgzC,QAAIF,SAAG,QAAHE,MAAKhzC,MAAM;AAEb,eAAKkX,QAAQ47B,KAAI5V;AACjB,iBAAO4V,KAAI9yC;QACb;AAEA,YAAIoc,MAAMpc,MAAM;AAEd,eAAKkX,QAAQkF,MAAM8gB;AACnB,cAAIvpB,eAAgB,MAAKwsD,6BAA6BxsD,cAAc;AACpE,iBAAOyI,MAAMpc;QACf;AAEA,aAAA+/D,YAAIE,aAAQ,QAARF,UAAU//D,MAAM;AAElB,eAAKkX,QAAQ+oD,SAAS/iC;AACtB,iBAAO+iC,SAASjgE;QAClB;AAEA,gBAAMizC,QAAAH,SAAAG,OAAAA,SAAAA,MAAK5kC,UAAS+N,MAAM/N,WAAK2xD,aAAIC,aAAAD,OAAAA,SAAAA,WAAU3xD;MAC/C;MAEA8xD,6BAA6BngE,MAAW;AAAA,YAAAmuC;AACtC,YACEnuC,KAAKwS,OAAO8E,WAAW,KACvB,CAACtX,KAAKwS,OAAO,CAAC,EAAE4hD,cAChB,GAAAjmB,cAACnuC,KAAK8R,UAAK,QAAVq8B,YAAYiyB,kBACb,KAAKtsD,gBAAgB,cAAc,0BAA0B,GAC7D;AACA,eAAKsC,MAAMy2C,SAAS2C,wBAAwBxvD,IAAI;QAClD;MACF;MAGA63D,gBACEriD,qBACA6qD,UACc;AACd,YAAI,CAAC,KAAK1pD,UAAU,KAAK,KAAK,KAAKia,MAAK,EAAM,GAAG;AAC/C,iBAAO,KAAKmpC,qBAAoB;QAClC;AACA,eAAO,MAAMlC,gBAAgBriD,qBAAqB6qD,QAAQ;MAC5D;MAEA9sB,WACEvzC,MACsD;AACtD,YAAI,KAAK4wB,MAAK,EAAS,GAAG;AAIxB,gBAAM2d,SAAS,KAAKzR,SAASoW,WAAS;AACpC,kBAAMrN,aAAa,KAAKkvB,qCAAoC,EAE5D;AACA,gBAAI,KAAKx4B,mBAAkB,KAAM,CAAC,KAAK3L,MAAc,EAAA,EAAGsiB,OAAK;AAC7D,mBAAOrN;UACT,CAAC;AAED,cAAI0I,OAAOnR,QAAS;AAEpB,cAAI,CAACmR,OAAOpR,QAAQ;AAClB,gBAAIoR,OAAOlgC,MAAO,MAAK6I,QAAQq3B,OAAOrR;AAEtCl9B,iBAAK6lC,aAAa0I,OAAOvuC;UAC3B;QACF;AAEA,eAAO,MAAMuzC,WAAWvzC,IAAI;MAC9B;MAGAgxC,uBAAuB5E,OAAkB;AACvC,YAAI,KAAK7Y,IAAG,EAAY,GAAG;AACxB6Y,gBAA8B71B,WAAW;QAC5C;AACA,cAAMtW,OAAO,KAAKq1D,yBAAwB;AAC1C,YAAIr1D,KAAMmsC,OAAMtG,iBAAiB7lC;AACjC,aAAKsY,iBAAiB6zB,KAAK;AAE3B,eAAOA;MACT;MAEAx2B,aAAa5V,MAAc6V,WAA8B;AACvD,gBAAQ7V,KAAKC,MAAI;UACf,KAAK;AACH,mBAAO,KAAK2V,aAAa5V,KAAK4R,YAAYiE,SAAS;UACrD,KAAK;AACH,mBAAO;UACT;AACE,mBAAO,MAAMD,aAAa5V,MAAM6V,SAAS;QAC7C;MACF;MAEAC,aAAa9V,MAAc+V,QAAiB,OAAa;AACvD,gBAAQ/V,KAAKC,MAAI;UACf,KAAK;AACH,iBAAKqgE,oCAAoCtgE,MAAM+V,KAAK;AACpD;UACF,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;AACH,gBAAIA,OAAO;AACT,mBAAKyoB,gBAAgB1D,iCACnB+xB,SAASwD,+BACTrwD,IACF;YACF,OAAO;AACL,mBAAKoW,MAAMy2C,SAASwD,+BAA+BrwD,IAAI;YACzD;AACA,iBAAK8V,aAAa9V,KAAK4R,YAAYmE,KAAK;AACxC;UACF,KAAK;AACH,gBAAI,CAACA,SAAS/V,KAAK2vC,KAAK1vC,SAAS,wBAAwB;AACvDD,mBAAK2vC,OAAO,KAAKnD,oBAAoBxsC,KAAK2vC,IAAI;YAChD;UAEF;AACE,kBAAM75B,aAAa9V,MAAM+V,KAAK;QAClC;MACF;MAEAuqD,oCACEtgE,MACA+V,OACM;AACN,gBAAQ/V,KAAK4R,WAAW3R,MAAI;UAC1B,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;AACH,iBAAK6V,aAAa9V,KAAK4R,YAAYmE,KAAK;AACxC;UACF;AACE,kBAAMD,aAAa9V,MAAM+V,KAAK;QAClC;MACF;MAEA20C,sBAAsB1qD,MAAcysD,cAA6B;AAC/D,gBAAQzsD,KAAKC,MAAI;UACf,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;AACH,iBAAKyqD,sBAAsB1qD,KAAK4R,YAAY,KAAK;AACjD;UACF;AACE,kBAAM84C,sBAAsB1qD,MAAMysD,YAAY;QAClD;MACF;MAEAh3C,YACExV,MAQAyV,2BACAC,SACA;AACA,gBAAQ1V,MAAI;UAIV,KAAK;AACH,mBAAO;UACT,KAAK;AACH,mBAAO;UACT,KAAK;UACL,KAAK;AACH,mBAAO;UACT,KAAK;UACL,KAAK;UACL,KAAK;AACH,oBACG0V,YAAO,MAA8B,CAACD,8BACtC,CAAC,cAAc,IAAI;UAExB;AACE,mBAAO,MAAMD,YAAYxV,MAAMyV,2BAA2BC,OAAO;QACrE;MACF;MAEA08B,mBAA8B;AAC5B,YAAI,KAAKn7B,MAAMjX,SAAI,IAAe;AAChC,iBAAO,KAAKqlC,gBAA8B,IAAI;QAChD;AACA,eAAO,MAAM+M,iBAAgB;MAC/B;MAEAkuB,6BAA6BvzB,MAAkC;AAE7D,YAAI,KAAKpc,MAAW,EAAA,KAAK,KAAKA,MAAkB,EAAA,GAAG;AACjD,gBAAMwjB,gBAAgB,KAAKuoB,iCAAgC;AAE3D,cAAI,KAAK/rC,MAAK,EAAU,GAAG;AACzB,kBAAM8hB,OAAO,MAAM6tB,6BACjBvzB,IACF;AACA0F,iBAAK/+B,iBAAiBygC;AACtB,mBAAO1B;UACT;AAEA,eAAKttC,WAAW,MAAI,EAAW;QACjC;AAEA,eAAO,MAAMm7D,6BAA6BvzB,IAAI;MAChD;MAEAse,oBACErb,OACS;AACT,YACE,KAAK/4B,MAAMmX,oBACX,KAAKuC,MAAK,EAAS,KACnB,KAAKoD,kBAAmB,MAAKic,OAC7B;AACA,eAAKlpB,KAAI;AACT,iBAAO;QACT;AACA,eAAO,MAAMukC,oBAAoBrb,KAAK;MACxC;MAOAI,gBAAyB;AACvB,eAAO,KAAKzf,MAAW,EAAA,KAAK,MAAMyf,cAAa;MACjD;MAEAC,kBAA2B;AACzB,eACE,KAAK1f,MAAa,EAAA,KAAK,KAAKA,MAAK,EAAS,KAAK,MAAM0f,gBAAe;MAExE;MAEAW,kBACE17B,UACAo6B,MACW;AACX,cAAM3vC,OAAO,MAAMixC,kBAAkB17B,UAAUo6B,IAAI;AAEnD,YACE3vC,KAAKC,SAAS,uBACdD,KAAK8lC,kBACL9lC,KAAKsoC,MAAM1qC,QAAQoC,KAAK8lC,eAAeloC,OACvC;AACA,eAAKwY,MAAMy2C,SAASiD,2BAA2B9vD,KAAK8lC,cAAc;QACpE;AAEA,eAAO9lC;MACT;MAGA60B,iBAAiB12B,OAAoB;AACnC,YAAI,KAAK+Y,MAAMgX,QAAQ;AACrB,cAAI/vB,UAAI,IAA4B;AAClC,iBAAK03B,SAAgB,IAAA,CAAC;AACtB;UACF;AACA,cAAI13B,UAAI,IAAyB;AAC/B,iBAAK03B,SAAgB,IAAA,CAAC;AACtB;UACF;QACF;AACA,cAAMhB,iBAAiB12B,KAAI;MAC7B;MAGA0+D,eAAe;AACb,cAAM;UAAE58D;YAAS,KAAKiX;AACtB,YAAIjX,SAAI,IAAY;AAClB,eAAKiX,MAAM3I,OAAO;AAClB,eAAKooB,aAAY;QACnB,WAAW12B,SAAI,IAAY;AACzB,eAAKiX,MAAM3I,OAAO;AAClB,eAAKqoB,aAAY;QACnB;MACF;MAEAgmC,YAAY;AACV,cAAM;UAAE38D;YAAS,KAAKiX;AACtB,YAAIjX,SAAI,IAAmB;AACzB,eAAKiX,MAAM3I,OAAO;AAClB,eAAKsnB,SAAgB,IAAA,CAAC;AACtB,iBAAA;QACF;AACA,eAAO51B;MACT;MAEAmuC,iBACEwB,UACAvB,kBACAt4B,OACM;AACN,iBAAS4P,IAAI,GAAGA,IAAIiqB,SAASt4B,QAAQqO,KAAK;AACxC,gBAAMqnB,OAAO4C,SAASjqB,CAAC;AACvB,eAAIqnB,QAAAA,OAAAA,SAAAA,KAAM/sC,UAAS,wBAAwB;AACzC2vC,qBAASjqB,CAAC,IAAI,KAAK6mB,oBAAoBQ,IAAI;UAC7C;QACF;AACA,cAAMoB,iBAAiBwB,UAAUvB,kBAAkBt4B,KAAK;MAC1D;MAEAy2B,oBAAoBxsC,MAA4C;AAC7DA,aAAK4R,WAA4Bk0B,iBAAiB9lC,KAAK8lC;AAExD,aAAKvtB,iBAAiBvY,KAAK4R,YAAY5R,KAAK8lC,eAAe33B,IAAItQ,GAAG;AAElE,eAAOmC,KAAK4R;MACd;MAEA4hC,iBAAiBhhC,QAAuB;AACtC,YAAI,KAAKoe,MAAK,EAAS,GAAG;AACxB,iBAAOpe,OAAO07B,MAAMlB,UAAQ,KAAKp3B,aAAao3B,MAAM,IAAI,CAAC;QAC3D;AACA,eAAO,MAAMwG,iBAAiBhhC,MAAM;MACtC;MAEAmgC,wBAAiC;AAC/B,eAAO,KAAK/hB,MAAc,EAAA,KAAK,MAAM+hB,sBAAqB;MAC5D;MAEA6tB,0BAA0B;AAExB,eAAO,MAAMA,wBAAuB,KAAM,KAAK7B,gBAAe;MAChE;MAEA5V,gCACE/oD,MACqB;AAErB,YAAI,KAAK4wB,MAAW,EAAA,KAAK,KAAKA,MAAkB,EAAA,GAAG;AACjD,gBAAMwjB,gBAAgB,KAAKunB,mBAAmB,MAC5C,KAAKgB,iCAAgC,CACvC;AACA,cAAIvoB,cAAep0C,MAAK2T,iBAAiBygC;QAC3C;AACA,eAAO,MAAM2U,gCAAgC/oD,IAAI;MACnD;MAEAygE,kCACEluD,QACQ;AACR,cAAMmuD,YAAY,MAAMD,kCAAkCluD,MAAM;AAChE,cAAMC,SAAS,KAAKF,6BAA6BC,MAAM;AACvD,cAAMouD,aAAanuD,OAAO,CAAC;AAC3B,cAAMouD,kBAAkBD,cAAc,KAAKnwB,YAAYmwB,UAAU;AAEjE,eAAOC,kBAAkBF,YAAY,IAAIA;MAC3C;MAEAG,wBAAmC;AACjC,cAAMz0B,QAAQ,MAAMy0B,sBAAqB;AACzC,cAAM5gE,OAAO,KAAKq1D,yBAAwB;AAE1C,YAAIr1D,MAAM;AACRmsC,gBAAMtG,iBAAiB7lC;AACvB,eAAKsY,iBAAiB6zB,KAAK;QAC7B;AAEA,eAAOA;MACT;MAEA2vB,mBAAsBzB,IAAgB;AACpC,cAAM;UAAEjsC,kBAAkByyC;UAAqB76C,QAAQ86C;YACrD,KAAK7pD;AACP,aAAKA,MAAMmX,mBAAmB;AAC9B,aAAKnX,MAAM+O,SAAS;AACpB,YAAI;AACF,iBAAOq0C,GAAE;QACX,UAAC;AACC,eAAKpjD,MAAMmX,mBAAmByyC;AAC9B,eAAK5pD,MAAM+O,SAAS86C;QACtB;MACF;MAEA9E,WACEj8D,MACAmvC,aACAC,YACG;AACH,cAAM4xB,qBAAqB,KAAK9pD,MAAMoX;AACtC,aAAKpX,MAAMoX,kBAAkB,CAAC,CAAEtuB,KAAaq3D;AAC7C,YAAI;AACF,iBAAO,MAAM4E,WAAWj8D,MAAMmvC,aAAaC,UAAU;QACvD,UAAC;AACC,eAAKl4B,MAAMoX,kBAAkB0yC;QAC/B;MACF;MAEAxE,2BACEx8D,MACAgX,YACkE;AAClE,YAAI,KAAK4Z,MAAK,EAAU,GAAG;AACzB5wB,eAAKq3D,WAAW;AAChB,iBAAO,KAAK4J,oBACVjqD,YACA,KAAKilD,WACHj8D,MACkB,MACD,KACnB,CACF;QACD,WAAU,KAAK+7B,aAAY,GAAc,GAAG;AAM3C,cAAI,CAAC,KAAKU,sBAAqB,GAAI;AACjCz8B,iBAAKq3D,WAAW;AAChB,iBAAKjhD,MAAMy2C,SAASqC,0CAA0ClvD,IAAI;AAClE,mBAAO,KAAKm6D,4BACVn6D,IACF;UACF;QACF,OAAO;AACL,eAAKoF,WAAW,MAAI,EAAW;QACjC;MACF;MAEAsO,YAGE1T,MACAuT,aACApB,SACAqB,eACAc,kBACArU,MACAsU,cACA;AACA,cAAMhC,SAAS,MAAMmB,YACnB1T,MACAuT,aACApB,SACAqB,eACAc,kBACArU,MACAsU,YACF;AAEA,YAAIhC,OAAO8kD,UAAU;AACnB,gBAAM6J,UAAU,KAAKvqD,UAAU,QAAQ,IAEnC,CAAC,CAACpE,OAAOrF,MAAMiG,OACf,CAAC,CAACZ,OAAOY;AACb,cAAI+tD,SAAS;AACX,kBAAM;cAAEn6D;YAAK,IAAGwL;AAChB,iBAAK6D,MAAMy2C,SAASC,iCAAiCv6C,QAAQ;cAC3Dw6C,YACEhmD,IAAI9G,SAAS,gBAAgB,CAACsS,OAAOmC,WACjC3N,IAAIV,OACJ,IAAI,KAAKylB,MAAMgD,MAAM/nB,IAAInJ,OAAOmJ,IAAIlJ,GAAG,CAAC;YAChD,CAAC;UACH;QACF;AACA,eAAO0U;MACT;MAEA4hD,2BAAkD;AAChD,cAAMX,WAAyB,KAAKluB,gBAAe;AACnD,eAAiDkuB,SAASntD;MAC5D;MAEA86D,8BAAuC;AACrC,eAAO,CAAC,CAAC,KAAKrtD,gBAAgB,cAAc,KAAK;MACnD;MAEA5D,QAAQ;AACN,YAAI,KAAKixD,4BAA2B,GAAI;AACtC,eAAKjqD,MAAMmX,mBAAmB;QAChC;AACA,eAAO,MAAMne,MAAK;MACpB;MAEAkxD,gBAAgB;AACd,YAAI,KAAKD,4BAA2B,GAAI;AACtC,eAAKjqD,MAAMmX,mBAAmB;QAChC;AACA,eAAO,MAAM+yC,cAAa;MAC5B;MAEAC,qBACErhE,MACAshE,UACAC,gBACAzvB,iBACA;AACA,YAAI,CAACwvB,YAAYxvB,iBAAiB;AAChC,eAAK0vB,mCACHxhE,MACe,OACfuhE,cACF;AACA,iBAAO,KAAK5sD,WAA8B3U,MAAM,iBAAiB;QACnE;AACAA,aAAK+mC,aAAa;AAClB,eAAO,MAAMs6B,qBACXrhE,MACAshE,UACAC,gBACAzvB,eACF;MACF;MAEAH,qBACEN,WACAO,kBACAC,oBACAC,iBAEAlpB,aACmB;AACnB,YAAI,CAACgpB,oBAAoBE,iBAAiB;AACxC,eAAK0vB,mCACHnwB,WACe,MACfQ,kBACF;AACA,iBAAO,KAAKl9B,WAA8B08B,WAAW,iBAAiB;QACxE;AACAA,kBAAU3N,aAAa;AACvB,eAAO,MAAMiO,qBACXN,WACAO,kBACAC,oBACAC,iBACAD,qBAAkB,OAAA,IAGpB;MACF;MAEA2vB,mCACExhE,MACAyhE,UACAC,0BACM;AACN,cAAMC,cAAcF,WAAW,aAAa;AAC5C,cAAMG,eAAeH,WAAW,UAAU;AAE1C,YAAII,WAAW7hE,KAAK2hE,WAAW;AAC/B,YAAIG;AAEJ,YAAIC,mBAAmB;AACvB,YAAIC,oBAAoB;AAExB,cAAM7zD,MAAM0zD,SAAS1zD,IAAIvQ;AAOzB,YAAI,KAAKm+B,aAAY,EAAO,GAAG;AAE7B,gBAAMkmC,UAAU,KAAK38B,gBAAe;AACpC,cAAI,KAAKvJ,aAAY,EAAO,GAAG;AAE7B,kBAAMmmC,WAAW,KAAK58B,gBAAe;AACrC,gBAAIvhB,2BAA2B,KAAK7M,MAAMjX,IAAI,GAAG;AAE/C8hE,iCAAmB;AACnBF,yBAAWI;AACXH,0BAAYL,WACR,KAAKn8B,gBAAe,IACpB,KAAK68B,sBAAqB;AAC9BH,kCAAoB;YACtB,OAAO;AAELF,0BAAYI;AACZF,kCAAoB;YACtB;UACD,WAAUj+C,2BAA2B,KAAK7M,MAAMjX,IAAI,GAAG;AAEtD+hE,gCAAoB;AACpBF,wBAAYL,WACR,KAAKn8B,gBAAe,IACpB,KAAK68B,sBAAqB;UAChC,OAAO;AAELJ,+BAAmB;AACnBF,uBAAWI;UACb;QACD,WAAUl+C,2BAA2B,KAAK7M,MAAMjX,IAAI,GAAG;AAEtD8hE,6BAAmB;AACnB,cAAIN,UAAU;AACZI,uBAAW,KAAKv8B,gBAAgB,IAAI;AACpC,gBAAI,CAAC,KAAKvJ,aAAY,EAAO,GAAG;AAC9B,mBAAKqW,kBACHyvB,SAASx7D,MACTw7D,SAAS1zD,IAAIvQ,OACb,MACA,IACF;YACF;UACF,OAAO;AACLikE,uBAAW,KAAKM,sBAAqB;UACvC;QACF;AACA,YAAIJ,oBAAoBL,0BAA0B;AAChD,eAAKtrD,MACHqrD,WACI5U,SAASoD,kCACTpD,SAASmD,iCACb7hD,GACF;QACF;AAEAnO,aAAK2hE,WAAW,IAAIE;AACpB7hE,aAAK4hE,YAAY,IAAIE;AAErB,cAAMM,UAAUX,WAAW,eAAe;AAC1CzhE,aAAKoiE,OAAO,IAAIL,mBAAmB,SAAS;AAE5C,YAAIC,qBAAqB,KAAK3lC,cAAa,EAAO,GAAG;AACnDr8B,eAAK4hE,YAAY,IAAIH,WACjB,KAAKn8B,gBAAe,IACpB,KAAK68B,sBAAqB;QAChC;AACA,YAAI,CAACniE,KAAK4hE,YAAY,GAAG;AACvB5hE,eAAK4hE,YAAY,IAAIviC,gBAAgBr/B,KAAK2hE,WAAW,CAAC;QACxD;AACA,YAAIF,UAAU;AACZ,eAAKxV,gBACHjsD,KAAK4hE,YAAY,GACjBG,mBAAgB,OAAA,IAGlB;QACF;MACF;IACF;AAEF,aAASM,sBAAsBzwD,YAAmC;AAChE,UAAIA,WAAW3R,SAAS,mBAAoB,QAAO;AAEnD,YAAM;QAAEyU;QAAUmpB;MAAU,IAAGjsB;AAE/B,UACE8C,YACAmpB,SAAS59B,SAAS,oBACjB49B,SAAS59B,SAAS,qBAAqB49B,SAASykC,YAAYhrD,SAAS,IACtE;AACA,eAAO;MACT;AAEA,aAAOirD,kCAAkC3wD,WAAW/B,MAAM;IAC5D;AAQA,aAASkvD,+BACPntD,YACA7B,SACS;AAAA,UAAAi8C;AACT,YAAM;QAAE/rD;MAAM,IAAG2R;AACjB,WAAAo6C,oBAAIp6C,WAAWE,UAAXk6C,QAAAA,kBAAkBr5C,eAAe;AACnC,eAAO;MACT;AACA,UAAI5C,SAAQ;AACV,YAAI9P,SAAS,WAAW;AACtB,gBAAM;YAAEiN;UAAO,IAAG0E;AAClB,cAAI,OAAO1E,UAAU,YAAY,OAAOA,UAAU,WAAW;AAC3D,mBAAO;UACT;QACF;MACF,OAAO;AACL,YAAIjN,SAAS,mBAAmBA,SAAS,kBAAkB;AACzD,iBAAO;QACT;MACF;AACA,UAAIuiE,SAAS5wD,YAAY7B,OAAM,KAAK0yD,iBAAiB7wD,YAAY7B,OAAM,GAAG;AACxE,eAAO;MACT;AACA,UAAI9P,SAAS,qBAAqB2R,WAAW0wD,YAAYhrD,WAAW,GAAG;AACrE,eAAO;MACT;AACA,UAAI+qD,sBAAsBzwD,UAAU,GAAG;AACrC,eAAO;MACT;AACA,aAAO;IACT;AAEA,aAAS4wD,SAAS5wD,YAA0B7B,SAA0B;AACpE,UAAIA,SAAQ;AACV,eACE6B,WAAW3R,SAAS,cACnB,OAAO2R,WAAW1E,UAAU,YAAY,YAAY0E;MAEzD;AACA,aACEA,WAAW3R,SAAS,oBAAoB2R,WAAW3R,SAAS;IAEhE;AAEA,aAASwiE,iBAAiB7wD,YAA0B7B,SAA0B;AAC5E,UAAI6B,WAAW3R,SAAS,mBAAmB;AACzC,cAAM;UAAEuqD;UAAUx7C;QAAU,IAAG4C;AAC/B,YAAI44C,aAAa,OAAOgY,SAASxzD,UAAUe,OAAM,GAAG;AAClD,iBAAO;QACT;MACF;AACA,aAAO;IACT;AAEA,aAASwyD,kCAAkC3wD,YAAmC;AAC5E,UAAIA,WAAW3R,SAAS,aAAc,QAAO;AAC7C,UAAI2R,WAAW3R,SAAS,sBAAsB2R,WAAW8C,UAAU;AACjE,eAAO;MACT;AAEA,aAAO6tD,kCAAkC3wD,WAAW/B,MAAM;IAC5D;ACzpIA,QAAM6yD,oBAAoB3zD,6BAA6B;MACrD4zD,qBAAqB;MACrBC,iBAAiB;IACnB,CAAC;AAED,QAAAC,eAAgB7yD,gBACd,MAAM8yD,gCAAgC9yD,WAA6B;MACjE+yD,iBACEvjC,cACuD;AACvD,YAAI,KAAK5O,MAAK,GAAe,GAAG;AAC9B,gBAAM5wB,OAAO,KAAKyU,UAAS;AAC3B,eAAKsS,KAAI;AACT,eAAKi8C,cAAa;AAIlBhjE,eAAKqG,OAAO,MAAMi/B,gBAA8B,IAAI;AAEpD,eAAK09B,cAAa;AAClB,eAAKnmC,OAAM,GAAe;AAC1B,iBAAO,KAAKomC,kBAAkBjjE,MAAMw/B,YAAY;QAClD;MACF;MAEAyjC,kBACEjjE,MACAw/B,cAC0C;AAC1C,YAAI5b,cAAc5jB;AAElB,YAAI,CAAC4jB,YAAY4b,gBAAgB,CAAC5b,YAAY3jB,MAAM;AAClD2jB,wBAAc,KAAKjP,WACjBiP,aACA,aACF;QACF;AAEAA,oBAAY4b,eAAeA;AAC3B,eAAO5b;MACT;MAMAiR,iBAAiB12B,OAAc;AAC7B,YACEA,UAA8B,MAC9B,KAAK2tB,MAAMC,WAAW,KAAK7U,MAAM3I,MAAM,CAAC,MAAC,IACzC;AACA,eAAKsnB,SAAyB,KAAA,CAAC;QACjC,OAAO;AACL,gBAAMhB,iBAAiB12B,KAAI;QAC7B;MACF;MAMAsoC,cACEjxB,qBACgC;AAChC,eACE,KAAKutD,iBAAiB,YAAY,KAClC,MAAMt8B,cAAcjxB,mBAAmB;MAE3C;MAEA8vB,gBAAgB+C,SAAmD;AAKjE,eACE,KAAK06B,iBAAiB,YAAY,KAAK,MAAMz9B,gBAAgB+C,OAAO;MAExE;MAEA+J,kBACE9rB,MACA/Q,UACA8oD,eACAxoD,WACA;AAIA,YAAIyQ,SAAS8D,QAAW;AACtB,gBAAMgoB,kBAAkB9rB,MAAM/Q,UAAU8oD,eAAexoD,SAAS;QAClE;MACF;MAMAw8B,mBAAgD;AAC9C,eAAO,KAAK0wB,iBAAiB,SAAS,KAAK,MAAM1wB,iBAAgB;MACnE;MAEA58B,YAAYxV,MAAcmwC,iBAA0Bz6B,SAAsB;AACxE,eACE1V,SAAS,iBACT,MAAMwV,YAAYxV,MAAMmwC,iBAAiBz6B,OAAO;MAEpD;MAEAG,aAAa9V,MAAc+V,OAAsB;AAC/C,YACE/V,QACAA,KAAKC,SAAS,iBACdD,KAAKw/B,iBAAiB,cACtB;AACAx/B,eAAKw/B,eAAe;QACtB,OAAO;AACL,gBAAM1pB,aAAa9V,MAAM+V,KAAK;QAChC;MACF;MAMAmtD,0BAA0B7zC,IAAY9gB,KAAsB;AAC1D,YAAI,MAAM20D,0BAA0B7zC,IAAI9gB,GAAG,GAAG;AAC5C,iBAAO;QACT;AAIA,cAAM+kB,YAAY,KAAKI,UAAS;AAChC,YAAIJ,UAAUrzB,SAAI,KAAqB;AACrC,iBAAO;QACT;AAEA,eAAO;MACT;MAEAkjE,oBACEnjE,MACAojE,SACA;AAEA,YAAIpjE,KAAKsZ,SAAStZ,KAAKsZ,MAAMrZ,SAAS,cAAe;AACrD,cAAMkjE,oBAAoBnjE,MAAMojE,OAAO;MACzC;MAGAr2B,yBACE/sC,MACAgtC,MAC+B;AAAA,YAAA+C;AAE/B,YAAI/C,KAAK/sC,SAAS,kBAAa8vC,cAAI/C,KAAKl7B,UAAK,QAAVi+B,YAAYp9B,eAAe;AAE5D,iBAAO,MAAMo6B,yBAAyB/sC,MAAMgtC,IAAI;QAClD;AAEA,YAAI,KAAKpc,MAAK,EAAS,GAAG;AAExB,gBAAM5e,OAA2BhS;AACjCgS,eAAKsH,QAAQ,KAAK2pD,kBAAkBj2B,MAAM,YAAY;AACtD,eAAKjmB,KAAI;AACT/U,eAAKmB,OAAO,MAAMkwD,gDAA+C;AACjE,iBAAO,KAAK1uD,WAAW3C,MAAM,kBAAkB;QACjD;AAEA,aAAK2qB,UAAS;AACd,cAAM2mC,kBAAkBtjE;AACxBsjE,wBAAgBj9D,OAAQ2mC,KAAuB3mC;AAC/C,eAAO,KAAK48D,kBAAkBK,iBAAiB,WAAW;MAC5D;MAEAC,WACE1wD,iBACA2wD,uBACAzwD,iBACoC;AACpC,eACE,KAAKgwD,iBAAiB,gBAAgB,KACtC,MAAMQ,WACJ1wD,iBACA2wD,uBACAzwD,eACF;MAEJ;MAEA0wD,gBACEC,WACmD;AACnD,eACE,KAAKX,iBAAiB,YAAY,KAAK,MAAMU,gBAAgBC,SAAS;MAE1E;MAEAzH,WACEj8D,MACAmvC,aACAC,YACG;AACH,cAAMnvC,OAAOkvC,cAAc,qBAAqB;AAEhD,aAAKpoB,KAAI;AACT,cAAMg6C,YAAY,KAAK7pD,MAAM+O;AAE7B,cAAMrC,cAAc,KAAKm/C,iBAAiB,YAAY;AACtD,YAAIn/C,aAAa;AACf,cACE,KAAKgN,MAAiB,EAAA,KACtB,KAAKA,MAAK,GAAe,KACzB,KAAKA,MAAK,CAAU,GACpB;AACA5wB,iBAAKiU,KAAK2P;UACZ,WAAWwrB,cAAc,CAACD,aAAa;AACrCnvC,iBAAKiU,KAAK;AACVjU,iBAAKmT,OAAO,KAAK8vD,kBAAkBr/C,aAAa,WAAW;AAC3D,mBAAO,KAAKjP,WAAW3U,MAAMC,IAAI;UACnC,OAAO;AACL,kBAAM,KAAKmW,MACTssD,kBAAkBC,qBAClB,KAAKzrD,MAAM3B,QACb;UACF;QACF,OAAO;AACL,eAAK25B,aAAalvC,MAAMmvC,aAAaC,UAAU;QACjD;AAEA,cAAMsB,gBAAgB1wC,IAAI;AAC1BA,aAAKmT,OACH,KAAK4vD,iBAAiB,WAAW,KACjC,MAAMY,eAAe,CAAC,CAAC3jE,KAAKgQ,YAAY+wD,SAAS;AACnD,eAAO,KAAKpsD,WAAW3U,MAAMC,IAAI;MACnC;MAEA8W,YACE/W,MAKAgX,YACa;AACb,cAAM4M,cAAc,KAAKm/C,iBAAiB,YAAY;AACtD,YAAI,CAACn/C,YAAa,QAAO,MAAM7M,YAAY/W,MAAMgX,UAAU;AAE3D,cAAMg0B,QAAQhrC;AAEd,YAAI,CAAC,KAAK+7B,aAAqB,EAAA,KAAK,CAAC,KAAKnL,MAAK,EAAS,GAAG;AAEzDoa,gBAAM3zB,aAAa,CAAA;AACnB2zB,gBAAMv0B,SAAS;AACfu0B,gBAAMxzB,cAAc,KAAKyrD,kBAAkBr/C,aAAa,aAAa;AACrE,iBAAO,KAAKjP,WAAWq2B,OAAO,wBAAwB;QACxD;AAGA,aAAKrV,aAAa,mBAAmB;AACrC,cAAM0b,YAAY,KAAK58B,UAAS;AAChC48B,kBAAUj6B,WAAWwM;AACrBonB,cAAM3zB,aAAa,CAAC,KAAK1C,WAAW08B,WAAW,wBAAwB,CAAC;AAExE,eAAO,MAAMt6B,YAAYi0B,OAAOh0B,UAAU;MAC5C;MAEAk2B,2BAAoC;AAClC,YAAI,KAAKtc,MAAK,EAAY,GAAG;AAC3B,gBAAM7J,OAAO,KAAK8M,eAAc;AAChC,cAAI,KAAKmI,qBAAqBjV,MAAM,MAAM,GAAG;AAC3C,gBACE,KAAK+E,MAAM83C,WACTh/C,eAA6B,GAAA,GAC7B,KAAKkP,oBAAoB/M,OAAO,CAAC,CACnC,GACA;AACA,qBAAO;YACT;UACF;QACF;AACA,eAAO,MAAMmmB,yBAAwB;MACvC;MAEA22B,iCACE7jE,MAKAq7D,wBAC0C;AAAA,YAAAyI;AAC1C,aAAAA,cAAK9jE,KAAkCqX,eAAnCysD,QAAAA,YAA+CxsD,QAAQ;AAEzD,iBAAO;QACT;AACA,eAAO,MAAMusD,iCACX7jE,MACAq7D,sBACF;MACF;MAEA0I,YAAY/jE,MAAsC;AAChD,cAAM;UAAEqX;QAAY,IAAGrX;AACvB,YAAIqX,cAAU,QAAVA,WAAYC,QAAQ;AACtBtX,eAAKqX,aAAaA,WAAW2sD,OAE3BhkE,CAAAA,UAAQA,MAAKoX,SAASnX,SAAS,aACjC;QACF;AACA,cAAM8jE,YAAY/jE,IAAI;AACtBA,aAAKqX,aAAaA;MACpB;MAEAsvB,YACE3mC,MACmD;AACnD,cAAM4jB,cAAc,KAAKm/C,iBAAiB,YAAY;AACtD,YAAI,CAACn/C,YAAa,QAAO,MAAM+iB,YAAY3mC,IAAI;AAE/CA,aAAKqX,aAAa,CAAA;AAElB,YAAI,CAAC,KAAK0kB,aAAqB,EAAA,KAAK,CAAC,KAAKnL,MAAK,EAAS,GAAG;AAEzD5wB,eAAKyW,SAAS,KAAKwsD,kBAAkBr/C,aAAa,eAAe;AACjE,eAAK+Y,UAAS;AACd,iBAAO,KAAKhoB,WAAW3U,MAAM,mBAAmB;QAClD;AAGA,cAAMqxC,YACJ,KAAKp5B,gBAA0C2L,WAAW;AAC5DytB,kBAAUC,QAAQ1tB;AAClB5jB,aAAKqX,WAAWzD,KACd,KAAKe,WAAW08B,WAAW,wBAAwB,CACrD;AAEA,YAAI,KAAK9d,IAAG,EAAS,GAAG;AAEtB,gBAAM0wC,gBAAgB,KAAKC,8BAA8BlkE,IAAI;AAG7D,cAAI,CAACikE,cAAe,MAAKE,2BAA2BnkE,IAAI;QAC1D;AAEA,aAAKs8B,iBAAgB,EAAS;AAC9Bt8B,aAAKyW,SAAS,KAAK2tD,kBAAiB;AACpC,aAAKznC,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,mBAAmB;MAClD;MAEAokE,oBAAuD;AAGrD,eACE,KAAKrB,iBAAiB,eAAe,KAAK,MAAMqB,kBAAiB;MAErE;MAGApB,gBAAsB;AACpB,YAAI,KAAK9rD,MAAMtZ,QAAQ,KAAKsZ,MAAMsB,cAAc/a,OAAO;AACrD,eAAK2Y,MAAMssD,kBAAkBE,iBAAiB,KAAK1rD,MAAMsB,aAAa;QACxE;MACF;IACF;ACxYF,QAAA6rD,cAAgBr0D,gBACd,MAAMs0D,yBAAyBt0D,WAA6B;MAC1Du0D,mBAAiC;AAC/B,YAAI,KAAK3zC,MAAK,EAAU,GAAG;AACzB,gBAAM4zC,sBAAsB,KAAKttD,MAAM3B;AAEvC,gBAAMvV,OAAO,KAAKyU,UAAS;AAC3B,eAAKsS,KAAI;AACT,cAAIlD,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AACtC,kBAAMoG,OAAO,KAAKo+D,oBAAmB;AACrC,kBAAMjY,aAAa,KAAK3gB,iBAAiB7rC,MAAMqG,IAAI;AAEnDmmD,uBAAWvsD,OAAO;AAClB,gBAAI,KAAK2wB,MAAK,EAAU,GAAG;AACzB,qBAAO47B;YACT;UACF;AACA,eAAKpnD,WAAWo/D,mBAAmB;QACrC;MACF;MAMA/9B,cAAcjxB,qBAA6D;AACzE,eACE,KAAK+uD,iBAAkB,KAAI,MAAM99B,cAAcjxB,mBAAmB;MAEtE;IACF;ACxBF,QAAMkvD,qBAEF,CAAC,WAAW,UAAU,QAAQ,OAAO;AACzC,QAAMC,eAAe,CAAC,MAAM,MAAM,KAAK,KAAK,GAAG;AAExC,aAASC,gBAAgBC,YAA8B;AAC5D,UAAIA,WAAWp+C,IAAI,YAAY,GAAG;AAChC,YAAIo+C,WAAWp+C,IAAI,mBAAmB,GAAG;AACvC,gBAAM,IAAIge,MACR,iEACF;QACF;AAEA,cAAMqgC,yBACJD,WAAWj2D,IAAI,YAAY,EAAEk2D;AAC/B,YACEA,0BAA0B,QAC1B,OAAOA,2BAA2B,WAClC;AACA,gBAAM,IAAIrgC,MACR,2DACF;QACF;AAEA,cAAMsgC,yBACJF,WAAWj2D,IAAI,YAAY,EAAEm2D;AAC/B,YACEA,0BAA0B,QAC1B,OAAOA,2BAA2B,WAClC;AACA,gBAAM,IAAItgC,MAAM,6CAA6C;QAC/D;MACF;AAEA,UAAIogC,WAAWp+C,IAAI,MAAM,KAAKo+C,WAAWp+C,IAAI,YAAY,GAAG;AAC1D,cAAM,IAAIge,MAAM,6CAA6C;MAC/D;AAEA,UAAIogC,WAAWp+C,IAAI,cAAc,KAAKo+C,WAAWp+C,IAAI,aAAa,GAAG;AACnE,cAAM,IAAIge,MAAM,sDAAsD;MACxE;AAEA,UAAIogC,WAAWp+C,IAAI,kBAAkB,GAAG;AAAA,YAAAu+C;AACtC,cAAM3uC,WAAWwuC,WAAWj2D,IAAI,kBAAkB,EAAEynB;AAEpD,YAAI,CAACquC,mBAAmBjtC,SAASpB,QAAQ,GAAG;AAC1C,gBAAM4uC,eAAeP,mBAAmBt+D,IAAI8+D,OAAK,IAAIA,CAAC,GAAG,EAAE1+D,KAAK,IAAI;AACpE,gBAAM,IAAIi+B,MACR,6EAA6EwgC,YAAY,GAC3F;QACF;AAEA,cAAME,sBAEFH,kBAAAH,WAAWj2D,IAAI,gBAAgB,MAA/Bo2D,OAAAA,SAAAA,gBAAkCI,gBAAe;AAErD,YAAI/uC,aAAa,QAAQ;AACvB,cAAIwuC,WAAWp+C,IAAI,cAAc,GAAG;AAClC,kBAAM,IAAIge,MACR,0DACF;UACF;AAEA,cAAIogC,WAAWp+C,IAAI,aAAa,GAAG;AACjC,kBAAM,IAAIge,MACR,yDACF;UACF;AAEA,gBAAMnO,aAAauuC,WAAWj2D,IAAI,kBAAkB,EAAE0nB;AAEtD,cAAI,CAACquC,aAAaltC,SAASnB,UAAU,GAAG;AACtC,kBAAM+uC,YAAYV,aAAav+D,IAAI8yD,OAAK,IAAIA,CAAC,GAAG,EAAE1yD,KAAK,IAAI;AAE3D,kBAAM,IAAIi+B,MACR,iHAAiH4gC,SAAS,GAC5H;UACF;AAEA,cAAI/uC,eAAe,OAAO6uC,mBAAmB;AAC3C,kBAAM,IAAI1gC,MACR,iGAAiGn+B,KAAKC,UAAU,CAAC,kBAAkBs+D,WAAWj2D,IAAI,gBAAgB,CAAC,CAAC,CAAC,KACvK;UACF;QACF,WAAWynB,aAAa,WAAW8uC,mBAAmB;AACpD,gBAAM,IAAI1gC,MACR,iFAAiFn+B,KAAKC,UAAU,CAAC,kBAAkBs+D,WAAWj2D,IAAI,gBAAgB,CAAC,CAAC,CAAC,KACvJ;QACF;MACF;AAEA,UAAIi2D,WAAWp+C,IAAI,kBAAkB,GAAG;AAK/B;AACL,cACEo+C,WAAWp+C,IAAI,kBAAkB,KACjCo+C,WAAWp+C,IAAI,kBAAkB,GACjC;AACA,kBAAM,IAAIge,MACR,iFACF;UACF;AACA,gBAAM6gC,sCACJT,WAAWj2D,IAAI,kBAAkB,EAAE22D;AACrC,cAAID,wCAAwC,YAAY;AACtD,kBAAM,IAAI7gC,MACR,sJAGF;UACF;QACF;MACF;AACA,UAAIogC,WAAWp+C,IAAI,kBAAkB,GAAG;AAM/B,YAAIo+C,WAAWp+C,IAAI,kBAAkB,GAAG;AAC7C,gBAAM,IAAIge,MACR,+DACF;QACF;MACF;AAEA,UAAIogC,WAAWp+C,IAAI,gBAAgB,GAAG;AACpC,cAAM2+C,aAAaP,WAAWj2D,IAAI,gBAAgB,EAAEw2D;AACpD,YAAIA,cAAc,MAAM;AAWf;AACL,kBAAMI,gCAAgC,CAAC,QAAQ,KAAK;AACpD,gBAAI,CAACA,8BAA8B/tC,SAAS2tC,UAAU,GAAG;AACvD,oBAAM,IAAI3gC,MACR,4EACE+gC,8BAA8Bp/D,IAAI8+D,OAAK,IAAIA,CAAC,GAAG,EAAE1+D,KAAK,IAAI,CAC9D;YACF;UACF;QACF;MACF;AAEA,UACEq+D,WAAWp+C,IAAI,oBAAoB,KACnC,CAACo+C,WAAWp+C,IAAI,eAAe,GAC/B;AACA,cAAMpY,QAAQ,IAAIo2B,MAChB,8FACF;AAEAp2B,cAAMo3D,iBAAiB;AACvB,cAAMp3D;MACR;AAEA,UACEw2D,WAAWp+C,IAAI,wBAAwB,KACvCo+C,WAAWj2D,IAAI,wBAAwB,EAAE22D,YAAY,WACrD;AACA,cAAM,IAAI9gC,MACR,2JAGF;MACF;IAeF;AAYO,QAAMihC,eAAe;MAC1B31D;MACA+iC;MACA1O;MACAwsB;MACAyT;MACAxB;IACF;AAEO,QAAM8C,mBAAmBx4D,OAAOkC,KAAKq2D,YAAY;AC/LjD,QAAME,iBAAsC;MAEjD93C,YAAY;MAEZ+3C,gBAAgBz7C;MAGhB4D,aAAa;MAGbD,WAAW;MAGX+3C,2BAA2B;MAG3BC,4BAA4B;MAG5BC,+BAA+B;MAG/BC,6BAA6B;MAE7BC,yBAAyB;MAEzBC,wBAAwB;MAExBx8C,SAAS,CAAA;MAETkE,YAAY;MASZiR,QAAQ;MAERzuB,QAAQ;MAGR+1D,yBAA+D;MAG/DC,gCAAgC;MAGhCvzC,eAAe;MAKfqC,eAAe;MAGfC,QAAQ;IACV;AAIO,aAASkxC,WAAWC,MAA4C;AACrE,UAAIA,QAAQ,MAAM;AAChB,eAAAp5D,OAAAwB,OAAA,CAAA,GAAYi3D,cAAc;MAC5B;AACA,UAAIW,KAAKnxC,UAAU,QAAQmxC,KAAKnxC,WAAW,OAAO;AAChD,cAAM,IAAIqP,MAAM,iDAAiD;MACnE;AAEA,YAAMr0B,UAAe,CAAA;AACrB,iBAAWrJ,OAAOoG,OAAOkC,KAAKu2D,cAAc,GAAwB;AAAA,YAAAY;AAClEp2D,gBAAQrJ,GAAG,KAACy/D,YAAGD,KAAKx/D,GAAG,MAAC,OAAAy/D,YAAIZ,eAAe7+D,GAAG;MAChD;AACA,aAAOqJ;IACT;ACvCe,QAAeq2D,mBAAf,cAAwCrc,WAAW;MAuChEsc,WACExxD,MACAyxD,UACAC,UAGApxD,qBACM;AACN,YACEN,KAAKjV,SAAS,mBACd,KAAKmY,eAAelD,IAAI,KACxBA,KAAKR,YACLQ,KAAKG,WACL;AACA;QACF;AAEA,cAAMtO,MAAMmO,KAAKnO;AAMjB,cAAMV,OAAOU,IAAI9G,SAAS,eAAe8G,IAAIV,OAAOU,IAAImG;AAExD,YAAI7G,SAAS,aAAa;AACxB,cAAIsgE,UAAU;AACZ,iBAAKvwD,MAAMzG,OAAOtH,eAAetB,GAAG;AACpC;UACF;AACA,cAAI6/D,SAASC,MAAM;AACjB,gBAAIrxD,qBAAqB;AAGvB,kBAAIA,oBAAoBgoB,mBAAmB,MAAM;AAC/ChoB,oCAAoBgoB,iBAAiBz2B,IAAIoH,IAAIvQ;cAC/C;YACF,OAAO;AACL,mBAAKwY,MAAMzG,OAAOtN,gBAAgB0E,GAAG;YACvC;UACF;AAEA6/D,mBAASC,OAAO;QAClB;MACF;MAEAC,qBACE95B,MACAhgB,kBACmC;AACnC,eACEggB,KAAK/sC,SAAS,6BAA6B+sC,KAAKpvC,UAAUovB;MAE9D;MAGAo0C,gBAA2D;AACzD,aAAK3iC,mBAAkB;AACvB,aAAKnL,UAAS;AACd,cAAM0Z,OAAO,KAAKhI,gBAAe;AACjC,YAAI,CAAC,KAAKpU,MAAK,GAAO,GAAG;AACvB,eAAKxrB,WAAU;QACjB;AAGA,aAAK6mB,0BAAyB;AAC9B+gB,aAAK9iB,WAAW,KAAKA;AACrB8iB,aAAKjgB,SAAS,KAAK7V,MAAM6V;AACzB,YAAI,KAAK3c,QAAQC,QAAQ;AACvB28B,eAAK38B,SAAS,KAAKA;QACrB;AACA,eAAO28B;MACT;MAqBAhI,gBAEE+hC,YACAvxD,qBACc;AACd,YAAIuxD,YAAY;AACd,iBAAO,KAAKC,cAAc,MACxB,KAAKC,oBAAoBzxD,mBAAmB,CAC9C;QACF;AACA,eAAO,KAAK0xD,WAAW,MAAM,KAAKD,oBAAoBzxD,mBAAmB,CAAC;MAC5E;MAGAyxD,oBAEEzxD,qBACc;AACd,cAAMD,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMy3B,OAAO,KAAKa,iBAAiBr4B,mBAAmB;AACtD,YAAI,KAAKob,MAAK,EAAS,GAAG;AACxB,gBAAM5wB,OAAO,KAAK2/B,YAAkCpqB,QAAQ;AAC5DvV,eAAKsiE,cAAc,CAACt1B,IAAI;AACxB,iBAAO,KAAKzZ,IAAG,EAAS,GAAG;AACzBvzB,iBAAKsiE,YAAY1uD,KAAK,KAAKi6B,iBAAiBr4B,mBAAmB,CAAC;UAClE;AACA,eAAKq6B,iBAAiB7vC,KAAKsiE,WAAW;AACtC,iBAAO,KAAK3tD,WAAW3U,MAAM,oBAAoB;QACnD;AACA,eAAOgtC;MACT;MAGAm6B,2BAEE3xD,qBACAo9B,gBACA;AACA,eAAO,KAAKo0B,cAAc,MACxB,KAAKn5B,iBAAiBr4B,qBAAqBo9B,cAAc,CAC3D;MACF;MAGA9E,wBAEEt4B,qBACAo9B,gBACA;AACA,eAAO,KAAKs0B,WAAW,MACrB,KAAKr5B,iBAAiBr4B,qBAAqBo9B,cAAc,CAC3D;MACF;MAIAvF,2BACE73B,qBACA4xD,aACA;AAAA,YAAAC;AACA7xD,4BAAoBkoB,yBAAqB2pC,mBACvCD,eAAAA,OAAAA,SAAAA,YAAaj5D,QAAG,OAAAk5D,mBAAI,KAAKnwD,MAAM3B;MACnC;MAKAs4B,iBAEEr4B,qBACAo9B,gBACc;AACd,cAAMr9B,WAAW,KAAK2B,MAAM3B;AAC5B,YAAI,KAAKwmB,aAAY,GAAU,GAAG;AAChC,cAAI,KAAKuC,UAAU7C,UAAU;AAC3B,gBAAIkU,QAAO,KAAK23B,WAAU;AAC1B,gBAAI10B,gBAAgB;AAClBjD,cAAAA,QAAOiD,eAAeF,KAAK,MAAM/C,OAAMp6B,QAAQ;YACjD;AACA,mBAAOo6B;UACT;QACF;AAEA,YAAI43B;AACJ,YAAI/xD,qBAAqB;AACvB+xD,gCAAsB;QACxB,OAAO;AACL/xD,gCAAsB,IAAIopB,iBAAgB;AAC1C2oC,gCAAsB;QACxB;AACA,cAAM;UAAEtnE;YAAS,KAAKiX;AAEtB,YAAIjX,SAAkB,MAAI4jB,kBAAkB5jB,IAAI,GAAG;AACjD,eAAKiX,MAAM8V,mBAAmB,KAAK9V,MAAMtZ;QAC3C;AAEA,YAAI+xC,OAAO,KAAK63B,sBAAsBhyD,mBAAmB;AACzD,YAAIo9B,gBAAgB;AAClBjD,iBAAOiD,eAAeF,KAAK,MAAM/C,MAAMp6B,QAAQ;QACjD;AACA,YAAI4O,kBAAkB,KAAKjN,MAAMjX,IAAI,GAAG;AACtC,gBAAMD,OAAO,KAAK2/B,YAAoCpqB,QAAQ;AAC9D,gBAAMi1C,WAAW,KAAKtzC,MAAMhK;AAC5BlN,eAAKwqD,WAAWA;AAEhB,cAAI,KAAK55B,MAAK,EAAM,GAAG;AACrB,iBAAK9a,aAAa65B,MAAkB,IAAI;AACxC3vC,iBAAK2vC,OAAOA;AAEZ,kBAAM83B,aAAalyD,SAAS9X;AAC5B,gBACE+X,oBAAoBgoB,kBAAkB,QACtChoB,oBAAoBgoB,eAAe//B,SAASgqE,YAC5C;AACAjyD,kCAAoBgoB,iBAAiB;YACvC;AACA,gBACEhoB,oBAAoB+nB,sBAAsB,QAC1C/nB,oBAAoB+nB,mBAAmB9/B,SAASgqE,YAChD;AACAjyD,kCAAoB+nB,qBAAqB;YAC3C;AACA,gBACE/nB,oBAAoBioB,iBAAiB,QACrCjoB,oBAAoBioB,cAAchgC,SAASgqE,YAC3C;AACA,mBAAK9oC,0BAA0BnpB,mBAAmB;AAClDA,kCAAoBioB,gBAAgB;YACtC;UACF,OAAO;AACLz9B,iBAAK2vC,OAAOA;UACd;AAEA,eAAK5oB,KAAI;AACT/mB,eAAKsoC,QAAQ,KAAKuF,iBAAgB;AAClC,eAAKge,UAAUlc,MAAM,KAAKh7B,WAAW3U,MAAM,sBAAsB,CAAC;AAElE,iBAAOA;QACR,WAAUunE,qBAAqB;AAC9B,eAAKlqC,sBAAsB7nB,qBAAqB,IAAI;QACtD;AAEA,eAAOm6B;MACT;MAKA63B,sBAEEhyD,qBACc;AACd,cAAMD,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMyX,mBAAmB,KAAK9V,MAAM8V;AACpC,cAAMggB,OAAO,KAAK06B,aAAalyD,mBAAmB;AAElD,YAAI,KAAKsxD,qBAAqB95B,MAAMhgB,gBAAgB,GAAG;AACrD,iBAAOggB;QACT;AAEA,eAAO,KAAKI,iBAAiBJ,MAAMz3B,UAAUC,mBAAmB;MAClE;MAEA43B,iBAEEJ,MACAz3B,UAEAC,qBACc;AACd,YAAI,KAAK+d,IAAG,EAAY,GAAG;AACzB,gBAAMvzB,OAAO,KAAK2/B,YAAqCpqB,QAAQ;AAC/DvV,eAAK6lB,OAAOmnB;AACZhtC,eAAKutC,aAAa,KAAKO,wBAAuB;AAC9C,eAAKjR,OAAM,EAAS;AACpB78B,eAAK4tC,YAAY,KAAKC,iBAAgB;AACtC,iBAAO,KAAKl5B,WAAW3U,MAAM,uBAAuB;QACtD;AACA,eAAOgtC;MACT;MAEA26B,yBAEEnyD,qBAC8B;AAC9B,eAAO,KAAKob,MAAoB,GAAA,IAC5B,KAAK/c,iBAAgB,IACrB,KAAKgkD,gBAAgBriD,mBAAmB;MAC9C;MAKAkyD,aAEElyD,qBACc;AACd,cAAMD,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMyX,mBAAmB,KAAK9V,MAAM8V;AACpC,cAAMggB,OAAO,KAAK26B,yBAAyBnyD,mBAAmB;AAE9D,YAAI,KAAKsxD,qBAAqB95B,MAAMhgB,gBAAgB,GAAG;AACrD,iBAAOggB;QACT;AAEA,eAAO,KAAKixB,YAAYjxB,MAAMz3B,UAAU,EAAE;MAC5C;MAQA0oD,YAEEtuB,MACAuuB,cACAC,SACc;AACd,YAAI,KAAKjqD,cAAcy7B,IAAI,GAAG;AAK5B,gBAAMziC,QAAQ,KAAK8G,iBAAiB27B,IAAI;AAExC,cACEwuB,WAAWt5C,wBAAuB,EAAO,KACzC,CAAC,KAAKyZ,UAAU3C,SAChB,CAAC,KAAK/K,MAAK,EAAO,GAClB;AACA,iBAAKxa,MAAMzG,OAAO3H,qBAAqB2nC,MAAM;cAC3C5xC,gBAAgBmP;YAClB,CAAC;UACH;AAEA,eAAK8I,WAAWC,eAAe/I,OAAOyiC,KAAKxhC,IAAIvQ,KAAK;QACtD;AAEA,cAAMgqE,KAAK,KAAK1wD,MAAMjX;AACtB,YAAIskB,gBAAgBqjD,EAAE,MAAM,KAAKtpC,UAAU3C,SAAS,CAAC,KAAK/K,MAAY,EAAA,IAAI;AACxE,cAAIi3C,OAAOhjD,wBAAwB+iD,EAAE;AACrC,cAAIC,OAAO1J,SAAS;AAClB,gBAAIyJ,OAAE,IAAkB;AACtB,mBAAKjyC,aAAa,kBAAkB;AACpC,kBAAI,KAAKze,MAAMuX,4BAA4B;AAEzC,uBAAOkhB;cACT;AACA,mBAAKm4B,6BAA6Bn4B,MAAsBuuB,YAAY;YACtE;AACA,kBAAMl+D,OAAO,KAAK2/B,YAChBu+B,YACF;AACAl+D,iBAAK2vC,OAAOA;AACZ3vC,iBAAKwqD,WAAW,KAAKtzC,MAAMhK;AAE3B,kBAAM66D,UAAUH,OAAmB,MAAIA,OAAoB;AAC3D,kBAAMI,WAAWJ,OAA2B;AAE5C,gBAAII,UAAU;AAGZH,qBAAOhjD,wBAAuB,EAAc;YAC9C;AAEA,iBAAKkC,KAAI;AAET,gBACE6gD,OAAE,MAEF,KAAKjxD,UAAU,CAAC,oBAAoB;cAAE0f,UAAU;YAAW,CAAA,CAAC,GAC5D;AACA,kBAAI,KAAKnf,MAAMjX,SAAI,MAAkB,KAAKq+B,UAAU9C,UAAU;AAC5D,sBAAM,KAAKplB,MACTzG,OAAOzG,kCACP,KAAKgO,MAAM3B,QACb;cACF;YACF;AAEAvV,iBAAKsoC,QAAQ,KAAK2/B,qBAAqBL,IAAIC,IAAI;AAC/C,kBAAMK,eAAe,KAAKvzD,WACxB3U,MACA+nE,WAAWC,WAAW,sBAAsB,kBAC9C;AAMA,kBAAMG,SAAS,KAAKjxD,MAAMjX;AAC1B,gBACG+nE,aAAaG,WAAM,MAAqBA,WAAwB,OAChEJ,WAAWI,WAAM,IAClB;AACA,oBAAM,KAAK/xD,MACTzG,OAAOhJ,2BACP,KAAKuQ,MAAM3B,QACb;YACF;AAEA,mBAAO,KAAK0oD,YAAYiK,cAAchK,cAAcC,OAAO;UAC7D;QACF;AAEA,eAAOxuB;MACT;MAKAs4B,qBAEEL,IACAC,MACc;AACd,cAAMtyD,WAAW,KAAK2B,MAAM3B;AAC5B,gBAAQqyD,IAAE;UACR,KAAA;AACE,oBAAQ,KAAK9zD,gBAAgB,oBAAoB,UAAU,GAAC;cAC1D,KAAK;AACH,uBAAO,KAAKs0D,wBAAwB,MAAM;AACxC,yBAAO,KAAKC,kBAAiB;gBAC/B,CAAC;cAGH,KAAK;AACH,uBAAO,KAAKD,wBAAwB,MAAM;AACxC,sBAAI,KAAK9pC,UAAU7C,YAAY,KAAKM,aAAsB,GAAA,GAAG;AAC3D,0BAAM,KAAK3lB,MAAMzG,OAAOxD,mBAAmB,KAAK+K,MAAM3B,QAAQ;kBAChE;AACA,yBAAO,KAAK+yD,8BACV,KAAKC,yBAAyBX,IAAIC,IAAI,GACtCtyD,QACF;gBACF,CAAC;cAEH,KAAK;AACH,uBAAO,KAAKizD,+BAA+B,MAAM;AAC/C,yBAAO,KAAKC,wBAAwBZ,IAAI;gBAC1C,CAAC;YACL;UAGF;AACE,mBAAO,KAAKU,yBAAyBX,IAAIC,IAAI;QACjD;MACF;MAKAU,yBAEEX,IACAC,MACc;AACd,cAAMtyD,WAAW,KAAK2B,MAAM3B;AAE5B,eAAO,KAAK0oD,YACV,KAAK0J,yBAAwB,GAC7BpyD,UACAuP,wBAAwB8iD,EAAE,IAAIC,OAAO,IAAIA,IAC3C;MACF;MAEAQ,oBAA8C;AAAA,YAAAK;AAC5C,cAAM;UAAEnzD;YAAa,KAAK2B;AAC1B,cAAM/D,OAAO,KAAK06B,iBAAgB;AAClC,cAAM86B,sBAAsB38D,oCAAoCya,IAE9DtT,KAAKlT,IACP;AAGA,YAAI0oE,uBAAuB,GAAAD,cAACv1D,KAAKrB,UAAL42D,QAAAA,YAAY/1D,gBAAe;AACrD,eAAKyD,MAAMzG,OAAOlD,yBAAyB8I,UAAU;YACnDtV,MAAMkT,KAAKlT;UACb,CAAC;QACH;AACA,YAAI,CAAC,KAAK2oE,sCAAqC,GAAI;AAEjD,eAAKxyD,MAAMzG,OAAOnD,iBAAiB+I,QAAQ;QAC7C;AAEA,eAAOpC;MACT;MAEA01D,2BACE7oE,MACA;AACA,YAAI,KAAK4wB,MAAK,EAAY,GAAG;AAC3B,eAAKxa,MAAMzG,OAAO3F,oCAAoChK,KAAKgP,QAAQ;QACrE;MACF;MAIA6oD,gBAEEriD,qBACA6qD,UACc;AACd,cAAM9qD,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMuzD,UAAU,KAAK/sC,aAAY,EAAU;AAE3C,YAAI+sC,WAAW,KAAKC,qBAAoB,GAAI;AAC1C,eAAKhiD,KAAI;AACT,gBAAMimB,QAAO,KAAKg8B,WAAWzzD,QAAQ;AACrC,cAAI,CAAC8qD,SAAU,MAAKwI,2BAA2B77B,KAAI;AACnD,iBAAOA;QACT;AACA,cAAMi8B,SAAS,KAAKr4C,MAAK,EAAU;AACnC,cAAM5wB,OAAO,KAAKyU,UAAS;AAC3B,YAAIgQ,cAAc,KAAKvN,MAAMjX,IAAI,GAAG;AAClCD,eAAKwqD,WAAW,KAAKtzC,MAAMhK;AAC3BlN,eAAKE,SAAS;AAEd,cAAI,KAAK0wB,MAAK,EAAU,GAAG;AACzB,iBAAK+E,aAAa,kBAAkB;UACtC;AACA,gBAAMuzC,WAAW,KAAKt4C,MAAK,EAAW;AACtC,eAAK7J,KAAI;AAET/mB,eAAKgP,WAAW,KAAK6oD,gBAAgB,MAAM,IAAI;AAE/C,eAAKx6B,sBAAsB7nB,qBAAqB,IAAI;AAEpD,cAAI,KAAK0B,MAAM+O,UAAUijD,UAAU;AACjC,kBAAMze,MAAMzqD,KAAKgP;AAEjB,gBAAIy7C,IAAIxqD,SAAS,cAAc;AAC7B,mBAAKmW,MAAMzG,OAAOpE,cAAcvL,IAAI;YACrC,WAAU,KAAKmY,yBAAyBsyC,GAAG,GAAG;AAC7C,mBAAKr0C,MAAMzG,OAAO5N,oBAAoB/B,IAAI;YAC5C;UACF;AAEA,cAAI,CAACipE,QAAQ;AACX,gBAAI,CAAC5I,UAAU;AACb,mBAAKwI,2BAA2B7oE,IAAiC;YACnE;AACA,mBAAO,KAAK2U,WAAW3U,MAAM,iBAAiB;UAChD;QACF;AAEA,cAAMgtC,OAAO,KAAKm8B,YAEhBnpE,MACAipE,QACAzzD,mBACF;AAEA,YAAIszD,SAAS;AACX,gBAAM;YAAE7oE;cAAS,KAAKiX;AACtB,gBAAM+B,cAAa,KAAKtC,UAAU,aAAa,IAC3CuN,wBAAwBjkB,IAAI,IAC5BikB,wBAAwBjkB,IAAI,KAAK,CAAC,KAAK2wB,MAAK,EAAU;AAC1D,cAAI3X,eAAc,CAAC,KAAKmwD,iBAAgB,GAAI;AAC1C,iBAAKvwC,eAAelpB,OAAO/O,wBAAwB2U,QAAQ;AAC3D,mBAAO,KAAKyzD,WAAWzzD,QAAQ;UACjC;QACF;AAEA,eAAOy3B;MACT;MAGAm8B,YAEEnpE,MACAipE,QACAzzD,qBACc;AACd,YAAIyzD,QAAQ;AACV,gBAAMI,uBAAuBrpE;AAC7B,eAAK6rD,UACHwd,qBAAqBr6D,UACrB,KAAK2F,WAAW00D,sBAAsB,kBAAkB,CAC1D;AACA,iBAAOrpE;QACT;AAEA,cAAMuV,WAAW,KAAK2B,MAAM3B;AAC5B,YAAIy3B,OAAO,KAAKs8B,oBAAoB9zD,mBAAmB;AACvD,YAAI,KAAK6nB,sBAAsB7nB,qBAAqB,KAAK,EAAG,QAAOw3B;AACnE,eAAOxoB,eAAe,KAAKtN,MAAMjX,IAAI,KAAK,CAAC,KAAKs8B,mBAAkB,GAAI;AACpE,gBAAMv8B,QAAO,KAAK2/B,YAAgCpqB,QAAQ;AAC1DvV,UAAAA,MAAKwqD,WAAW,KAAKtzC,MAAMhK;AAC3BlN,UAAAA,MAAKE,SAAS;AACdF,UAAAA,MAAKgP,WAAWg+B;AAChB,eAAKjmB,KAAI;AACT,eAAK8kC,UAAU7e,MAAOA,OAAO,KAAKr4B,WAAW3U,OAAM,kBAAkB,CAAE;QACzE;AACA,eAAOgtC;MACT;MAIAs8B,oBAEE9zD,qBACc;AACd,cAAMD,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMyX,mBAAmB,KAAK9V,MAAM8V;AACpC,cAAMggB,OAAO,KAAKvG,cAAcjxB,mBAAmB;AAEnD,YAAI,KAAKsxD,qBAAqB95B,MAAMhgB,gBAAgB,GAAG;AACrD,iBAAOggB;QACT;AAEA,eAAO,KAAK+G,gBAAgB/G,MAAMz3B,QAAQ;MAC5C;MAEAw+B,gBAEEp8B,MACApC,UACAqC,SACc;AACd,cAAMV,QAAQ;UACZW,qBAAqB;UACrB0xD,iBAAiB,KAAK3L,qBAAqBjmD,IAAI;UAC/CI,MAAM;;AAER,WAAG;AACDJ,iBAAO,KAAKD,eAAeC,MAAMpC,UAAUqC,SAASV,KAAK;AAGzDA,gBAAMqyD,kBAAkB;QAC1B,SAAS,CAACryD,MAAMa;AAChB,eAAOJ;MACT;MAMAD,eAEEC,MACApC,UACAqC,SACAV,OACc;AACd,cAAM;UAAEjX;YAAS,KAAKiX;AACtB,YAAI,CAACU,WAAW3X,SAAI,IAAqB;AACvC,iBAAO,KAAKupE,UAAU7xD,MAAMpC,UAAUqC,SAASV,KAAK;QACtD,WAAW6N,gBAAgB9kB,IAAI,GAAG;AAChC,iBAAO,KAAK69D,8BAA8BnmD,MAAMpC,UAAU2B,KAAK;QACjE;AAEA,YAAIX,WAAW;AAEf,YAAItW,SAAI,IAAqB;AAC3B,cAAI2X,SAAS;AACX,iBAAKxB,MAAMzG,OAAOjI,uBAAuB,KAAKwP,MAAM3B,QAAQ;AAC5D,gBAAI,KAAKye,kBAAmB,MAAA,IAAgC;AAE1D9c,oBAAMa,OAAO;AACb,qBAAOJ;YACT;UACF;AACAT,gBAAMW,sBAAsBtB,WAAW;AACvC,eAAKwQ,KAAI;QACX;AAEA,YAAI,CAACnP,WAAW,KAAKgZ,MAAK,EAAU,GAAG;AACrC,iBAAO,KAAK64C,gCACV9xD,MACApC,UACA2B,OACAX,QACF;QACF,OAAO;AACL,gBAAM7B,WAAW,KAAK6e,IAAG,CAAY;AACrC,cAAI7e,YAAY6B,YAAY,KAAKgd,IAAU,EAAA,GAAG;AAC5C,mBAAO,KAAKm2C,YAAY/xD,MAAMpC,UAAU2B,OAAOxC,UAAU6B,QAAQ;UACnE,OAAO;AACLW,kBAAMa,OAAO;AACb,mBAAOJ;UACT;QACF;MACF;MAMA+xD,YAEE/xD,MACApC,UACA2B,OACAxC,UACA6B,UACiD;AACjD,cAAMvW,OAAO,KAAK2/B,YAEhBpqB,QAAQ;AACVvV,aAAK6P,SAAS8H;AACd3X,aAAK0U,WAAWA;AAChB,YAAIA,UAAU;AACZ1U,eAAK69B,WAAW,KAAKmH,gBAAe;AACpC,eAAKnI,OAAM,CAAY;QACxB,WAAU,KAAKjM,MAAK,GAAe,GAAG;AACrC,cAAIjZ,KAAK1X,SAAS,SAAS;AACzB,iBAAKmW,MAAMzG,OAAO/G,mBAAmB2M,QAAQ;UAC/C;AACA,eAAKS,WAAWC,eAAe,KAAKiB,MAAMhK,OAAO,KAAKgK,MAAM3B,QAAQ;AACpEvV,eAAK69B,WAAW,KAAKhqB,iBAAgB;QACvC,OAAO;AACL7T,eAAK69B,WAAW,KAAKyH,gBAAgB,IAAI;QAC3C;AAEA,YAAIpuB,MAAMW,qBAAqB;AAC5B7X,eAAoCuW,WAAWA;AAChD,iBAAO,KAAK5B,WAAW3U,MAAM,0BAA0B;QACzD,OAAO;AACL,iBAAO,KAAK2U,WAAW3U,MAAM,kBAAkB;QACjD;MACF;MAGAwpE,UAEE7xD,MACApC,UACAqC,SACAV,OACc;AACd,cAAMlX,OAAO,KAAK2/B,YAA8BpqB,QAAQ;AACxDvV,aAAK6P,SAAS8H;AACd,aAAKoP,KAAI;AACT/mB,aAAKwW,SAAS,KAAKmzD,gBAAe;AAClCzyD,cAAMa,OAAO;AACb,eAAO,KAAKg8B,gBACV,KAAKp/B,WAAW3U,MAAM,gBAAgB,GACtCuV,UACAqC,OACF;MACF;MAMA6xD,gCAEE9xD,MACApC,UACA2B,OACAX,UACc;AACd,cAAMmmD,4BAA4B,KAAKxlD,MAAM+W;AAC7C,YAAIzY,sBAA+C;AAEnD,aAAK0B,MAAM+W,yBAAyB;AACpC,aAAKlH,KAAI;AAET,cAAM/mB,OAAO,KAAK2/B,YAChBpqB,QACF;AACAvV,aAAKwW,SAASmB;AACd,cAAM;UAAE4xD;UAAiB1xD;QAAqB,IAAGX;AAEjD,YAAIqyD,iBAAiB;AACnB,eAAK/qC,gBAAgBhW,MAAM2S,mBAAoB,CAAA;AAC/C3lB,gCAAsB,IAAIopB,iBAAgB;QAC5C;AAEA,YAAI/mB,qBAAqB;AAEvB7X,eAAKuW,WAAWA;QAClB;AAEA,YAAIA,UAAU;AACZvW,eAAK0W,YAAY,KAAKs9B,6BAA4B,EAAU;QAC9D,OAAO;AACLh0C,eAAK0W,YAAY,KAAKs9B,6BAA4B,IAEhDr8B,KAAK1X,SAAS,UACd0X,KAAK1X,SAAS,SAEdD,MACAwV,mBACF;QACF;AACA,YAAI0yD,eAG4B,KAAK7xD,qBACnCrW,MACA6X,mBACF;AAEA,YAAI0xD,mBAAmB,KAAK52B,sBAAuB,KAAI,CAACp8B,UAAU;AAEhEW,gBAAMa,OAAO;AACb,eAAK4mB,0BAA0BnpB,mBAAmB;AAClD,eAAKgpB,gBAAgBxD,kBAAiB;AACtC,eAAKwD,gBAAgB/V,KAAI;AACzBy/C,yBAAe,KAAKz1B,kCAClB,KAAK9S,YAAuCpqB,QAAQ,GACpD2yD,YACF;QACF,OAAO;AACL,cAAIqB,iBAAiB;AACnB,iBAAKlsC,sBAAsB7nB,qBAAqB,IAAI;AACpD,iBAAKgpB,gBAAgB/V,KAAI;UAC3B;AACA,eAAK3R,sBAAsBoxD,YAAY;QACzC;AAEA,aAAKhxD,MAAM+W,yBAAyByuC;AAEpC,eAAOwL;MACT;MAEApxD,sBACE9W,MACA8vC,qBACA;AACA,aAAK+a,qBAAqB7qD,KAAK0W,WAAWo5B,mBAAmB;MAC/D;MAIAguB,8BAEEnmD,MACApC,UACA2B,OAC4B;AAC5B,cAAMlX,OAAO,KAAK2/B,YAAwCpqB,QAAQ;AAClEvV,aAAK4pE,MAAMjyD;AACX3X,aAAK6pE,QAAQ,KAAKpS,cAAc,IAAI;AACpC,YAAIvgD,MAAMW,qBAAqB;AAC7B,eAAKzB,MAAMzG,OAAOhI,4BAA4B4N,QAAQ;QACxD;AACA,eAAO,KAAKZ,WAAW3U,MAAM,0BAA0B;MACzD;MAEA49D,qBAAqBjmD,MAA6B;AAChD,eACEA,KAAK1X,SAAS,gBACd0X,KAAKtR,SAAS,WACd,KAAK6Q,MAAMsB,cAAc/a,UAAUka,KAAK9Z,OACxC,CAAC,KAAK0+B,mBAAoB,KAE1B5kB,KAAK9Z,MAAM8Z,KAAK/Z,UAAU,KAC1B+Z,KAAK/Z,UAAU,KAAKsZ,MAAM8V;MAE9B;MAEA3W,qBACErW,MACAuW,UACG;AACH,YAAIvW,KAAKwW,OAAOvW,SAAS,UAAU;AACjC,cAAID,KAAK0W,UAAUY,WAAW,GAAG;AAC/B,gBAEE,EACE,KAAKX,UAAU,kBAAkB,KACjC,KAAKA,UAAU,kBAAkB,IAEnC;AACA,mBAAKgf,aAAa,kBAAkB;YACtC;UACF;AACA,cAAI31B,KAAK0W,UAAUY,WAAW,KAAKtX,KAAK0W,UAAUY,SAAS,GAAG;AAC5D,iBAAKlB,MAAMzG,OAAOjM,iBAAiB1D,MAAM;cACvC2D,kBACE,KAAKgT,UAAU,kBAAkB,KAE9B,KAAKA,UAAU,kBAAkB,KAChC,KAAKA,UAAU,kBAAkB,IACjC,IACA;YACR,CAAC;UACH,OAAO;AACL,uBAAW8zC,OAAOzqD,KAAK0W,WAAW;AAChC,kBAAI+zC,IAAIxqD,SAAS,iBAAiB;AAChC,qBAAKmW,MAAMzG,OAAO9L,0BAA0B4mD,GAAG;cACjD;YACF;UACF;QACF;AACA,eAAO,KAAK91C,WACV3U,MACAuW,WAAW,2BAA2B,gBACxC;MACF;MAEAy9B,6BAEE/D,OACA65B,eACAC,kBACAC,cACAx0D,qBACwC;AACxC,cAAM61C,OAAuB,CAAA;AAC7B,YAAI/f,QAAQ;AACZ,cAAM2+B,gCAAgC,KAAK/yD,MAAMuX;AACjD,aAAKvX,MAAMuX,6BAA6B;AAExC,eAAO,CAAC,KAAK8E,IAAI0c,KAAK,GAAG;AACvB,cAAI3E,OAAO;AACTA,oBAAQ;UACV,OAAO;AACL,iBAAKzO,OAAM,EAAS;AACpB,gBAAI,KAAKjM,MAAMqf,KAAK,GAAG;AACrB,kBACE65B,iBACA,CAAC,KAAKnzD,UAAU,kBAAkB,KAE/B,CAAC,KAAKA,UAAU,kBAAkB,KACjC,CAAC,KAAKA,UAAU,kBAAkB,GACtC;AACA,qBAAKP,MACHzG,OAAOlM,iCACP,KAAKyT,MAAMC,eACb;cACF;AACA,kBAAI6yD,cAAc;AAChB,qBAAKE,4BAA4BF,YAAY;cAC/C;AACA,mBAAKjjD,KAAI;AACT;YACF;UACF;AAEAskC,eAAKz3C,KACH,KAAKu2D,kBAAkB,OAAO30D,qBAAqBu0D,gBAAgB,CACrE;QACF;AAEA,aAAK7yD,MAAMuX,6BAA6Bw7C;AAExC,eAAO5e;MACT;MAEA1Y,wBAAiC;AAC/B,eAAO,KAAK/hB,MAAc,EAAA,KAAK,CAAC,KAAK2L,mBAAkB;MACzD;MAEAkW,kCAEEzyC,MACA0yC,MAC2B;AAAA,YAAA03B;AAC3B,aAAKl+C,kCAAkCwmB,IAAI;AAC3C,aAAK7V,OAAM,EAAS;AACpB,aAAK0X,qBACHv0C,MACA0yC,KAAKh8B,WACL,OAAI0zD,cACJ13B,KAAK5gC,UAAK,OAAA,SAAVs4D,YAAY/7B,gBACd;AAEA,YAAIqE,KAAKjoB,eAAe;AACtBD,2BAAiBxqB,MAAM0yC,KAAKjoB,aAAa;QAC3C;AAEA,YAAIioB,KAAKl8B,OAAO2T,kBAAkB;AAChCK,2BAAiBxqB,MAAM0yC,KAAKl8B,OAAO2T,gBAAgB;QACrD;AACA,eAAOnqB;MACT;MAIA2pE,kBAA4C;AAC1C,cAAMp0D,WAAW,KAAK2B,MAAM3B;AAC5B,eAAO,KAAKw+B,gBAAgB,KAAKtN,cAAa,GAAIlxB,UAAU,IAAI;MAClE;MAcAkxB,cAEEjxB,qBACc;AACd,YAAIxV;AACJ,YAAIgX,aAAmC;AAEvC,cAAM;UAAE/W;YAAS,KAAKiX;AACtB,gBAAQjX,MAAI;UACV,KAAA;AACE,mBAAO,KAAKoqE,WAAU;UAExB,KAAA;AACErqE,mBAAO,KAAKyU,UAAS;AACrB,iBAAKsS,KAAI;AAET,gBAAI,KAAK6J,MAAK,EAAO,GAAG;AACtB,qBAAO,KAAK05C,wBAAwBtqE,IAA8B;YACpE;AAEA,gBAAI,KAAK4wB,MAAK,EAAU,GAAG;AACzB,kBAAI,KAAKxgB,QAAQg2D,yBAAyB;AACxC,uBAAO,KAAKmE,gBAAgBvqE,IAAkC;cAChE,OAAO;AACL,uBAAO,KAAK2U,WAAW3U,MAAM,QAAQ;cACvC;YACF,OAAO;AACL,mBAAKoW,MAAMzG,OAAOtF,mBAAmB,KAAK6M,MAAMC,eAAe;AAC/D,qBAAO,KAAKxC,WAAW3U,MAAM,QAAQ;YACvC;UAEF,KAAA;AACEA,mBAAO,KAAKyU,UAAS;AACrB,iBAAKsS,KAAI;AACT,mBAAO,KAAKpS,WAAW3U,MAAM,gBAAgB;UAE/C,KAAA,IAAa;AACX,mBAAO,KAAKwqE,QAAQ,KAAK/1D,UAAW,GAAE,KAAK;UAC7C;UAEA,KAAA;UACA,KAAA,IAAqB;AACnB,iBAAK2iB,WAAU;AACf,mBAAO,KAAK9mB,mBAAmB,KAAK4G,MAAMhK,KAAK;UACjD;UAEA,KAAA;AACE,mBAAO,KAAKqE,oBAAoB,KAAK2F,MAAMhK,KAAK;UAElD,KAAA;AACE,mBAAO,KAAK2D,mBAAmB,KAAKqG,MAAMhK,KAAK;UAEjD,KAAA;AACE,mBAAO,KAAKoE,mBAAmB,KAAK4F,MAAMhK,KAAK;UAEjD,KAAA;AACE,mBAAO,KAAKsE,iBAAgB;UAE9B,KAAA;AACE,mBAAO,KAAKC,oBAAoB,IAAI;UACtC,KAAA;AACE,mBAAO,KAAKA,oBAAoB,KAAK;UAEvC,KAAA,IAAgB;AACd,kBAAMqiC,aAAa,KAAK58B,MAAM8V,qBAAqB,KAAK9V,MAAMtZ;AAC9D,mBAAO,KAAKi2C,mCAAmCC,UAAU;UAC3D;UAEA,KAAA;UACA,KAAA,GAAsB;AACpB,mBAAO,KAAK9D,eACV,KAAK94B,MAAMjX,SAAI,IAAkD,IAAA,GAC9C,OACL,IAChB;UACF;UACA,KAAA,GAAkB;AAChB,mBAAO,KAAK+vC,eAAc,GAEL,MACL,OACdx6B,mBACF;UACF;UACA,KAAA;UACA,KAAA,GAAoB;AAClB,mBAAO,KAAK01C,gBACV,KAAKh0C,MAAMjX,SAAI,IAA4C,IAAA,GAC3C,OACD,IACjB;UACF;UACA,KAAA,GAAgB;AACd,mBAAO,KAAKirD,gBAAe,GAET,OACD,OACf11C,mBACF;UACF;UACA,KAAA;AACE,mBAAO,KAAKi1D,4BAA2B;UAEzC,KAAA;AACEzzD,yBAAa,KAAK0zD,gBAAe;UAEnC,KAAA;AACE,mBAAO,KAAKzO,WACV,KAAKgF,oBACHjqD,YACA,KAAKvC,UAAS,CAChB,GACA,KACF;UAEF,KAAA;AACE,mBAAO,KAAKk2D,oBAAmB;UAEjC,KAAA;UACA,KAAA;AACE,mBAAO,KAAKlT,cAAc,KAAK;UAIjC,KAAA,IAAqB;AACnBz3D,mBAAO,KAAKyU,UAAS;AACrB,iBAAKsS,KAAI;AACT/mB,iBAAK6P,SAAS;AACd,kBAAM2G,SAAUxW,KAAKwW,SAAS,KAAKmzD,gBAAe;AAClD,gBAAInzD,OAAOvW,SAAS,oBAAoB;AACtC,qBAAO,KAAK0U,WAAW3U,MAAM,gBAAgB;YAC/C,OAAO;AACL,oBAAM,KAAKoW,MAAMzG,OAAOzF,iBAAiBsM,MAAM;YACjD;UACF;UAEA,KAAA,KAAqB;AAOnB,iBAAKJ,MAAMzG,OAAO3H,qBAAqB,KAAKkP,MAAM3B,UAAU;cAC1DxX,gBAAgB,KAAKmZ,MAAMhK;YAC7B,CAAC;AACD,mBAAO,KAAK2G,iBAAgB;UAC9B;UAEA,KAAA,IAAsB;AACpB,mBAAO,KAAK+2D,kCAAiC,IAAY,GAAG;UAC9D;UAEA,KAAA,IAAmB;AACjB,mBAAO,KAAKA,kCAAiC,IAAgB,GAAG;UAClE;UAEA,KAAA;UACA,KAAA,IAAkB;AAChB,mBAAO,KAAKC,oBAAoB,MAAM;UACxC;UAEA,KAAA;UACA,KAAA;UACA,KAAA,IAAc;AACZ,kBAAMC,eAAe,KAAKh3D,gBACxB,oBACA,UACF;AAEA,gBAAIg3D,cAAc;AAChB,qBAAO,KAAKD,oBAAoBC,YAAY;YAC9C;AACA,iBAAK1lE,WAAU;AACf;UACF;UAEA,KAAA,IAAY;AACV,kBAAMmxB,cAAc,KAAKzK,MAAM0K,YAAY,KAAK3C,eAAc,CAAE;AAChE,gBACEjO,kBAAkB2Q,WAAW,KAC7BA,gBAAW,IACX;AACA,mBAAKuC,gBAAgB,CAAC,OAAO,QAAQ,YAAY,CAAC;YACpD,OAAO;AACL,mBAAK1zB,WAAU;YACjB;AACA;UACF;UAEA;AACE,gBAAqCnF,SAAI,KAAiB;AACxD,qBAAO,KAAKkR,oBAAoB,KAAK+F,MAAMhK,KAAK;YAClD;AAEA,gBAAI2W,kBAAkB5jB,IAAI,GAAG;AAC3B,kBACE,KAAK87B,aAAY,GAAW,KAC5B,KAAK5H,wBAAyB,MAAA,KAC9B;AACA,uBAAO,KAAK42C,sBAAqB;cACnC;AACA,oBAAMj3B,aAAa,KAAK58B,MAAM8V,qBAAqB,KAAK9V,MAAMtZ;AAC9D,oBAAM+wB,cAAc,KAAKzX,MAAMyX;AAC/B,oBAAM1a,KAAK,KAAKqxB,gBAAe;AAE/B,kBACE,CAAC3W,eACD1a,GAAG5N,SAAS,WACZ,CAAC,KAAKk2B,mBAAkB,GACxB;AACA,sBAAM;kBAAEt8B,MAAAA;oBAAS,KAAKiX;AACtB,oBAAIjX,UAAI,IAAmB;AACzB,uBAAKisB,kCAAkCjY,EAAE;AACzC,uBAAK8S,KAAI;AACT,yBAAO,KAAKikD,6BACV,KAAK/yD,gBAAgBhE,EAAE,CACzB;gBACF,WAAW4P,kBAAkB5jB,KAAI,GAAG;AAIlC,sBAAI,KAAK+zB,kBAAmB,MAAA,IAAyB;AAInD,2BAAO,KAAKi3C,6BACV,KAAKhzD,gBAAgBhE,EAAE,CACzB;kBACF,OAAO;AAGL,2BAAOA;kBACT;gBACF,WAAWhU,UAAI,IAAa;AAC1B,uBAAKisB,kCAAkCjY,EAAE;AACzC,yBAAO,KAAKu2D,QAAQ,KAAKvyD,gBAAgBhE,EAAE,GAAG,IAAI;gBACpD;cACF;AAEA,kBACE6/B,cACA,KAAKljB,MAAc,EAAA,KACnB,CAAC,KAAK2L,mBAAkB,GACxB;AACA,qBAAKxV,KAAI;AACT,uBAAO,KAAKwtB,qBACV,KAAKt8B,gBAAgBhE,EAAE,GACvB,CAACA,EAAE,GACH,KACF;cACF;AAEA,qBAAOA;YACT,OAAO;AACL,mBAAK7O,WAAU;YACjB;QACJ;MACF;MAYAwlE,kCACEM,gBACAC,iBACc;AACd,cAAML,eAAe,KAAKh3D,gBAAgB,oBAAoB,UAAU;AAExE,YAAIg3D,cAAc;AAKhB,eAAK5zD,MAAMjX,OAAOirE;AAClB,eAAKh0D,MAAMhK,QAAQi+D;AAGnB,eAAKj0D,MAAM3I;AACX,eAAK2I,MAAMrZ;AAGX,eAAKqZ,MAAMoB,SAASta,+BAA+B,KAAKkZ,MAAMoB,QAAQ,EAAE;AAExE,iBAAO,KAAKuyD,oBAAoBC,YAAY;QAC9C,OAAO;AACL,eAAK1lE,WAAU;QACjB;MACF;MAQAylE,oBAAoBC,cAAoC;AACtD,cAAM9qE,OAAO,KAAKyU,UAAS;AAC3B,cAAMc,WAAW,KAAK2B,MAAM3B;AAC5B,cAAMwoD,YAAY,KAAK7mD,MAAMjX;AAG7B,aAAK8mB,KAAI;AAKT,eAAO,KAAKqkD,qBAAqBprE,MAAMuV,UAAUu1D,cAAc/M,SAAS;MAC1E;MAeAqN,qBAGEprE,MACAuV,UACAu1D,cACA/M,WACG;AACH,YACE,KAAKsN,gCAAgCP,cAAcv1D,UAAUwoD,SAAS,GACtE;AAMA,gBAAMjG,WACJgT,iBAAiB,UACb,kCAGA;AAEN,cAAI,CAAC,KAAKQ,wCAAuC,GAAI;AACnD,iBAAKl1D,MAIH00D,iBAAiB,UACbn7D,OAAO7C,yBAEP6C,OAAOtD,kBACXkJ,QACF;UACF;AAIA,eAAKg2D,uBAAsB;AAE3B,iBAAO,KAAK52D,WAAW3U,MAAM83D,QAAQ;QACvC,OAAO;AAEL,gBAAM,KAAK1hD,MAAMzG,OAAOrD,4BAA4BiJ,UAAU;YAC5DhJ,OAAOqY,eAAem5C,SAAS;UACjC,CAAC;QACH;MACF;MAWAsN,gCACEP,cACAv1D,UACAwoD,WACS;AACT,gBAAQ+M,cAAY;UAClB,KAAK,QAAQ;AACX,mBAAO,KAAKn0D,UAAU,CACpB,oBACA;cAEE2f,YAAY1R,eAAem5C,SAAS;YACrC,CAAA,CACF;UACH;UACA,KAAK;AACH,mBAAOA,cAAqB;UAC9B;AACE,kBAAM,KAAK3nD,MAAMzG,OAAOvD,4BAA4BmJ,QAAQ;QAChE;MACF;MAGA01D,6BAEEjrE,MAC2B;AAG3B,aAAKs+B,UAAU9V,MAAMoT,cAAc,MAAM,KAAK0C,UAAU7C,QAAQ,CAAC;AACjE,cAAMjpB,SAAS,CAAC,KAAK8yB,gBAAiB,CAAA;AACtC,aAAKhH,UAAU7V,KAAI;AACnB,YAAI,KAAK+T,sBAAqB,GAAI;AAChC,eAAKpmB,MAAMzG,OAAO9J,2BAA2B,KAAKqR,MAAM2X,YAAW,CAAE;QACvE;AACA,aAAKgO,OAAM,EAAS;AAEpB,eAAO,KAAK0X,qBAAqBv0C,MAAMwS,QAAQ,IAAI;MACrD;MAIAg4D,QAEExqE,MACAmS,SACgB;AAChB,aAAKwjB,aAAa,eAAe;AACjC,YAAIxjB,SAAS;AACX,eAAKwjB,aAAa,oBAAoB;QACxC;AACA31B,aAAKszC,QAAQnhC;AACb,aAAK4U,KAAI;AACT,cAAMgX,YAAY,KAAK7mB,MAAMoW;AAC7B,aAAKpW,MAAMoW,SAAS,CAAA;AACpB,YAAInb,SAAS;AAGX,eAAKmsB,UAAU9V,MAAK,CAAsB;AAC1CxoB,eAAKmT,OAAO,KAAKowD,WAAU;AAC3B,eAAKjlC,UAAU7V,KAAI;QACrB,OAAO;AACLzoB,eAAKmT,OAAO,KAAKowD,WAAU;QAC7B;AAEA,aAAKrsD,MAAMoW,SAASyQ;AACpB,eAAO,KAAKppB,WAAW3U,MAAM,cAAc;MAC7C;MAGAqqE,aAAsB;AACpB,cAAMrqE,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT,YACE,KAAK6J,MAAK,EAAU,KACpB,CAAC,KAAKlI,MAAMpU,oBACZ,CAAC,KAAKlE,QAAQ81D,yBACd;AACA,eAAK9vD,MAAMzG,OAAOhH,iBAAiB3I,IAAI;QACzC,WACE,CAAC,KAAK0oB,MAAMZ,cACZ,CAAC,KAAK1X,QAAQ81D,yBACd;AACA,eAAK9vD,MAAMzG,OAAO9F,iBAAiB7J,IAAI;QACzC;AAEA,YACE,CAAC,KAAK4wB,MAAK,EAAU,KACrB,CAAC,KAAKA,MAAiB,CAAA,KACvB,CAAC,KAAKA,MAAK,EAAO,GAClB;AACA,eAAKxa,MAAMzG,OAAOhF,kBAAkB3K,IAAI;QAC1C;AAEA,eAAO,KAAK2U,WAAW3U,MAAM,OAAO;MACtC;MAEA6T,mBAAkC;AAChC,cAAM7T,OAAO,KAAKyU,UAAS;AAC3B,cAAMR,KAAK,KAAK0rB,YAGd3hC,+BAA+B,KAAKkZ,MAAM3B,UAAU,CAAC,CACvD;AACA,cAAMlP,OAAO,KAAK6Q,MAAMhK;AACxB,aAAK6Z,KAAI;AACT/mB,aAAKiU,KAAK,KAAK43B,iBAAiB53B,IAAI5N,IAAI;AACxC,eAAO,KAAKsO,WAAW3U,MAAM,aAAa;MAC5C;MAEAyqE,8BAEyC;AACvC,cAAMzqE,OAAO,KAAKyU,UAAS;AAO3B,aAAKsS,KAAI;AAET,YAAI,KAAKuX,UAAU7C,YAAY,KAAK7K,MAAY,EAAA,GAAG;AACjD,gBAAM46C,OAAO,KAAK3/B,iBAChB,KAAK5zB,gBAA8BjY,IAAI,GACvC,UACF;AACA,eAAK+mB,KAAI;AAET,cAAI,KAAK6J,MAAK,GAAS,GAAG;AACxB,iBAAK+E,aAAa,cAAc;UACjC,WAAU,CAAC,KAAKhf,UAAU,cAAc,GAAG;AAE1C,iBAAKvR,WAAU;UACjB;AACA,iBAAO,KAAKqmE,kBACVzrE,MACAwrE,MACA,MACF;QACF;AACA,eAAO,KAAKE,cAAc1rE,IAAoC;MAChE;MAEAyrE,kBACEzrE,MACAwrE,MACAve,cACgB;AAChBjtD,aAAKwrE,OAAOA;AAEZ,cAAM78C,cAAc,KAAKzX,MAAMyX;AAE/B3uB,aAAK69B,WAAW,KAAKyH,gBAAgB,IAAI;AAEzC,YAAItlC,KAAK69B,SAASx3B,SAAS4mD,gBAAgBt+B,aAAa;AACtD,eAAKvY,MAAMzG,OAAOrF,yBAAyBtK,KAAK69B,UAAU;YACxDtzB,QAAQihE,KAAKnlE;YACbmE,uBAAuByiD;UACzB,CAAC;QACH;AAEA,eAAO,KAAKt4C,WAAW3U,MAAM,cAAc;MAC7C;MAGAsqE,wBAEEtqE,MACqC;AACrC,cAAMiU,KAAK,KAAK43B,iBACd,KAAK5zB,gBAA8BjY,IAAI,GACvC,QACF;AACA,aAAK+mB,KAAI;AAET,YAAI,KAAKgV,aAAY,GAAS,GAAG;AAC/B,cAAI,CAAC,KAAKxV,UAAU;AAClB,iBAAKnQ,MAAMzG,OAAOtR,yBAAyB4V,EAAE;UAC/C;AACA,eAAKuV,oBAAoB;QAC3B,WAAW,KAAKuS,aAAY,GAAW,KAAK,KAAKA,aAAY,EAAU,GAAG;AACxE,gBAAM4vC,WAAW,KAAK5vC,aAAY,GAAW;AAK7C,cAAI,CAAC4vC,SAAU,MAAKvmE,WAAU;AAE9B,eAAKuwB,aACHg2C,WAAW,uBAAuB,0BACpC;AACA,cAAI,CAAC,KAAKv7D,QAAQg2D,yBAAyB;AACzC,kBAAM,KAAKhwD,MACTzG,OAAOpN,6CACP,KAAK2U,MAAM3B,UACX;cACE/S,OAAO,KAAK0U,MAAMhK;YACpB,CACF;UACF;AACA,eAAK6Z,KAAI;AACR/mB,eAAoCwC,QAAQmpE,WACzC,WACA;AACJ,iBAAO,KAAKpB,gBAAgBvqE,IAAkC;QAChE;AAEA,eAAO,KAAKyrE,kBAAkBzrE,MAAgCiU,IAAI,MAAM;MAC1E;MAEA23B,mBACE1+B,OACAjN,MACAD,MACG;AACH,aAAK87B,SAAS97B,MAAM,YAAYkN,KAAK;AACrC,aAAK4uB,SAAS97B,MAAM,OAAO,KAAK8rB,MAAMgD,MAAM9uB,KAAKpC,OAAO,KAAKsZ,MAAMrZ,GAAG,CAAC;AACvEmC,aAAKkN,QAAQA;AACb,aAAK6Z,KAAI;AACT,eAAO,KAAKpS,WAAc3U,MAAMC,IAAI;MACtC;MAEAoR,aAA+BnE,OAAYjN,MAAoB;AAC7D,cAAMD,OAAO,KAAKyU,UAAS;AAC3B,eAAO,KAAKm3B,mBAAmB1+B,OAAOjN,MAAMD,IAAI;MAClD;MAEAsR,mBAAmBpE,OAAY;AAC7B,eAAO,KAAKmE,aAA8BnE,OAAO,eAAe;MAClE;MAEAqE,oBAAoBrE,OAAY;AAC9B,eAAO,KAAKmE,aAA+BnE,OAAO,gBAAgB;MACpE;MAEA2D,mBAAmB3D,OAAY;AAC7B,eAAO,KAAKmE,aAA8BnE,OAAO,eAAe;MAClE;MAGAiE,oBAAoBjE,OAAY;AAC9B,eAAO,KAAKmE,aAA+BnE,OAAO,gBAAgB;MACpE;MAEAoD,mBAAmBpD,OAIhB;AACD,cAAMlN,OAAO,KAAKyU,UAAS;AAC3B,aAAKqnB,SAAS97B,MAAM,OAAO,KAAK8rB,MAAMgD,MAAM9uB,KAAKpC,OAAO,KAAKsZ,MAAMrZ,GAAG,CAAC;AACvEmC,aAAKuQ,UAAUrD,MAAMqD;AACrBvQ,aAAKwQ,QAAQtD,MAAMsD;AACnB,aAAKuW,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,eAAe;MAC9C;MAEAyR,oBAAoBvE,OAAgB;AAClC,cAAMlN,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKkN,QAAQA;AACb,aAAK6Z,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,gBAAgB;MAC/C;MAEAwR,mBAAmB;AACjB,cAAMxR,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,aAAa;MAC5C;MAGA6zC,mCAEEC,YACc;AACd,cAAMv+B,WAAW,KAAK2B,MAAM3B;AAE5B,YAAIuc;AACJ,aAAK/K,KAAI;AACT,aAAKyX,gBAAgBhW,MAAM0S,kBAAmB,CAAA;AAE9C,cAAMwhC,4BAA4B,KAAKxlD,MAAM+W;AAC7C,cAAMg8C,gCAAgC,KAAK/yD,MAAMuX;AACjD,aAAKvX,MAAM+W,yBAAyB;AACpC,aAAK/W,MAAMuX,6BAA6B;AAExC,cAAMm9C,gBAAgB,KAAK10D,MAAM3B;AACjC,cAAMq6B,WAA6C,CAAA;AACnD,cAAMp6B,sBAAsB,IAAIopB,iBAAgB;AAChD,YAAI0M,QAAQ;AACZ,YAAIugC;AACJ,YAAIC;AAEJ,eAAO,CAAC,KAAKl7C,MAAK,EAAU,GAAG;AAC7B,cAAI0a,OAAO;AACTA,oBAAQ;UACV,OAAO;AACL,iBAAKzO,OAEHrnB,IAAAA,oBAAoBkoB,0BAA0B,OAC1C,OACAloB,oBAAoBkoB,qBAC1B;AACA,gBAAI,KAAK9M,MAAK,EAAU,GAAG;AACzBk7C,sCAAwB,KAAK50D,MAAM3B;AACnC;YACF;UACF;AAEA,cAAI,KAAKqb,MAAK,EAAY,GAAG;AAC3B,kBAAMm7C,qBAAqB,KAAK70D,MAAM3B;AACtCs2D,6BAAiB,KAAK30D,MAAM3B;AAC5Bq6B,qBAASh8B,KACP,KAAK46B,eAAe,KAAKuc,iBAAkB,GAAEghB,kBAAkB,CACjE;AAEA,gBAAI,CAAC,KAAKzgB,oBAAmB,EAA2B,GAAG;AACzD;YACF;UACF,OAAO;AACL1b,qBAASh8B,KACP,KAAKk6B,wBACHt4B,qBACA,KAAKg5B,cACP,CACF;UACF;QACF;AAEA,cAAMw9B,cAAc,KAAK90D,MAAMsB;AAC/B,aAAKqkB,OAAM,EAAU;AAErB,aAAK3lB,MAAM+W,yBAAyByuC;AACpC,aAAKxlD,MAAMuX,6BAA6Bw7C;AAExC,YAAIgC,YAAY,KAAKtsC,YAAuCpqB,QAAQ;AACpE,YACEu+B,cACA,KAAKN,iBAAiB5D,QAAQ,MAC7Bq8B,YAAY,KAAK14B,WAAW04B,SAAS,IACtC;AACA,eAAKttC,0BAA0BnpB,mBAAmB;AAClD,eAAKgpB,gBAAgBxD,kBAAiB;AACtC,eAAKwD,gBAAgB/V,KAAI;AACzB,eAAK8rB,qBAAqB03B,WAAWr8B,UAAU,KAAK;AAEpD,iBAAOq8B;QACT;AACA,aAAKztC,gBAAgB/V,KAAI;AAEzB,YAAI,CAACmnB,SAASt4B,QAAQ;AACpB,eAAKlS,WAAW,KAAK8R,MAAMC,eAAe;QAC5C;AACA,YAAI20D,sBAAuB,MAAK1mE,WAAW0mE,qBAAqB;AAChE,YAAID,eAAgB,MAAKzmE,WAAWymE,cAAc;AAClD,aAAKxuC,sBAAsB7nB,qBAAqB,IAAI;AAEpD,aAAKq1C,qBAAqBjb,UAAoC,IAAI;AAClE,YAAIA,SAASt4B,SAAS,GAAG;AACvBwa,gBAAM,KAAK6N,YAAkCisC,aAAa;AAC1D95C,cAAIwwC,cAAc1yB;AAElB,eAAKj7B,WAAWmd,KAAK,oBAAoB;AACzC,eAAKvZ,iBAAiBuZ,KAAKk6C,WAAW;QACxC,OAAO;AACLl6C,gBAAM8d,SAAS,CAAC;QAClB;AAEA,eAAO,KAAKs8B,gBACV32D,UAEAuc,GACF;MACF;MAEAo6C,gBAAgB32D,UAAoB3D,YAAwC;AAC1E,YAAI,CAAC,KAAKxB,QAAQi2D,gCAAgC;AAChD,eAAKvqC,SAASlqB,YAAY,iBAAiB,IAAI;AAC/C,eAAKkqB,SAASlqB,YAAY,cAAc2D,SAAS9X,KAAK;AAEtD,eAAK2uB,wBACHxa,YACA2D,SAAS9X,OACT,KAAKyZ,MAAMsB,cAAc/a,KAC3B;AAEA,iBAAOmU;QACT;AAEA,cAAMu6D,kBACJ,KAAKxsC,YAAuCpqB,QAAQ;AACtD42D,wBAAgBv6D,aAAaA;AAC7B,eAAO,KAAK+C,WAAWw3D,iBAAiB,yBAAyB;MACnE;MAGA34B,iBAAiBhhC,QAAgC;AAC/C,eAAO,CAAC,KAAK+pB,mBAAkB;MACjC;MAEAgX,WACEvzC,MAC+C;AAC/C,YAAI,KAAKuzB,IAAG,EAAS,GAAG;AACtB,iBAAOvzB;QACT;MACF;MAEAwuC,eACExuC,MAEAuV,UACmD;AACnD,eAAOvV;MACT;MAEA2qE,sBAAoE;AAClE,cAAM3qE,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT,YAAI,KAAK6J,MAAK,EAAO,GAAG;AAEtB,gBAAM46C,OAAO,KAAK3/B,iBAChB,KAAK5zB,gBAA8BjY,IAAI,GACvC,KACF;AACA,eAAK+mB,KAAI;AACT,gBAAMqlD,WAAW,KAAKX,kBACpBzrE,MACAwrE,MACA,QACF;AAEA,cACE,CAAC,KAAK9iD,MAAMN,sBACZ,CAAC,KAAKM,MAAMV,WACZ,CAAC,KAAK5X,QAAQ41D,+BACd;AACA,iBAAK5vD,MAAMzG,OAAOlG,qBAAqB2iE,QAAQ;UACjD;AAEA,iBAAOA;QACT;AAEA,eAAO,KAAKC,SAASrsE,IAA+B;MACtD;MAQAqsE,SAAuBrsE,MAAgD;AACrE,aAAKq0C,eAAer0C,IAAI;AAExB,YAAI,KAAKuzB,IAAG,EAAU,GAAG;AACvB,gBAAMze,OAAO,KAAKw3D,cAAa,EAAU;AACzC,eAAKz8B,iBAAiB/6B,IAAI;AAE1B9U,eAAK0W,YAAY5B;QACnB,OAAO;AACL9U,eAAK0W,YAAY,CAAA;QACnB;AAEA,eAAO,KAAK/B,WAAW3U,MAAM,eAAe;MAC9C;MAEAq0C,eAA6Br0C,MAAqC;AAChE,cAAMyhE,WAAW,KAAK7wC,MAAK,EAAW;AACtC,cAAMpa,SAAS,KAAKmzD,gBAAe;AACnC3pE,aAAKwW,SAASA;AACd,YACEirD,aACCjrD,OAAOvW,SAAS,YAAYuW,OAAOvW,SAAS,qBAC7C;AACA,eAAKmW,MAAMzG,OAAO/L,4BAA4B4S,MAAM;QACtD;MACF;MAIA+1D,qBAAqBC,UAAsC;AACzD,cAAM;UAAE5uE;UAAO2X;UAAU1X;UAAKqP;YAAU,KAAKgK;AAC7C,cAAMu1D,YAAY7uE,QAAQ;AAC1B,cAAM8uE,OAAO,KAAK/sC,YAChB3hC,+BAA+BuX,UAAU,CAAC,CAC5C;AACA,YAAIrI,UAAU,MAAM;AAClB,cAAI,CAACs/D,UAAU;AACb,iBAAKp2D,MACHzG,OAAOlL,+BAEPzG,+BACE,KAAKkZ,MAAMsW,+BACX,CACF,CACF;UACF;QACF;AAEA,cAAMm/C,SAAS,KAAK/7C,MAAK,EAAgB;AACzC,cAAMg8C,YAAYD,SAAS,KAAK;AAChC,cAAME,UAAUhvE,MAAM+uE;AACtBF,aAAKx/D,QAAQ;UACX2E,KAAK,KAAKia,MAAMgD,MAAM29C,WAAWI,OAAO,EAAEl1C,QAAQ,UAAU,IAAI;UAChEm1C,QAAQ5/D,UAAU,OAAO,OAAOA,MAAM4hB,MAAM,GAAG89C,SAAS;;AAE1DF,aAAKK,OAAOJ;AACZ,aAAK5lD,KAAI;AACT,cAAMmhD,eAAe,KAAKvzD,WAAW+3D,MAAM,iBAAiB;AAC5D,aAAKn0D,iBACH2vD,cACAlqE,+BAA+B,KAAKkZ,MAAMsB,eAAeo0D,SAAS,CACpE;AACA,eAAO1E;MACT;MAGAzQ,cAA4B+U,UAAsC;AAChE,cAAMxsE,OAAO,KAAKyU,UAAS;AAC3B,YAAIu4D,SAAS,KAAKT,qBAAqBC,QAAQ;AAC/C,cAAMS,SAAS,CAACD,MAAM;AACtB,cAAME,gBAAgB,CAAA;AACtB,eAAO,CAACF,OAAOD,MAAM;AACnBG,wBAAct5D,KAAK,KAAK8jD,0BAA2B,CAAA;AACnD,eAAKp/B,yBAAwB;AAC7B20C,iBAAOr5D,KAAMo5D,SAAS,KAAKT,qBAAqBC,QAAQ,CAAE;QAC5D;AAGAxsE,aAAKsiE,cAAc4K;AACnBltE,aAAKitE,SAASA;AACd,eAAO,KAAKt4D,WAAW3U,MAAM,iBAAiB;MAChD;MAGA03D,4BAAiE;AAC/D,eAAO,KAAK1yB,gBAAe;MAC7B;MAsBAkmB,gBAEEjb,OACA96B,WACAwxD,UACAnxD,qBACG;AACH,YAAImxD,UAAU;AACZ,eAAKhxC,aAAa,gBAAgB;QACpC;AACA,cAAMs0C,gCAAgC,KAAK/yD,MAAMuX;AACjD,aAAKvX,MAAMuX,6BAA6B;AACxC,cAAM0+C,WAAgBhgE,uBAAOoyB,OAAO,IAAI;AACxC,YAAI+L,QAAQ;AACZ,cAAMtrC,OAAO,KAAKyU,UAAS;AAI3BzU,aAAKgsB,aAAa,CAAA;AAClB,aAAKjF,KAAI;AAET,eAAO,CAAC,KAAK6J,MAAMqf,KAAK,GAAG;AACzB,cAAI3E,OAAO;AACTA,oBAAQ;UACV,OAAO;AACL,iBAAKzO,OAAM,EAAS;AACpB,gBAAI,KAAKjM,MAAMqf,KAAK,GAAG;AACrB,mBAAKi6B,4BAEHlqE,IACF;AACA;YACF;UACF;AAEA,cAAIkV;AACJ,cAAIC,WAAW;AACbD,mBAAO,KAAKw2C,qBAAoB;UAClC,OAAO;AACLx2C,mBAAO,KAAKk4D,wBAAwB53D,mBAAmB;AACvD,iBAAKkxD,WAAWxxD,MAAMyxD,UAAUwG,UAAU33D,mBAAmB;UAC/D;AAEA,cACEmxD,YACA,CAAC,KAAKt0D,iBAAiB6C,IAAI,KAC3BA,KAAKjV,SAAS,iBACd;AACA,iBAAKmW,MAAMzG,OAAOnK,uBAAuB0P,IAAI;UAC/C;AAEmC;AAEjC,gBAAIA,KAAKG,WAAW;AAClB,mBAAKymB,SAAS5mB,MAAM,aAAa,IAAI;YACvC;UACF;AAGAlV,eAAKgsB,WAAWpY,KAAKsB,IAAI;QAC3B;AAEA,aAAK6R,KAAI;AAET,aAAK7P,MAAMuX,6BAA6Bw7C;AACxC,YAAIhqE,OAAO;AACX,YAAIkV,WAAW;AACblV,iBAAO;QACR,WAAU0mE,UAAU;AACnB1mE,iBAAO;QACT;AAEA,eAAO,KAAK0U,WAAW3U,MAAMC,IAAI;MACnC;MAEAiqE,4BAA4BlqE,MAAoB;AAC9C,aAAK87B,SAAS97B,MAAM,iBAAiB,KAAKkX,MAAMC,gBAAgB1Z,KAAK;AACrE,aAAKq+B,SAAS97B,MAAM,oBAAoB,KAAKkX,MAAMC,iBAAiB,KAAK;MAC3E;MAKAk2D,yBACEn4D,MAC6C;AAC7C,eACE,CAACA,KAAKR,YACNQ,KAAKnO,IAAI9G,SAAS,iBACjB,KAAK29B,sBAAqB,KACzB,KAAKhN,MAAK,CAAY,KACtB,KAAKA,MAAK,EAAQ;MAExB;MAGAw8C,wBAEE53D,qBACkC;AAClC,YAAIwB,aAAa,CAAA;AACjB,YAAI,KAAK4Z,MAAK,EAAM,GAAG;AACrB,cAAI,KAAKja,UAAU,YAAY,GAAG;AAChC,iBAAKP,MAAMzG,OAAOjF,8BAA8B,KAAKwM,MAAM3B,QAAQ;UACrE;AAIA,iBAAO,KAAKqb,MAAK,EAAM,GAAG;AACxB5Z,uBAAWpD,KAAK,KAAK23C,eAAgB,CAAA;UACvC;QACF;AAEA,cAAMr2C,OAAO,KAAKT,UAAS;AAC3B,YAAItC,UAAU;AACd,YAAIiD,aAAa;AACjB,YAAIG;AAEJ,YAAI,KAAKqb,MAAK,EAAY,GAAG;AAC3B,cAAI5Z,WAAWM,OAAQ,MAAKlS,WAAU;AACtC,iBAAO,KAAK0lD,YAAW;QACzB;AAEA,YAAI9zC,WAAWM,QAAQ;AACrBpC,eAAK8B,aAAaA;AAClBA,uBAAa,CAAA;QACf;AAEA9B,aAAK3C,SAAS;AAEd,YAAIiD,qBAAqB;AACvBD,qBAAW,KAAK2B,MAAM3B;QACxB;AAEA,YAAIhC,cAAc,KAAKggB,IAAG,EAAQ;AAClC,aAAKud,gCAAgC57B,IAAI;AACzC,cAAMyZ,cAAc,KAAKzX,MAAMyX;AAC/B,aAAKg9B,kBAAkBz2C,MAAMM,mBAAmB;AAEhD,YAAI,CAACjC,eAAe,CAACob,eAAe,KAAK0+C,yBAAyBn4D,IAAI,GAAG;AACvE,gBAAM;YAAEnO;UAAK,IAAGmO;AAChB,gBAAMo4D,UAAUvmE,IAAIV;AAGpB,cAAIinE,YAAY,WAAW,CAAC,KAAK9wC,sBAAqB,GAAI;AACxDrqB,sBAAU;AACV,iBAAK+Z,kCAAkCnlB,GAAG;AAC1CwM,0BAAc,KAAKggB,IAAG,EAAQ;AAC9B,iBAAKo4B,kBAAkBz2C,IAAI;UAC7B;AAGA,cAAIo4D,YAAY,SAASA,YAAY,OAAO;AAC1Cl4D,yBAAa;AACb,iBAAK8W,kCAAkCnlB,GAAG;AAC1CmO,iBAAK7U,OAAOitE;AACZ,gBAAI,KAAK18C,MAAK,EAAQ,GAAG;AACvBrd,4BAAc;AACd,mBAAK6C,MAAMzG,OAAOvP,qBAAqB,KAAK8W,MAAM2X,YAAW,GAAI;gBAC/DxuB,MAAMitE;cACR,CAAC;AACD,mBAAKvmD,KAAI;YACX;AACA,iBAAK4kC,kBAAkBz2C,IAAI;UAC7B;QACF;AAEA,eAAO,KAAK67B,kBACV77B,MACAK,UACAhC,aACApB,SACA,OACAiD,YACAI,mBACF;MACF;MAEAirD,kCACEluD,QACQ;AACR,eAAOA,OAAOlS,SAAS,QAAQ,IAAI;MACrC;MAGAiS,6BAA6BC,QAAwC;AACnE,eAAOA,OAAOC;MAChB;MAIAq+B,wBAAwBt+B,QAA8C;AAAA,YAAAg7D;AACpE,cAAMziC,aAAa,KAAK21B,kCAAkCluD,MAAM;AAChE,cAAMC,SAAS,KAAKF,6BAA6BC,MAAM;AAEvD,YAAIC,OAAO8E,WAAWwzB,YAAY;AAChC,eAAK10B,MACH7D,OAAOlS,SAAS,QAAQsP,OAAO7O,iBAAiB6O,OAAO5O,gBACvDwR,MACF;QACF;AAEA,YACEA,OAAOlS,SAAS,WAChBktE,UAAA/6D,OAAOA,OAAO8E,SAAS,CAAC,MAAC,OAAA,SAAzBi2D,QAA2BttE,UAAS,eACpC;AACA,eAAKmW,MAAMzG,OAAO3O,wBAAwBuR,MAAM;QAClD;MACF;MAGA0C,kBAEEC,MACA3B,aACApB,SACAgD,WACAC,YACmC;AACnC,YAAIA,YAAY;AAEd,gBAAMo4D,eAAe,KAAK95D,YACxBwB,MAGA3B,aACc,OACM,OACpB,OACA,cACF;AACA,eAAKs9B,wBAAwB28B,YAAY;AACzC,iBAAOA;QACT;AAEA,YAAIr7D,WAAWoB,eAAe,KAAKqd,MAAe,EAAA,GAAG;AACnD,cAAIzb,UAAW,MAAK/P,WAAU;AAC9B8P,eAAK7U,OAAO;AACZ6U,eAAK3C,SAAS;AACd,iBAAO,KAAKmB,YACVwB,MACA3B,aACApB,SACoB,OACpB,OACA,cACF;QACF;MACF;MAIAmD,oBAEEJ,MACAK,UACAJ,WACAK,qBACqC;AACrCN,aAAKG,YAAY;AAEjB,YAAI,KAAKke,IAAG,EAAS,GAAG;AACtBre,eAAKhI,QAAQiI,YACT,KAAK87B,kBAAkB,KAAK/5B,MAAM3B,QAAQ,IAC1C,KAAKu4B,wBAAwBt4B,mBAAmB;AAEpD,iBAAO,KAAKb,WAAWO,MAAM,gBAAgB;QAC/C;AAEA,YAAI,CAACA,KAAKR,YAAYQ,KAAKnO,IAAI9G,SAAS,cAAc;AAKpD,eAAKmyC,kBAAkBl9B,KAAKnO,IAAIV,MAAM6O,KAAKnO,IAAIoH,IAAIvQ,OAAO,MAAM,KAAK;AAErE,cAAIuX,WAAW;AACbD,iBAAKhI,QAAQ,KAAK+jC,kBAChB17B,UACA8pB,gBAAgBnqB,KAAKnO,GAAG,CAC1B;UACD,WAAU,KAAK6pB,MAAK,EAAM,GAAG;AAC5B,kBAAM2M,qBAAqB,KAAKrmB,MAAM3B;AACtC,gBAAIC,uBAAuB,MAAM;AAC/B,kBAAIA,oBAAoB+nB,uBAAuB,MAAM;AACnD/nB,oCAAoB+nB,qBAAqBA;cAC3C;YACF,OAAO;AACL,mBAAKnnB,MAAMzG,OAAOvL,6BAA6Bm5B,kBAAkB;YACnE;AACAroB,iBAAKhI,QAAQ,KAAK+jC,kBAChB17B,UACA8pB,gBAAgBnqB,KAAKnO,GAAG,CAC1B;UACF,OAAO;AACLmO,iBAAKhI,QAAQmyB,gBAAgBnqB,KAAKnO,GAAG;UACvC;AACAmO,eAAKG,YAAY;AAEjB,iBAAO,KAAKV,WAAWO,MAAM,gBAAgB;QAC/C;MACF;MAEA67B,kBAEE77B,MACAK,UACAhC,aACApB,SACAgD,WACAC,YACAI,qBACG;AACH,cAAMxV,OAAQ,KAAKiV,kBACjBC,MACA3B,aACApB,SACAgD,WACAC,UACF,KACE,KAAKE,oBACHJ,MACAK,UACAJ,WACAK,mBACF;AAEF,YAAI,CAACxV,KAAM,MAAKoF,WAAU;AAE1B,eAAOpF;MACT;MAKA2rD,kBAEEz2C,MAGAM,qBACM;AACN,YAAI,KAAK+d,IAAG,CAAY,GAAG;AACxBre,eAAuCR,WAAW;AACnDQ,eAAKnO,MAAM,KAAK+mC,wBAAuB;AACvC,eAAKjR,OAAM,CAAY;QACzB,OAAO;AAEL,gBAAM;YAAE58B;YAAMiN;cAAU,KAAKgK;AAC7B,cAAInQ;AAEJ,cAAIgd,2BAA2B9jB,IAAI,GAAG;AACpC8G,kBAAM,KAAKu+B,gBAAgB,IAAI;UACjC,OAAO;AACL,oBAAQrlC,MAAI;cACV,KAAA;AACE8G,sBAAM,KAAKwK,oBAAoBrE,KAAK;AACpC;cACF,KAAA;AACEnG,sBAAM,KAAKuK,mBAAmBpE,KAAK;AACnC;cACF,KAAA;AACEnG,sBAAM,KAAK8J,mBAAmB3D,KAAK;AACnC;cACF,KAAA,KAAqB;AAEnB,sBAAMuwB,gBAAgB,KAAKvmB,MAAM3B;AACjC,oBAAIC,uBAAuB,MAAM;AAC/B,sBAAIA,oBAAoBioB,kBAAkB,MAAM;AAC9CjoB,wCAAoBioB,gBAAgBA;kBACtC;gBACF,OAAO;AACL,uBAAKrnB,MAAMzG,OAAOhG,wBAAwB8zB,aAAa;gBACzD;AACA12B,sBAAM,KAAK8M,iBAAgB;AAC3B;cACF;cACA;AACE,oBAAqC5T,SAAI,KAAiB;AACxD8G,wBAAM,KAAKoK,oBAAoBjE,KAAK;AACpC;gBACF;AAEA,qBAAK9H,WAAU;YACnB;UACF;AACC8P,eAAanO,MAAMA;AACpB,cAAI9G,SAAI,KAAqB;AAE3BiV,iBAAKR,WAAW;UAClB;QACF;MACF;MAIAxC,aAAalS,MAAsCmS,SAAwB;AACzEnS,aAAKiU,KAAK;AACVjU,aAAKytE,YAAY;AACjBztE,aAAKszC,QAAQnhC;MACf;MAIAuB,YAEE1T,MACAuT,aACApB,SACAqB,eACAc,kBACArU,MACAsU,eAAwB,OACrB;AACH,aAAKrC,aAAalS,MAAMmS,OAAO;AAC/BnS,aAAKytE,YAAYl6D;AACjB,aAAKmV,MAAMF,MACTL,IAAAA,MAEG5T,eAAY,KAAqB,MACjCD,mBAAgB,KAA4B,EACjD;AACA,aAAKgqB,UAAU9V,MAAMoT,cAAczpB,SAASnS,KAAKytE,SAAS,CAAC;AAC3D,aAAKn7B,oBAAoBtyC,MAAMwT,aAAa;AAC5C,cAAM00D,eAAe,KAAKv7B,2BAA2B3sC,MAAMC,MAAM,IAAI;AACrE,aAAKq+B,UAAU7V,KAAI;AACnB,aAAKC,MAAMD,KAAI;AAEf,eAAOy/C;MACT;MAKAl4B,eAEEC,OACAC,cACAC,SACA36B,qBACuC;AACvC,YAAI26B,SAAS;AACX,eAAKxa,aAAa,gBAAgB;QACpC;AACA,cAAMs0C,gCAAgC,KAAK/yD,MAAMuX;AACjD,aAAKvX,MAAMuX,6BAA6B;AACxC,cAAMzuB,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT/mB,aAAK2qB,WAAW,KAAK2hD,cACnBr8B,OACiB,CAACE,SAClB36B,qBAEAxV,IACF;AACA,aAAKkX,MAAMuX,6BAA6Bw7C;AACxC,eAAO,KAAKt1D,WACV3U,MACAmwC,UAAU,oBAAoB,iBAChC;MACF;MAKAoE,qBAEEv0C,MACAwS,QAGAL,SACAk8B,kBAC2B;AAC3B,aAAK3lB,MAAMF,MAAML,IAAAA,CAAoC;AACrD,YAAI3X,QAAQorB,cAAczpB,SAAS,KAAK;AAIxC,YAAI,CAAC,KAAKye,MAAe,CAAA,KAAK,KAAK0N,UAAU3C,OAAO;AAClDnrB,mBAAK;QACP;AACA,aAAK8tB,UAAU9V,MAAMhY,KAAK;AAC1B,aAAK0B,aAAalS,MAAMmS,OAAO;AAC/B,cAAMuqD,4BAA4B,KAAKxlD,MAAM+W;AAE7C,YAAIzb,QAAQ;AACV,eAAK0E,MAAM+W,yBAAyB;AACpC,eAAKwlB,2BAA2BzzC,MAAMwS,QAAQ67B,gBAAgB;QAChE;AACA,aAAKn3B,MAAM+W,yBAAyB;AACpC,aAAK9Z,kBAAkBnU,MAAM,IAAI;AAEjC,aAAKs+B,UAAU7V,KAAI;AACnB,aAAKC,MAAMD,KAAI;AACf,aAAKvR,MAAM+W,yBAAyByuC;AAEpC,eAAO,KAAK/nD,WAAW3U,MAAM,yBAAyB;MACxD;MAEAyzC,2BACEzzC,MACAwS,QAGA67B,kBACM;AACN,aAAKD,iBAAiB57B,QAAQ67B,kBAAkB,KAAK;AACrDruC,aAAKwS,SAASA;MAChB;MAEAm6B,2BAME3sC,MAAiBC,MAAiBoU,WAAoB,OAAU;AAEhE,aAAKF,kBAAkBnU,MAAM,OAAOqU,QAAQ;AAC5C,eAAO,KAAKM,WAAW3U,MAAMC,IAAI;MACnC;MAGAkU,kBAEEnU,MACAoU,iBACAC,WAAoB,OACd;AACN,cAAMq5D,eAAet5D,mBAAmB,CAAC,KAAKwc,MAAK,CAAU;AAC7D,aAAK4N,gBAAgBhW,MAAM4S,mBAAoB,CAAA;AAE/C,YAAIsyC,cAAc;AAEf1tE,eAA2CmT,OAC1C,KAAK06B,iBAAgB;AACvB,eAAKS,YAAYtuC,MAAM,OAAOoU,iBAAiB,KAAK;QACtD,OAAO;AACL,gBAAM2sD,YAAY,KAAK7pD,MAAM+O;AAG7B,gBAAM8X,YAAY,KAAK7mB,MAAMoW;AAC7B,eAAKpW,MAAMoW,SAAS,CAAA;AAIpB,eAAKgR,UAAU9V,MACb,KAAK8V,UAAU/C,aAAc,IAAA,CAC/B;AACAv7B,eAAKmT,OAAO,KAAKowD,WACf,MACA,OAECoK,4BAAoC;AACnC,kBAAMC,YAAY,CAAC,KAAKC,kBAAkB7tE,KAAKwS,MAAM;AAErD,gBAAIm7D,0BAA0BC,WAAW;AAEvC,mBAAKx3D,MACHzG,OAAOvM,+BAENpD,KAAKK,SAAS,YAAYL,KAAKK,SAAS,kBAEvC,CAAC,CAACL,KAAK+G,MAEL/G,KAAK+G,IAAIoH,IAAItQ,MACbmC,IACN;YACF;AAEA,kBAAM4zC,oBAAoB,CAACmtB,aAAa,KAAK7pD,MAAM+O;AAInD,iBAAKqoB,YACHtuC,MACA,CAAC,KAAKkX,MAAM+O,UAAU,CAAC7R,mBAAmB,CAACC,YAAY,CAACu5D,WACxDx5D,iBACAw/B,iBACF;AAGA,gBAAI,KAAK18B,MAAM+O,UAAUjmB,KAAKiU,IAAI;AAChC,mBAAKg4C,gBACHjsD,KAAKiU,IAAE,IAEP2/B,iBACF;YACF;UACF,CACF;AACA,eAAKtV,UAAU7V,KAAI;AACnB,eAAKvR,MAAMoW,SAASyQ;QACtB;AACA,aAAKS,gBAAgB/V,KAAI;MAC3B;MAEAy0C,kBAAkBl9D,MAAkD;AAClE,eAAOA,KAAKC,SAAS;MACvB;MAEA4tE,kBACEr7D,QACS;AACT,iBAASmT,IAAI,GAAGsL,MAAMze,OAAO8E,QAAQqO,IAAIsL,KAAKtL,KAAK;AACjD,cAAI,CAAC,KAAKu3C,kBAAkB1qD,OAAOmT,CAAC,CAAC,EAAG,QAAO;QACjD;AACA,eAAO;MACT;MAEA2oB,YACEtuC,MACA0zC,iBACAC,iBACAC,oBAA6B,MACvB;AACN,cAAMkY,eAAe,CAACpY,mBAAmB,oBAAIznC,IAAG;AAOhD,cAAM6hE,mBAAmB;UAAE7tE,MAAM;;AACjC,mBAAWmsC,SAASpsC,KAAKwS,QAAQ;AAC/B,eAAKq5C,UACHzf,OACA0hC,kBAAgB,GAEhBhiB,cACAlY,iBACF;QACF;MACF;MAQA04B,cAEEr8B,OACAmb,YACA51C,qBACAw0D,cACyB;AACzB,cAAM3e,OAAgC,CAAA;AACtC,YAAI/f,QAAQ;AAEZ,eAAO,CAAC,KAAK/X,IAAI0c,KAAK,GAAG;AACvB,cAAI3E,OAAO;AACTA,oBAAQ;UACV,OAAO;AACL,iBAAKzO,OAAM,EAAS;AACpB,gBAAI,KAAKjM,MAAMqf,KAAK,GAAG;AACrB,kBAAI+5B,cAAc;AAChB,qBAAKE,4BAA4BF,YAAY;cAC/C;AACA,mBAAKjjD,KAAI;AACT;YACF;UACF;AAEAskC,eAAKz3C,KAAK,KAAKu2D,kBAAkB/e,YAAY51C,mBAAmB,CAAC;QACnE;AACA,eAAO61C;MACT;MAcA8e,kBAEE/e,YACA51C,qBACAu0D,kBAC+D;AAC/D,YAAIpf;AACJ,YAAI,KAAK/5B,MAAK,EAAS,GAAG;AACxB,cAAI,CAACw6B,YAAY;AACf,iBAAKh1C,MAAMzG,OAAO7F,iBAAiB,KAAKoN,MAAM2X,YAAW,GAAI;cAC3DzpB,YAAY;YACd,CAAC;UACH;AACAulD,gBAAM;QACP,WAAU,KAAK/5B,MAAK,EAAY,GAAG;AAClC,gBAAMm7C,qBAAqB,KAAK70D,MAAM3B;AAEtCo1C,gBAAM,KAAKnc,eACT,KAAKsc,YAAYt1C,mBAAmB,GACpCu2D,kBACF;QACD,WAAU,KAAKn7C,MAAK,EAAY,GAAG;AAClC,eAAK+E,aAAa,oBAAoB;AACtC,cAAI,CAACo0C,kBAAkB;AACrB,iBAAK3zD,MAAMzG,OAAO1G,+BAA+B,KAAKiO,MAAM3B,QAAQ;UACtE;AACA,gBAAMvV,OAAO,KAAKyU,UAAS;AAC3B,eAAKsS,KAAI;AACT4jC,gBAAM,KAAKh2C,WAAW3U,MAAM,qBAAqB;QACnD,OAAO;AACL2qD,gBAAM,KAAK7c,wBACTt4B,qBACA,KAAKg5B,cACP;QACF;AACA,eAAOmc;MACT;MAQArlB,gBAAgB+C,SAAiC;AAC/C,cAAMroC,OAAO,KAAKyU,UAAS;AAC3B,cAAMpO,OAAO,KAAKo+D,oBAAoBp8B,OAAO;AAE7C,eAAO,KAAKwD,iBAAiB7rC,MAAMqG,IAAI;MACzC;MAEAwlC,iBACE7rC,MACAqG,MACc;AACdrG,aAAKqG,OAAOA;AACZrG,aAAKmO,IAAIpQ,iBAAiBsI;AAE1B,eAAO,KAAKsO,WAAW3U,MAAM,YAAY;MAC3C;MAEAykE,oBAAoBp8B,SAA2B;AAC7C,YAAIhiC;AAEJ,cAAM;UAAEkP;UAAUtV;YAAS,KAAKiX;AAEhC,YAAI6M,2BAA2B9jB,IAAI,GAAG;AACpCoG,iBAAO,KAAK6Q,MAAMhK;QACpB,OAAO;AACL,eAAK9H,WAAU;QACjB;AAEA,cAAMkf,kBAAiBR,kCAAkC7jB,IAAI;AAE7D,YAAIooC,SAAS;AAGX,cAAI/jB,iBAAgB;AAClB,iBAAKiR,aAAY,GAAQ;UAC3B;QACF,OAAO;AACL,eAAK6c,kBAAkB/rC,MAAMkP,UAAU+O,iBAAgB,KAAK;QAC9D;AAEA,aAAKyC,KAAI;AAET,eAAO1gB;MACT;MAEA+rC,kBACE9rB,MACA/Q,UACA8oD,eACAxoD,WACM;AAEN,YAAIyQ,KAAKhP,SAAS,IAAI;AACpB;QACF;AAGA,YAAI,CAAC4P,kBAAkBZ,IAAI,GAAG;AAC5B;QACF;AAEA,YAAI+3C,iBAAiBz3C,UAAUN,IAAI,GAAG;AACpC,eAAKlQ,MAAMzG,OAAOtG,mBAAmBkM,UAAU;YAC7CjM,SAASgd;UACX,CAAC;AACD;QACF;AAEA,cAAMynD,eAAe,CAAC,KAAK72D,MAAM+O,SAC7BI,iBACAxQ,YACE8Q,2BACAH;AAEN,YAAIunD,aAAaznD,MAAM,KAAKC,QAAQ,GAAG;AACrC,eAAKnQ,MAAMzG,OAAO/F,wBAAwB2L,UAAU;YAClD5Q,cAAc2hB;UAChB,CAAC;AACD;QACF,WAAWA,SAAS,SAAS;AAC3B,cAAI,KAAKgY,UAAU7C,UAAU;AAC3B,iBAAKrlB,MAAMzG,OAAOxE,wBAAwBoK,QAAQ;AAClD;UACF;QACF,WAAW+Q,SAAS,SAAS;AAC3B,cAAI,KAAKgY,UAAU9C,UAAU;AAC3B,iBAAKplB,MAAMzG,OAAOnP,wBAAwB+U,QAAQ;AAClD;UACF;AAEA,cAAI,KAAKmT,MAAMR,eAAe;AAC5B,iBAAK9R,MAAMzG,OAAOlP,qCAAqC8U,QAAQ;AAC/D;UACF;AAEA,eAAKipB,gBAAgBzD,gCAAgCxlB,QAAQ;QAC/D,WAAW+Q,SAAS,aAAa;AAC/B,cAAI,KAAKoC,MAAMT,iCAAiC;AAC9C,iBAAK7R,MAAMzG,OAAOrP,kBAAkBiV,QAAQ;AAC5C;UACF;QACF;MACF;MAIAwzD,uBAAgC;AAC9B,cAAMiF,iBACJ,KAAK1vC,UAAU9C,YACd,KAAKprB,QAAQ01D,6BAA6B,CAAC,KAAKp9C,MAAMd;AAEzD,YAAIomD,kBAAkB,CAAC,KAAKtlD,MAAMd,YAAY;AAC5C,eAAK1Q,MAAM0X,mBAAmB;QAChC;AAEA,eAAOo/C;MACT;MAIAhF,WAAyBzzD,UAAuC;AAC9D,cAAMvV,OAAO,KAAK2/B,YAA+BpqB,QAAQ;AAEzD,aAAKipB,gBAAgB5D,gCACnBjrB,OAAOjP,gCAEPV,IACF;AAEA,YAAI,KAAKuzB,IAAG,EAAQ,GAAG;AACrB,eAAKnd,MAAMzG,OAAOlI,mBAAmBzH,IAAI;QAC3C;AAEA,YAAI,CAAC,KAAK0oB,MAAMd,cAAc,CAAC,KAAKxX,QAAQ01D,2BAA2B;AACrE,cAAI,KAAKsD,iBAAgB,GAAI;AAC3B,iBAAK3/C,8BAA8B;UACrC,OAAO;AACL,iBAAKD,oBAAoB;UAC3B;QACF;AAEA,YAAI,CAAC,KAAKtS,MAAMsX,WAAW;AACzBxuB,eAAKgP,WAAW,KAAK6oD,gBAAgB,MAAM,IAAI;QACjD;AAEA,eAAO,KAAKljD,WAAW3U,MAAM,iBAAiB;MAChD;MAEAopE,mBAA4B;AAC1B,YAAI,KAAK5sC,sBAAqB,EAAI,QAAO;AACzC,cAAM;UAAEv8B;YAAS,KAAKiX;AACtB,eAGEjX,SAAmB,MACnBA,SAAI,MACJA,SAAI,KACJ8kB,gBAAgB9kB,IAAI,KACnBA,SAAI,OAAe,CAAC,KAAKiX,MAAMyX,eAGhC1uB,SAAI,OACJA,SAAI,MAGH,KAAK0W,UAAU,aAAa,KAAK1W,SAAmB;MAEzD;MAIAqnE,aAA4C;AAC1C,cAAMtnE,OAAO,KAAKyU,UAAS;AAE3B,aAAK+pB,gBAAgB5D,gCACnBjrB,OAAOvE,kBAEPpL,IACF;AAEA,aAAK+mB,KAAI;AACT,YAAIknD,aAAa;AACjB,YAAIj/D,WAAgC;AACpC,YAAI,CAAC,KAAKwtB,sBAAqB,GAAI;AACjCyxC,uBAAa,KAAK16C,IAAG,EAAQ;AAC7B,kBAAQ,KAAKrc,MAAMjX,MAAI;YACrB,KAAA;YACA,KAAA;YACA,KAAA;YACA,KAAA;YACA,KAAA;YACA,KAAA;YACA,KAAA;YACA,KAAA;AAIE,kBAAI,CAACguE,WAAY;YAEnB;AACEj/D,yBAAW,KAAK6+B,iBAAgB;UACpC;QACF;AACA7tC,aAAKkuE,WAAWD;AAChBjuE,aAAKgP,WAAWA;AAChB,eAAO,KAAK2F,WAAW3U,MAAM,iBAAiB;MAChD;MAGAuqE,gBAEEvqE,MACoB;AACpB,aAAK+mB,KAAI;AACT/mB,aAAKyW,SAAS,KAAKq3B,wBAAuB;AAC1C,YACE,KAAKn3B,UAAU,kBAAkB,KACC,KAAKA,UAAU,kBAAkB,GACnE;AACA3W,eAAKoQ,UAAU;QACjB;AACA,YAAI,KAAKmjB,IAAG,EAAS,GAAG;AACtB,cAEE,EACE,KAAK5c,UAAU,kBAAkB,KACjC,KAAKA,UAAU,kBAAkB,IAEnC;AACA,iBAAKgf,aAAa,kBAAkB;UACtC;AACA,cAAI,CAAC,KAAK/E,MAAK,EAAU,GAAG;AAC1B5wB,iBAAKoQ,UAAU,KAAK09B,wBAAuB;AAC3C,iBAAKva,IAAG,EAAS;UACnB;QACF;AACA,aAAKsJ,OAAM,EAAU;AACrB,eAAO,KAAKloB,WAAW3U,MAAM,kBAAkB;MACjD;MAKA8nE,6BAA6Bn4B,MAAoBuuB,cAAwB;AAEvE,YAAI,KAAKvnD,UAAU,CAAC,oBAAoB;UAAE0f,UAAU;QAAS,CAAA,CAAC,GAAG;AAC/D,cAAIsZ,KAAK1vC,SAAS,sBAAsB;AAGtC,iBAAKmW,MAAMzG,OAAO/C,gCAAgCsxD,YAAY;UAChE;QACF;MACF;MAEAoK,8BAA8B6F,WAAyB54D,UAAoB;AACzE,YAAI,KAAK64D,kBAAkBD,SAAS,GAAG;AACrC,gBAAMznC,WAAW,KAAK/G,YAAoCpqB,QAAQ;AAClEmxB,mBAASlwB,SAAS23D;AAClB,iBAAO,KAAKx5D,WAAW+xB,UAAU,sBAAsB;QACzD,OAAO;AACL,gBAAMA,WAAW,KAAK/G,YAAuCpqB,QAAQ;AACrE,eAAK84D,mCAAmC94D,QAAQ;AAChDmxB,mBAAS90B,aAAau8D;AACtB,iBAAO,KAAKx5D,WAAW+xB,UAAU,yBAAyB;QAC5D;MACF;MAEA0nC,kBAAkBx8D,YAAmC;AACnD,gBAAQA,WAAW3R,MAAI;UACrB,KAAK;AACH,mBACE,CAAC2R,WAAW8C,YAAY,KAAK05D,kBAAkBx8D,WAAW/B,MAAM;UAEpE,KAAK;AACH,mBAAO;UACT;AACE,mBAAO;QACX;MACF;MAMAw+D,mCAAmC94D,UAA0B;AAO3D,YAAI,KAAKqb,MAAK,EAAS,GAAG;AACxB,gBAAM,KAAKxa,MAAMzG,OAAOjD,qBAAqB,KAAKwK,MAAM3B,QAAQ;QAClE;AAGA,YAAI,CAAC,KAAKqzD,sCAAqC,GAAI;AACjD,eAAKxyD,MAAMzG,OAAO9C,qBAAqB0I,QAAQ;QACjD;MACF;MAQA6yD,wBAA2BkG,UAAsB;AAC/C,cAAMC,yBAAyB,KAAKr3D,MAAMiW;AAC1C,aAAKjW,MAAMiW,eAAe;UAExBC,0BAA0B;UAE1BC,eAAe;;AAGjB,YAAI;AACF,iBAAOihD,SAAQ;QACjB,UAAC;AACC,eAAKp3D,MAAMiW,eAAeohD;QAC5B;MACF;MAUAC,mCAAsCF,UAAsB;AAE1D,YAAI,KAAK33D,UAAU,CAAC,oBAAoB;UAAE0f,UAAU;QAAS,CAAA,CAAC,GAAG;AAE/D,gBAAMk4C,yBAAyB,KAAKr3D,MAAMiW;AAC1C,eAAKjW,MAAMiW,eAAe;YAExBC,0BAA0B;YAE1BC,eAAe;;AAGjB,cAAI;AACF,mBAAOihD,SAAQ;UACjB,UAAC;AACC,iBAAKp3D,MAAMiW,eAAeohD;UAC5B;QACF,OAAO;AAKL,iBAAOD,SAAQ;QACjB;MACF;MAEA9F,+BAAkC8F,UAAsB;AACtD,cAAMG,6BAA6B,KAAKv3D,MAAMsX;AAC9C,aAAKtX,MAAMsX,YAAY;AAEvB,YAAI;AACF,iBAAO8/C,SAAQ;QACjB,UAAC;AACC,eAAKp3D,MAAMsX,YAAYigD;QACzB;MACF;MAEAvH,WAAcoH,UAAsB;AAClC,cAAM99D,QAAQ,KAAK8tB,UAAU/C,aAAY;AACzC,cAAMmzC,iBAAiBC,IAAqB,CAACn+D;AAC7C,YAAIk+D,gBAAgB;AAClB,eAAKpwC,UAAU9V,MAAMhY,QAAK,CAAqB;AAC/C,cAAI;AACF,mBAAO89D,SAAQ;UACjB,UAAC;AACC,iBAAKhwC,UAAU7V,KAAI;UACrB;QACF;AACA,eAAO6lD,SAAQ;MACjB;MAEAtH,cAAiBsH,UAAsB;AACrC,cAAM99D,QAAQ,KAAK8tB,UAAU/C,aAAY;AACzC,cAAMqzC,mBAAmBD,IAAqBn+D;AAC9C,YAAIo+D,kBAAkB;AACpB,eAAKtwC,UAAU9V,MAAMhY,QAAQ,CAAA,CAAmB;AAChD,cAAI;AACF,mBAAO89D,SAAQ;UACjB,UAAC;AACC,iBAAKhwC,UAAU7V,KAAI;UACrB;QACF;AACA,eAAO6lD,SAAQ;MACjB;MAIA/C,yBAA+B;AAC7B,aAAKr0D,MAAMiW,aAAaE,gBAAgB;MAC1C;MAEAi+C,0CAAmD;AACjD,eAAO,KAAKp0D,MAAMiW,aAAaC,4BAA4B;MAC7D;MAEAw7C,wCAAiD;AAC/C,eACE,KAAK1xD,MAAMiW,aAAaE,iBAAiB,QACzC,KAAKnW,MAAMiW,aAAaE,iBAAiB;MAE7C;MAEAo7C,wBAAsCZ,MAA4B;AAChE,cAAMtyD,WAAW,KAAK2B,MAAM3B;AAE5B,aAAK2B,MAAM8V,mBAAmB,KAAK9V,MAAMtZ;AACzC,cAAMqsE,gCAAgC,KAAK/yD,MAAMuX;AACjD,aAAKvX,MAAMuX,6BAA6B;AAExC,cAAMogD,MAAM,KAAK5Q,YACf,KAAK0J,yBAAwB,GAC7BpyD,UACAsyD,IACF;AAEA,aAAK3wD,MAAMuX,6BAA6Bw7C;AAExC,eAAO4E;MACT;MAGA9D,wBAAwD;AACtD,aAAKp1C,aAAa,cAAc;AAChC,cAAM31B,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AACT,YAAI,CAAC,KAAK6J,MAAK,CAAU,GAAG;AAC1B,eAAKxrB,WAAW,MAAI,CAAW;QACjC;AAEA,cAAMqvC,UAAU,KAAK9U,YAAuB,KAAKzoB,MAAMoB,MAAM;AAC7D,aAAKyO,KAAI;AAET,cAAM+nD,eAAe,KAAKhxC,iBAAiC,IAAI;AAC/D,aAAKW,mBAAkB;AAEvB,YAAI;AACFz+B,eAAKmT,OAAO,KAAK47D,aAAat6B,SAAoB,GAAA,QAAQ;QAC5D,UAAC;AACCq6B,uBAAY;QACd;AACA,eAAO,KAAKn6D,WAA+B3U,MAAM,kBAAkB;MACrE;MAGA8wC,gCAEE57B,MACM;MAAC;IACX;AC1nGA,QAAM85D,YAAY;MAAE3uE,MAAI;IAA+B;AAAvD,QACE4uE,cAAc;MAAE5uE,MAAI;;AAkBtB,QAAM6uE,gBAAgB;AAEtB,QAAMC,4BAA4B;AAUlC,aAASC,mBAAmB/+D,QAA+Byb,OAAe;AACxE,eAASnG,IAAI,GAAGA,IAAItV,OAAOiH,QAAQqO,KAAK;AACtC,cAAMpZ,QAAQ8D,OAAOsV,CAAC;AACtB,cAAM;UAAE1lB;QAAM,IAAGsM;AACjB,YAAI,OAAOtM,SAAS,UAAU;AACO;AACjC,gBAAIA,SAAI,KAAqB;AAC3B,oBAAM;gBAAEkO;gBAAKvQ;gBAAOsP;gBAAOrP;cAAK,IAAG0O;AACnC,oBAAM8iE,aAAazxE,QAAQ;AAC3B,oBAAM0xE,aAAatxE,+BAA+BmQ,IAAIvQ,OAAO,CAAC;AAC9DyS,qBAAOsb,OACLhG,GACA,GACA,IAAI+M,MAAM;gBAERzyB,MAAM+kB,iBAAgB,EAAQ;gBAC9B9X,OAAO;gBACPtP;gBACAC,KAAKwxE;gBACL95D,UAAUpH,IAAIvQ;gBACd0a,QAAQg3D;cACV,CAAC,GACD,IAAI58C,MAAM;gBAERzyB,MAAM+kB,iBAAgB,GAAQ;gBAC9B9X;gBACAtP,OAAOyxE;gBACPxxE;gBACA0X,UAAU+5D;gBACVh3D,QAAQnK,IAAItQ;cACb,CAAA,CACH;AACA8nB;AACA;YACF;AAEA,gBAAIZ,gBAAgB9kB,IAAI,GAAG;AACzB,oBAAM;gBAAEkO;gBAAKvQ;gBAAOsP;gBAAOrP;cAAK,IAAG0O;AACnC,oBAAMgjE,eAAe3xE,QAAQ;AAC7B,oBAAM4xE,kBAAkBxxE,+BAA+BmQ,IAAIvQ,OAAO,CAAC;AACnE,kBAAI6xE;AACJ,kBAAI3jD,MAAMC,WAAWnuB,KAAK,MAAC,IAA4B;AACrD6xE,6BAAa,IAAI/8C,MAAM;kBAErBzyB,MAAM+kB,iBAAgB,EAAa;kBACnC9X,OAAO;kBACPtP;kBACAC,KAAK0xE;kBACLh6D,UAAUpH,IAAIvQ;kBACd0a,QAAQk3D;gBACV,CAAC;cACH,OAAO;AACLC,6BAAa,IAAI/8C,MAAM;kBAErBzyB,MAAM+kB,iBAAgB,CAAU;kBAChC9X,OAAO;kBACPtP;kBACAC,KAAK0xE;kBACLh6D,UAAUpH,IAAIvQ;kBACd0a,QAAQk3D;gBACV,CAAC;cACH;AACA,kBAAIE,eACFC,oBACAC,uBACAC;AACF,kBAAI5vE,SAAI,IAAsB;AAE5B0vE,qCAAqB9xE,MAAM;AAC3B+xE,wCAAwB5xE,+BAA+BmQ,IAAItQ,KAAK,EAAE;AAClE6xE,gCAAgBxiE,UAAU,OAAO,OAAOA,MAAM4hB,MAAM,GAAG,EAAE;AACzD+gD,2BAAW,IAAIn9C,MAAM;kBAEnBzyB,MAAM+kB,iBAAgB,EAAa;kBACnC9X,OAAO;kBACPtP,OAAO+xE;kBACP9xE;kBACA0X,UAAUq6D;kBACVt3D,QAAQnK,IAAItQ;gBACd,CAAC;cACH,OAAO;AAEL8xE,qCAAqB9xE,MAAM;AAC3B+xE,wCAAwB5xE,+BAA+BmQ,IAAItQ,KAAK,EAAE;AAClE6xE,gCAAgBxiE,UAAU,OAAO,OAAOA,MAAM4hB,MAAM,GAAG,EAAE;AACzD+gD,2BAAW,IAAIn9C,MAAM;kBAEnBzyB,MAAM+kB,iBAAgB,EAAgB;kBACtC9X,OAAO;kBACPtP,OAAO+xE;kBACP9xE;kBACA0X,UAAUq6D;kBACVt3D,QAAQnK,IAAItQ;gBACd,CAAC;cACH;AACAwS,qBAAOsb,OACLhG,GACA,GACA8pD,YACA,IAAI/8C,MAAM;gBAERzyB,MAAM+kB,iBAAgB,EAAY;gBAClC9X,OAAOwiE;gBACP9xE,OAAO2xE;gBACP1xE,KAAK8xE;gBACLp6D,UAAUi6D;gBACVl3D,QAAQs3D;eACT,GACDC,QACF;AACAlqD,mBAAK;AACL;YACF;UACF;AAEApZ,gBAAMtM,OAAO+kB,iBAAiB/kB,IAAI;QACpC;MACF;AACA,aAAOoQ;IACT;AACe,QAAey/D,kBAAf,cAAuCrJ,iBAAiB;MAQrEjyB,cAEErkC,MACAskC,SACQ;AACRtkC,aAAKskC,UAAU,KAAKs6B,aAAat6B,OAAO;AACxCtkC,aAAK+Z,WAAW,KAAKA;AAErB,YAAI,KAAK9Z,QAAQC,QAAQ;AACvBF,eAAKE,SAAS++D,mBAAmB,KAAK/+D,QAAQ,KAAKyb,KAAK;QAC1D;AAEA,eAAO,KAAKnX,WAAWxE,MAAM,MAAM;MACrC;MAEA4+D,aAEEt6B,SACA52C,MAAuB,KACvBiwB,aAAyB,KAAK1d,QAAQ0d,YAC3B;AACX2mB,gBAAQ3mB,aAAaA;AACrB2mB,gBAAQs7B,cAAc,KAAKC,0BAAyB;AACpD,aAAKp9D,eAAe6hC,SAAS,MAAM,MAAM52C,GAAG;AAC5C,YAAI,KAAK0oB,UAAU;AACjB,cACE,CAAC,KAAKnW,QAAQ+1D,0BACd,KAAKz9C,MAAMjB,iBAAiBoP,OAAO,GACnC;AACA,uBAAW,CAACj0B,WAAW8Z,EAAE,KAAKzN,MAAMuqB,KAAK,KAAK9Q,MAAMjB,gBAAgB,GAAG;AACrE,mBAAKrR,MAAMzG,OAAOxI,uBAAuBuV,IAAI;gBAAE9Z;cAAU,CAAC;YAC5D;UACF;AACA,eAAKk5B,SAAS2Y,SAAS,iBAAiB,KAAKv9B,MAAM0X,gBAAgB;QACrE;AACA,YAAIqhD;AACJ,YAAIpyE,QAAG,KAAa;AAElBoyE,4BAAkB,KAAKt7D,WAAW8/B,SAAS,SAAS;QACtD,OAAO;AAELw7B,4BAAkB,KAAK53D,aACrBo8B,SACA,WACAz2C,+BAA+B,KAAKkZ,MAAM3B,UAAU,EAAE,CACxD;QACF;AACA,eAAO06D;MACT;MAKAC,gBAAgBl+D,MAAgC;AAC9C,cAAML,YAAYK;AAClBL,kBAAU1R,OAAO;AACjB0R,kBAAUzE,QAAQyE,UAAUC;AAC5B,eAAOD,UAAUC;AAEjB,cAAMu+D,mBAAmBx+D,UAAUzE;AACnC,cAAM6E,kBAAkBo+D,iBAAiBjjE;AACzC,cAAM2E,MAAM,KAAKia,MAAMgD,MAAMqhD,iBAAiBvyE,OAAOuyE,iBAAiBtyE,GAAG;AACzE,cAAMi0B,MAAOq+C,iBAAiBjjE,QAAQ2E,IAAIid,MAAM,GAAG,EAAE;AAErD,aAAKgN,SAASq0C,kBAAkB,OAAOt+D,GAAG;AAC1C,aAAKiqB,SAASq0C,kBAAkB,YAAYr+C,GAAG;AAC/C,aAAKgK,SAASq0C,kBAAkB,mBAAmBp+D,eAAe;AAElEo+D,yBAAiBlwE,OAAO;AAExB,eAAO0R;MACT;MAEAq+D,4BAA2D;AACzD,YAAI,CAAC,KAAKp/C,MAAK,EAAwB,GAAG;AACxC,iBAAO;QACT;AAEA,cAAM5wB,OAAO,KAAKyU,UAAS;AAC3BzU,aAAKkN,QAAQ,KAAKgK,MAAMhK;AACxB,aAAK6Z,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,sBAAsB;MACrD;MAEA8mC,QAAiB;AACf,YAAI,CAAC,KAAK/K,aAAY,GAAQ,GAAG;AAC/B,iBAAO;QACT;AACA,eAAO,KAAKq0C,wBAAuB;MACrC;MAEAlN,0BAA0B7zC,IAAY9gB,KAAa;AACjD,YAAIqX,kBAAkByJ,EAAE,GAAG;AACzB8/C,oCAA0Bp7C,YAAYxlB;AACtC,cAAI4gE,0BAA0BtpD,KAAK,KAAKiG,KAAK,GAAG;AAG9C,kBAAMukD,QAAQ,KAAKj8C,eAAe+6C,0BAA0Bp7C,SAAS;AACrE,gBAAI,CAAChO,iBAAiBsqD,KAAK,KAAKA,UAAK,IAA0B;AAC7D,qBAAO;YACT;UACF;AACA,iBAAO;QACT,WAAWhhD,OAAE,IAA0B;AACrC,iBAAO;QACT,OAAO;AACL,iBAAO;QACT;MACF;MAEAihD,uBAAuBjhD,IAAY;AACjC,eACEA,OAAE,MAAoCA,OAA+B;MAEzE;MAMA+gD,0BAAmC;AACjC,cAAMrpD,OAAO,KAAK8M,eAAc;AAChC,cAAMsI,SAAS,KAAK/H,eAAerN,IAAI;AACvC,eACE,KAAKupD,uBAAuBn0C,MAAM,KAClC,KAAK+mC,0BAA0B/mC,QAAQpV,IAAI;MAE/C;MAOAwpD,6CAAsD;AACpD,cAAMxpD,OAAO,KAAKkN,qBAAoB;AACtC,cAAMkI,SAAS,KAAK/H,eAAerN,IAAI;AACvC,eACEoV,WAAmC,OACnC,KAAK+mC,0BAA0B/mC,QAAQpV,IAAI;MAE/C;MAEAypD,mBAA4B;AAC1B,cAAM;UAAEvwE;UAAM0uB;QAAY,IAAI,KAAK+E,UAAS;AAC5C,YAAIzzB,SAAI,OAAe,CAAC0uB,aAAa;AAEnC,iBAAO;QACT,WAAW9K,kBAAkB5jB,IAAI,KAAK,CAAC,KAAKw8B,sBAAqB,GAAI;AACnE,eAAK9G,aAAa,4BAA4B;AAC9C,iBAAO;QACT;MACF;MAEA86C,mBAA4B;AAC1B,YAAI1pD,OAAO,KAAKkN,qBAAoB;AACpC,YAAI,KAAK+H,qBAAqBjV,MAAM,OAAO,GAAG;AAC5CA,iBAAO,KAAKmN,0BAA0BnN,OAAO,CAAC;AAC9C,gBAAMoV,SAAS,KAAK/H,eAAerN,IAAI;AACvC,cAAI,KAAKm8C,0BAA0B/mC,QAAQpV,IAAI,GAAG;AAChD,iBAAK4O,aAAa,4BAA4B;AAC9C,mBAAO;UACT;QACF;AACA,eAAO;MACT;MAGA+6C,kBAA8B;AAC5B,eAAO,KAAK9jC,mBACV+jC,IAAAA,IACqC,IACQ,CAI/C;MACF;MAGAC,yBAAqC;AACnC,eAAO,KAAKhkC,mBACV+jC,IAAAA,KAEG,CAAC,KAAKvgE,QAAQglB,UAAU,KAAKle,MAAM+O,SAChC,IAAC,EAET;MACF;MAEAo9C,gDAEEwN,uBAAgC,OAChC;AACA,YAAIrgE,QAAyB;AAC7B,YAAI,KAAKJ,QAAQglB,UAAU,CAAC,KAAKle,MAAM+O,QAAQ;AAC7CzV,mBAAK;AACL,cAAIqgE,sBAAsB;AACxBrgE,qBAAK;UACP;QACF;AACA,eAAO,KAAKo8B,mBAAmBp8B,KAAK;MACtC;MASAsgE,iBAA6B;AAC3B,eAAO,KAAKlkC,mBAAkB,CAAiC;MACjE;MAIAA,mBAEEp8B,OAOyB;AACzB,YAAIwG,aAAmC;AAEvC,YAAI,KAAK4Z,MAAK,EAAM,GAAG;AACrB5Z,uBAAa,KAAK0zD,gBAAgB,IAAI;QACxC;AACA,eAAO,KAAK1L,sBAAsBxuD,OAAOwG,UAAU;MACrD;MAEAgoD,sBAEExuD,OACAwG,YACa;AACb,cAAM8kD,YAAY,KAAK5kD,MAAMjX;AAC7B,cAAMD,OAAO,KAAKyU,UAAS;AAC3B,cAAMs8D,mBAAmB,CAAC,EAAEvgE,QAAK;AACjC,cAAMwgE,2BAA2B,CAAC,EAChCxgE,QAAK;AAEP,cAAMsC,WAAWtC,QAAK;AAMtB,gBAAQsrD,WAAS;UACf,KAAA;AACE,mBAAO,KAAKmV,4BAA4BjxE,MAAoB,IAAI;UAClE,KAAA;AACE,mBAAO,KAAKixE,4BAA4BjxE,MAAoB,KAAK;UACnE,KAAA;AACE,mBAAO,KAAKkxE,uBAAuBlxE,IAAmC;UACxE,KAAA;AACE,mBAAO,KAAKmxE,sBAAsBnxE,IAAkC;UACtE,KAAA;AACE,mBAAO,KAAKoxE,kBAAkBpxE,IAA8B;UAC9D,KAAA;AACE,gBAAI,KAAKg0B,kBAAiB,MAAE,GAAoB;AAChD,gBAAI,CAACg9C,0BAA0B;AAC7B,mBAAK56D,MACH,KAAKc,MAAM+O,SACPtW,OAAO/D,iBACP,KAAKwE,QAAQglB,SACXzlB,OAAOnH,uBACPmH,OAAOpH,gBACb,KAAK2O,MAAM3B,QACb;YACF;AACA,mBAAO,KAAKymD,uBACVh8D,MACA,OACA,CAAC+wE,oBAAoBC,wBACvB;UACF,KAAA;AACE,gBAAI,CAACD,iBAAkB,MAAK3rE,WAAU;AACtC,mBAAO,KAAK62D,WACV,KAAKgF,oBACHjqD,YACAhX,IACF,GACA,IACF;UAEF,KAAA;AACE,mBAAO,KAAKqxE,iBAAiBrxE,IAA6B;UAC5D,KAAA;AACE,mBAAO,KAAKsxE,qBAAqBtxE,IAAiC;UACpE,KAAA;AACE,mBAAO,KAAKuxE,qBAAqBvxE,IAAiC;UACpE,KAAA;AACE,mBAAO,KAAKwxE,oBAAoBxxE,IAAgC;UAClE,KAAA;AACE,mBAAO,KAAKyxE,kBAAkBzxE,IAA8B;UAE9D,KAAA;AAEE,gBAAI,CAAC,KAAKkX,MAAMyX,eAAe,KAAK8hD,iBAAgB,GAAI;AACtD,kBAAI,CAAC,KAAK1H,qBAAoB,GAAI;AAChC,qBAAK3yD,MAAMzG,OAAOhP,6BAA6BX,IAAI;cACrD,WAAW,CAAC+wE,kBAAkB;AAC5B,qBAAK36D,MAAMzG,OAAOnG,8BAA8BxJ,IAAI;cACtD;AACA,mBAAK+mB,KAAI;AACT,qBAAO,KAAKm1C,kBACVl8D,MACA,aACF;YACF;AACA;UACF,KAAA;AAEE,gBACE,KAAKkX,MAAMyX,eACX,CAAC,KAAK4hD,2CAA0C,GAChD;AACA;YACF;AACA,iBAAK56C,aAAa,4BAA4B;AAC9C,gBAAI,CAAC,KAAKjN,MAAMnC,YAAY,KAAKmC,MAAMhB,YAAY;AACjD,mBAAKtR,MAAMzG,OAAO1F,4BAA4B,KAAKiN,MAAM3B,QAAQ;YACnE,WAAW,CAACw7D,kBAAkB;AAC5B,mBAAK36D,MAAMzG,OAAOnG,8BAA8B,KAAK0N,MAAM3B,QAAQ;YACrE;AACA,mBAAO,KAAK2mD,kBACVl8D,MACA,OACF;UACF,KAAA,KAAc;AACZ,gBAAI,KAAKkX,MAAMyX,aAAa;AAC1B;YACF;AAGA,kBAAM5H,OAAO,KAAK8M,eAAc;AAChC,kBAAMsI,SAAS,KAAK/H,eAAerN,IAAI;AACvC,gBAAIoV,WAAM,IAAkC;AAC1C,kBAAI,CAAC40C,oBAAoB,KAAKt0C,sBAAuB,EAAE;AACvD,kBACE,CAAC,KAAKymC,0BAA0B/mC,QAAQpV,IAAI,KAC5CoV,WAAM,KACN;AACA;cACF;YACF;UACF;UAEA,KAAA,IAAgB;AACd,gBAAI,CAAC40C,kBAAkB;AACrB,mBAAK36D,MAAMzG,OAAOnG,8BAA8B,KAAK0N,MAAM3B,QAAQ;YACrE;UACF;UAEA,KAAA,IAAc;AACZ,kBAAMlV,OAAO,KAAK6W,MAAMhK;AACxB,mBAAO,KAAKgvD,kBACVl8D,MACAK,IACF;UACF;UACA,KAAA;AACE,mBAAO,KAAKqxE,oBAAoB1xE,IAAgC;UAClE,KAAA;AACE,mBAAO,KAAK2xE,mBAAmB3xE,IAA+B;UAChE,KAAA;AACE,mBAAO,KAAKujE,WAAU;UACxB,KAAA;AACE,mBAAO,KAAKqO,oBAAoB5xE,IAAgC;UAClE,KAAA,IAAiB;AACf,kBAAM6xE,oBAAoB,KAAK79C,kBAAiB;AAChD,gBACE69C,sBAAiB,MACjBA,sBAAiB,IACjB;AACA;YACF;UACF;UAEA,KAAA,IAAiB;AACf,gBAAI,CAAC,KAAKzhE,QAAQ61D,+BAA+B,CAACnzD,UAAU;AAC1D,mBAAKsD,MAAMzG,OAAOvG,wBAAwB,KAAK8N,MAAM3B,QAAQ;YAC/D;AAEA,iBAAKwR,KAAI;AAET,gBAAIwnB;AACJ,gBAAIutB,cAAS,IAAiB;AAC5BvtB,uBAAS,KAAK5H,YAAY3mC,IAAmC;AAE7D,kBACEuuC,OAAOtuC,SAAS,wBACf,CAACsuC,OAAO7K,cAAc6K,OAAO7K,eAAe,UAC7C;AACA,qBAAKla,oBAAoB;cAC3B;YACF,OAAO;AACL+kB,uBAAS,KAAKx3B,YACZ/W,MAKAgX,UACF;AAEA,kBACGu3B,OAAOtuC,SAAS,6BACd,CAACsuC,OAAOxH,cAAcwH,OAAOxH,eAAe,YAC9CwH,OAAOtuC,SAAS,2BACd,CAACsuC,OAAOxH,cAAcwH,OAAOxH,eAAe,YAC/CwH,OAAOtuC,SAAS,4BAChB;AACA,qBAAKupB,oBAAoB;cAC3B;YACF;AAEA,iBAAKklB,wBAAwBH,MAAM;AAEnC,mBAAOA;UACT;UAEA,SAAS;AACP,gBAAI,KAAKujC,gBAAe,GAAI;AAC1B,kBAAI,CAACf,kBAAkB;AACrB,qBAAK36D,MACHzG,OAAOpP,uCACP,KAAK2W,MAAM3B,QACb;cACF;AACA,mBAAKwR,KAAI;AACT,qBAAO,KAAKi1C,uBACVh8D,MACA,MACA,CAAC+wE,oBAAoBC,wBACvB;YACF;UACF;QACF;AAOA,cAAMe,YAAY,KAAK76D,MAAMhK;AAC7B,cAAM8/B,OAAO,KAAKhI,gBAAe;AAEjC,YACEnhB,kBAAkBi4C,SAAS,KAC3B9uB,KAAK/sC,SAAS,gBACd,KAAKszB,IAAG,EAAS,GACjB;AACA,iBAAO,KAAKy+C,sBACVhyE,MACA+xE,WACA/kC,MACAx8B,KACF;QACF,OAAO;AACL,iBAAO,KAAKu8B,yBACV/sC,MACAgtC,MACAh2B,UACF;QACF;MACF;MAEA03B,wBAAwB1uC,MAAoB;AAC1C,YAAI,CAAC,KAAKoQ,QAAQ61D,+BAA+B,CAAC,KAAK1/C,UAAU;AAC/D,eAAKnQ,MAAMzG,OAAOpR,qBAAqByB,IAAI;QAC7C;MACF;MAEAiyE,gCAAyC;AACvC,YAAI,KAAKt7D,UAAU,mBAAmB,EAAG,QAAO;AAChD,eACE,KAAKA,UAAU,YAAY,KAC3B,KAAK7C,gBAAgB,cAAc,wBAAwB,MAAM;MAErE;MAQAmtD,oBACEiR,iBACAC,WACAC,YACG;AACH,YAAIF,iBAAiB;AACnB,cAAIC,UAAUn7D,cAAcm7D,UAAUn7D,WAAWM,SAAS,GAAG;AAG3D,gBACE,OAAO,KAAKxD,gBACV,cACA,wBACF,MAAM,WACN;AAIA,mBAAKsC,MACHzG,OAAOlO,6BACP0wE,UAAUn7D,WAAW,CAAC,CACxB;YACF;AACAm7D,sBAAUn7D,WAAWqT,QAAQ,GAAG6nD,eAAe;UACjD,OAAO;AACLC,sBAAUn7D,aAAak7D;UACzB;AACA,eAAKtyC,2BAA2BuyC,WAAWD,gBAAgB,CAAC,CAAC;AAC7D,cAAIE,WAAY,MAAKxyC,2BAA2BwyC,YAAYD,SAAS;QACvE;AACA,eAAOA;MACT;MAEA3R,0BAAmC;AACjC,eAAO,KAAK5vC,MAAK,EAAU;MAC7B;MAEA85C,gBAA8B2H,aAAsC;AAClE,cAAMr7D,aAAa,CAAA;AACnB,WAAG;AACDA,qBAAWpD,KAAK,KAAK23C,eAAgB,CAAA;QACvC,SAAS,KAAK36B,MAAK,EAAM;AAEzB,YAAI,KAAKA,MAAK,EAAW,GAAG;AAC1B,cAAI,CAACyhD,aAAa;AAChB,iBAAKjtE,WAAU;UACjB;AAEA,cAAI,CAAC,KAAK6sE,8BAA6B,GAAI;AACzC,iBAAK77D,MAAMzG,OAAOhO,sBAAsB,KAAKuV,MAAM3B,QAAQ;UAC7D;mBACS,CAAC,KAAKirD,wBAAuB,GAAI;AAC1C,gBAAM,KAAKpqD,MAAMzG,OAAOpG,4BAA4B,KAAK2N,MAAM3B,QAAQ;QACzE;AAEA,eAAOyB;MACT;MAEAu0C,iBAA0C;AACxC,aAAKzyB,gBAAgB,CAAC,cAAc,mBAAmB,CAAC;AAExD,cAAM94B,OAAO,KAAKyU,UAAS;AAC3B,aAAKsS,KAAI;AAET,YAAI,KAAKpQ,UAAU,YAAY,GAAG;AAChC,gBAAMpB,WAAW,KAAK2B,MAAM3B;AAC5B,cAAIy3B;AAEJ,cAAI,KAAKpc,MAAK,EAAU,GAAG;AACzB,kBAAMrb,YAAW,KAAK2B,MAAM3B;AAC5B,iBAAKwR,KAAI;AACTimB,mBAAO,KAAKhI,gBAAe;AAC3B,iBAAKnI,OAAM,EAAU;AACrBmQ,mBAAO,KAAKk/B,gBAAgB32D,WAAUy3B,IAAI;AAE1C,kBAAMslC,iBAAiB,KAAKp7D,MAAM3B;AAClCvV,iBAAK4R,aAAa,KAAK2uD,6BAA6BvzB,IAAI;AACxD,gBACE,KAAKl5B,gBAAgB,cAAc,wBAAwB,MACzD,SACF9T,KAAK4R,eAAeo7B,MACpB;AACA,mBAAK52B,MACHzG,OAAOpO,sCACP+wE,cACF;YACF;UACF,OAAO;AACLtlC,mBAAO,KAAK1H,gBAAgB,KAAK;AAEjC,mBAAO,KAAK/R,IAAG,EAAO,GAAG;AACvB,oBAAMvzB,QAAO,KAAK2/B,YAAgCpqB,QAAQ;AAC1DvV,cAAAA,MAAK6P,SAASm9B;AACd,kBAAI,KAAKpc,MAAK,GAAe,GAAG;AAC9B,qBAAK5a,WAAWC,eACd,KAAKiB,MAAMhK,OACX,KAAKgK,MAAM3B,QACb;AACAvV,gBAAAA,MAAK69B,WAAW,KAAKhqB,iBAAgB;cACvC,OAAO;AACL7T,gBAAAA,MAAK69B,WAAW,KAAKyH,gBAAgB,IAAI;cAC3C;AACAtlC,cAAAA,MAAK0U,WAAW;AAChBs4B,qBAAO,KAAKr4B,WAAW3U,OAAM,kBAAkB;YACjD;AAEAA,iBAAK4R,aAAa,KAAK2uD,6BAA6BvzB,IAAI;UAC1D;QACF,OAAO;AACLhtC,eAAK4R,aAAa,KAAK03D,oBAAmB;QAC5C;AACA,eAAO,KAAK30D,WAAW3U,MAAM,WAAW;MAC1C;MAEAugE,6BAA2CvzB,MAAkC;AAC3E,YAAI,KAAKzZ,IAAG,EAAU,GAAG;AACvB,gBAAMvzB,OAAO,KAAKiY,gBAAkC+0B,IAAI;AACxDhtC,eAAKwW,SAASw2B;AACdhtC,eAAK0W,YAAY,KAAKs9B,6BAA4B,IAAY,KAAK;AACnE,eAAKnE,iBAAiB7vC,KAAK0W,SAAS;AACpC,iBAAO,KAAK/B,WAAW3U,MAAM,gBAAgB;QAC/C;AAEA,eAAOgtC;MACT;MAUAikC,4BACEjxE,MACAojE,SACwC;AACxC,aAAKr8C,KAAI;AAET,YAAI,KAAK2V,iBAAgB,GAAI;AAC3B18B,eAAKsZ,QAAQ;QACf,OAAO;AACLtZ,eAAKsZ,QAAQ,KAAKgsB,gBAAe;AACjC,eAAK3I,UAAS;QAChB;AAEA,aAAKwmC,oBAAoBnjE,MAAMojE,OAAO;AAEtC,eAAO,KAAKzuD,WACV3U,MACAojE,UAAU,mBAAmB,mBAC/B;MACF;MAEAD,oBACEnjE,MACAojE,SACA;AACA,YAAIz9C;AACJ,aAAKA,IAAI,GAAGA,IAAI,KAAKzO,MAAMoW,OAAOhW,QAAQ,EAAEqO,GAAG;AAC7C,gBAAM4sD,MAAM,KAAKr7D,MAAMoW,OAAO3H,CAAC;AAC/B,cAAI3lB,KAAKsZ,SAAS,QAAQi5D,IAAIlsE,SAASrG,KAAKsZ,MAAMjT,MAAM;AACtD,gBAAIksE,IAAIlyE,QAAQ,SAAS+iE,WAAWmP,IAAIlyE,SAAI,IAA0B;AACpE;YACF;AACA,gBAAIL,KAAKsZ,SAAS8pD,QAAS;UAC7B;QACF;AACA,YAAIz9C,MAAM,KAAKzO,MAAMoW,OAAOhW,QAAQ;AAClC,gBAAMrX,OAAOmjE,UAAU,mBAAmB;AAC1C,eAAKhtD,MAAMzG,OAAOxM,sBAAsBnD,MAAM;YAAEC;UAAK,CAAC;QACxD;MACF;MAEAixE,uBACElxE,MACqB;AACrB,aAAK+mB,KAAI;AACT,aAAK4V,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,mBAAmB;MAClD;MAEAwyE,wBAAkD;AAChD,aAAK31C,OAAM,EAAU;AACrB,cAAM/K,MAAM,KAAKkT,gBAAe;AAChC,aAAKnI,OAAM,EAAU;AACrB,eAAO/K;MACT;MAGAq/C,sBAEEnxE,MACoB;AACpB,aAAK+mB,KAAI;AACT,aAAK7P,MAAMoW,OAAO1Z,KAAKo7D,SAAS;AAGhChvE,aAAKmT,OAIH,KAAKq7D,mCAAmC,MAEtC,KAAKsC,eAAc,CACrB;AAEF,aAAK55D,MAAMoW,OAAOpI,IAAG;AAErB,aAAK2X,OAAM,EAAU;AACrB78B,aAAK6lB,OAAO,KAAK2sD,sBAAqB;AACtC,aAAKj/C,IAAG,EAAQ;AAChB,eAAO,KAAK5e,WAAW3U,MAAM,kBAAkB;MACjD;MAUAoxE,kBAEEpxE,MACW;AACX,aAAK+mB,KAAI;AACT,aAAK7P,MAAMoW,OAAO1Z,KAAKo7D,SAAS;AAEhC,YAAIyD,UAAU;AAEd,YAAI,KAAK12C,aAAsB,EAAA,KAAK,KAAKgtC,qBAAoB,GAAI;AAC/D0J,oBAAU,KAAKv7D,MAAM3B;AACrB,eAAKwR,KAAI;QACX;AACA,aAAK2B,MAAMF,MAAK,CAAgB;AAChC,aAAKqU,OAAM,EAAU;AAErB,YAAI,KAAKjM,MAAK,EAAQ,GAAG;AACvB,cAAI6hD,YAAY,MAAM;AACpB,iBAAKrtE,WAAWqtE,OAAO;UACzB;AACA,iBAAO,KAAKC,SAAS1yE,MAAgC,IAAI;QAC3D;AAEA,cAAM2yE,gBAAgB,KAAK52C,aAAY,GAAQ;AAC/C;AACE,gBAAM62C,uBACJ,KAAK72C,aAAY,EAAU,KAAK,KAAK00C,iBAAgB;AACvD,gBAAMoC,4BACJD,wBACC,KAAK72C,aAAsB,GAAA,KAAK,KAAKy0C,iBAAgB;AACxD,gBAAMsC,eACHH,iBAAiB,KAAKvC,wBAAuB,KAC9CyC;AAEF,cAAI,KAAKjiD,MAAK,EAAQ,KAAK,KAAKA,MAAK,EAAU,KAAKkiD,cAAc;AAChE,kBAAMC,WAAW,KAAKt+D,UAAS;AAC/B,gBAAIpU;AACJ,gBAAIuyE,sBAAsB;AACxBvyE,qBAAO;AACP,kBAAI,CAAC,KAAK0oE,qBAAoB,GAAI;AAChC,qBAAK3yD,MAAMzG,OAAOhP,6BAA6B,KAAKuW,MAAM3B,QAAQ;cACpE;AACA,mBAAKwR,KAAI;YACX,OAAO;AACL1mB,qBAAO,KAAK6W,MAAMhK;YACpB;AACA,iBAAK6Z,KAAI;AACT,iBAAKisD,SAASD,UAAU,MAAM1yE,IAAI;AAClC,kBAAMutB,QAAO,KAAKjZ,WAAWo+D,UAAU,qBAAqB;AAE5D,kBAAME,UAAU,KAAKriD,MAAK,EAAO;AACjC,gBAAIqiD,WAAWJ,2BAA2B;AACxC,mBAAKz8D,MAAMzG,OAAO5M,YAAY6qB,KAAI;YACpC;AACA,iBACGqlD,WAAW,KAAKl3C,aAAmB,GAAA,MACpCnO,MAAKkxC,aAAaxnD,WAAW,GAC7B;AACA,qBAAO,KAAK47D,WAAWlzE,MAA2B4tB,OAAM6kD,OAAO;YACjE;AACA,gBAAIA,YAAY,MAAM;AACpB,mBAAKrtE,WAAWqtE,OAAO;YACzB;AACA,mBAAO,KAAKC,SAAS1yE,MAAgC4tB,KAAI;UAC3D;QACF;AAIA,cAAMulD,kBAAkB,KAAKp3C,aAAY,EAAU;AAEnD,cAAMvmB,sBAAsB,IAAIopB,iBAAgB;AAChD,cAAMhR,OAAO,KAAKoX,gBAAgB,MAAMxvB,mBAAmB;AAC3D,cAAM49D,UAAU,KAAKr3C,aAAY,GAAO;AACxC,YAAIq3C,SAAS;AAEX,cAAIT,eAAe;AACjB,iBAAKv8D,MAAMzG,OAAO1M,UAAU2qB,IAAI;UAClC;AAEA,cAEE6kD,YAAY,QACZU,mBACAvlD,KAAK3tB,SAAS,cACd;AAKA,iBAAKmW,MAAMzG,OAAO3M,YAAY4qB,IAAI;UACpC;QACF;AACA,YAAIwlD,WAAW,KAAKxiD,MAAK,EAAO,GAAG;AACjC,eAAK+N,0BAA0BnpB,mBAAmB;AAClD,eAAKM,aAAa8X,MAAkB,IAAI;AACxC,gBAAM3tB,OAAOmzE,UAAU,mBAAmB;AAC1C,eAAKvnB,UAAUj+B,MAAM;YAAE3tB;UAAK,CAAC;AAC7B,iBAAO,KAAKizE,WACVlzE,MAEA4tB,MACA6kD,OACF;QACF,OAAO;AACL,eAAKp1C,sBAAsB7nB,qBAAqB,IAAI;QACtD;AACA,YAAIi9D,YAAY,MAAM;AACpB,eAAKrtE,WAAWqtE,OAAO;QACzB;AACA,eAAO,KAAKC,SAAS1yE,MAAgC4tB,IAAI;MAC3D;MAGAouC,uBAEEh8D,MACAmS,SACAkhE,sBACuB;AACvB,aAAKtsD,KAAI;AACT,eAAO,KAAK2kD,cACV1rE,MACAszE,KACGD,uBAAoB,IAA0C,MAC9DlhE,UAAO,IAA6B,EACzC;MACF;MAGAk/D,iBAA+BrxE,MAA6B;AAC1D,aAAK+mB,KAAI;AACT/mB,aAAK6lB,OAAO,KAAK2sD,sBAAqB;AAGtCxyE,aAAKutC,aAAa,KAAK81B,gDAA+C;AACtErjE,aAAK4tC,YAAY,KAAKra,IAAG,EAAS,IAC9B,KAAK8vC,gDAAiD,IACtD;AACJ,eAAO,KAAK1uD,WAAW3U,MAAM,aAAa;MAC5C;MAEAsxE,qBAAmCtxE,MAAiC;AAClE,YAAI,CAAC,KAAKs+B,UAAU5C,aAAa,CAAC,KAAKtrB,QAAQ21D,4BAA4B;AACzE,eAAK3vD,MAAMzG,OAAOtM,eAAe,KAAK6T,MAAM3B,QAAQ;QACtD;AAEA,aAAKwR,KAAI;AAMT,YAAI,KAAK2V,iBAAgB,GAAI;AAC3B18B,eAAKgP,WAAW;QAClB,OAAO;AACLhP,eAAKgP,WAAW,KAAKg2B,gBAAe;AACpC,eAAKrI,UAAS;QAChB;AAEA,eAAO,KAAKhoB,WAAW3U,MAAM,iBAAiB;MAChD;MAGAuxE,qBAAmCvxE,MAAiC;AAClE,aAAK+mB,KAAI;AACT/mB,aAAKuzE,eAAe,KAAKf,sBAAqB;AAC9C,cAAMgB,QAAqCxzE,KAAKwzE,QAAQ,CAAA;AACxD,aAAK32C,OAAM,CAAU;AACrB,aAAK3lB,MAAMoW,OAAO1Z,KAAKq7D,WAAW;AAClC,aAAKvmD,MAAMF,MAAK,CAAgB;AAMhC,YAAIirD;AACJ,iBAASC,YAAY,CAAC,KAAK9iD,MAAe,CAAA,KAAK;AAC7C,cAAI,KAAKA,MAAc,EAAA,KAAK,KAAKA,MAAiB,EAAA,GAAG;AACnD,kBAAM+iD,SAAS,KAAK/iD,MAAK,EAAS;AAClC,gBAAI6iD,IAAK,MAAK9+D,WAAW8+D,KAAK,YAAY;AAE1CD,kBAAM5/D,KAAM6/D,MAAM,KAAKh/D,UAA0B,CAAA;AACjDg/D,gBAAIlmC,aAAa,CAAA;AACjB,iBAAKxmB,KAAI;AACT,gBAAI4sD,QAAQ;AACVF,kBAAI5tD,OAAO,KAAKmf,gBAAe;YACjC,OAAO;AACL,kBAAI0uC,YAAY;AACd,qBAAKt9D,MACHzG,OAAOvI,0BACP,KAAK8P,MAAMC,eACb;cACF;AACAu8D,2BAAa;AACbD,kBAAI5tD,OAAO;YACb;AACA,iBAAKgX,OAAM,EAAS;UACtB,OAAO;AACL,gBAAI42C,KAAK;AACPA,kBAAIlmC,WAAW35B,KAAK,KAAKg9D,uBAAwB,CAAA;YACnD,OAAO;AACL,mBAAKxrE,WAAU;YACjB;UACF;QACF;AACA,aAAKsjB,MAAMD,KAAI;AACf,YAAIgrD,IAAK,MAAK9+D,WAAW8+D,KAAK,YAAY;AAC1C,aAAK1sD,KAAI;AACT,aAAK7P,MAAMoW,OAAOpI,IAAG;AACrB,eAAO,KAAKvQ,WAAW3U,MAAM,iBAAiB;MAChD;MAEAwxE,oBAAkCxxE,MAAgC;AAChE,aAAK+mB,KAAI;AACT,YAAI,KAAKyV,sBAAqB,GAAI;AAChC,eAAKpmB,MAAMzG,OAAOtI,mBAAmB,KAAK6P,MAAMsB,aAAa;QAC/D;AACAxY,aAAKgP,WAAW,KAAKg2B,gBAAe;AACpC,aAAKrI,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,gBAAgB;MAC/C;MAEA6gE,wBAA+C;AAC7C,cAAMz0B,QAAQ,KAAKiG,iBAAgB;AAEnC,aAAK3pB,MAAMF,MACT,KAAKpY,QAAQglB,UAAUgX,MAAMnsC,SAAS,eAAY,IAE9C,CACN;AACA,aAAK4rD,UACHzf,OACA;UAAEnsC,MAAM;QAAc,GAAC,CAEzB;AAEA,eAAOmsC;MACT;MAEAqlC,kBAEEzxE,MACgB;AAChB,aAAK+mB,KAAI;AAET/mB,aAAK4zE,QAAQ,KAAKrQ,WAAU;AAC5BvjE,aAAK6zE,UAAU;AAEf,YAAI,KAAKjjD,MAAK,EAAU,GAAG;AACzB,gBAAMkjD,SAAS,KAAKr/D,UAAS;AAC7B,eAAKsS,KAAI;AACT,cAAI,KAAK6J,MAAK,EAAU,GAAG;AACzB,iBAAKiM,OAAM,EAAU;AACrBi3C,mBAAO1nC,QAAQ,KAAKy0B,sBAAqB;AACzC,iBAAKhkC,OAAM,EAAU;UACvB,OAAO;AACLi3C,mBAAO1nC,QAAQ;AACf,iBAAK1jB,MAAMF,MAAK,CAAgB;UAClC;AAGAsrD,iBAAO3gE,OAGL,KAAKq7D,mCAAmC,MAEtC,KAAKjL,WAAW,OAAO,KAAK,CAC9B;AAEF,eAAK76C,MAAMD,KAAI;AACfzoB,eAAK6zE,UAAU,KAAKl/D,WAAWm/D,QAAQ,aAAa;QACtD;AAEA9zE,aAAK+zE,YAAY,KAAKxgD,IAAG,EAAY,IAAI,KAAKgwC,WAAY,IAAG;AAE7D,YAAI,CAACvjE,KAAK6zE,WAAW,CAAC7zE,KAAK+zE,WAAW;AACpC,eAAK39D,MAAMzG,OAAOrI,kBAAkBtH,IAAI;QAC1C;AAEA,eAAO,KAAK2U,WAAW3U,MAAM,cAAc;MAC7C;MAIAk8D,kBAEEl8D,MACAK,MACAw+D,0BAAmC,OACZ;AACvB,aAAK93C,KAAI;AACT,aAAKisD,SAAShzE,MAAM,OAAOK,MAAMw+D,uBAAuB;AACxD,aAAKliC,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,qBAAqB;MACpD;MAGA0xE,oBAEE1xE,MACkB;AAClB,aAAK+mB,KAAI;AACT/mB,aAAK6lB,OAAO,KAAK2sD,sBAAqB;AACtC,aAAKt7D,MAAMoW,OAAO1Z,KAAKo7D,SAAS;AAGhChvE,aAAKmT,OAIH,KAAKq7D,mCAAmC,MAEtC,KAAKsC,eAAc,CACrB;AAEF,aAAK55D,MAAMoW,OAAOpI,IAAG;AAErB,eAAO,KAAKvQ,WAAW3U,MAAM,gBAAgB;MAC/C;MAEA2xE,mBAEE3xE,MACiB;AACjB,YAAI,KAAKkX,MAAM+O,QAAQ;AACrB,eAAK7P,MAAMzG,OAAO5D,YAAY,KAAKmL,MAAM3B,QAAQ;QACnD;AACA,aAAKwR,KAAI;AACT/mB,aAAK6P,SAAS,KAAK2iE,sBAAqB;AAGxCxyE,aAAKmT,OAKH,KAAKq7D,mCAAmC,MAEtC,KAAKsC,eAAc,CACrB;AAEF,eAAO,KAAKn8D,WAAW3U,MAAM,eAAe;MAC9C;MAEA4xE,oBAAoB5xE,MAAkD;AACpE,aAAK+mB,KAAI;AACT,eAAO,KAAKpS,WAAW3U,MAAM,gBAAgB;MAC/C;MAGAgyE,sBAEEhyE,MACA+xE,WACA/kC,MACAx8B,OACoB;AACpB,mBAAW8I,SAAS,KAAKpC,MAAMoW,QAAQ;AACrC,cAAIhU,MAAMjT,SAAS0rE,WAAW;AAC5B,iBAAK37D,MAAMzG,OAAOjK,oBAAoBsnC,MAAM;cAC1CrnC,WAAWosE;YACb,CAAC;UACH;QACF;AAEA,cAAM1xE,OAAOgkB,YAAY,KAAKnN,MAAMjX,IAAI,IAAC,IAErC,KAAK2wB,MAAK,EAAW,IAAC,IAEpB;AACN,iBAASjL,IAAI,KAAKzO,MAAMoW,OAAOhW,SAAS,GAAGqO,KAAK,GAAGA,KAAK;AACtD,gBAAMrM,QAAQ,KAAKpC,MAAMoW,OAAO3H,CAAC;AACjC,cAAIrM,MAAM06D,mBAAmBh0E,KAAKpC,OAAO;AACvC0b,kBAAM06D,iBAAiB,KAAK98D,MAAMtZ;AAClC0b,kBAAMjZ,OAAOA;UACf,OAAO;AACL;UACF;QACF;AAEA,aAAK6W,MAAMoW,OAAO1Z,KAAK;UACrBvN,MAAM0rE;UACN1xE;UACA2zE,gBAAgB,KAAK98D,MAAMtZ;QAC7B,CAAC;AAEDoC,aAAKmT,OACH3C,QAAK,IACD,KAAK6yD,gDAAgD,IAAI,IACzD,KAAKyN,eAAc;AAEzB,aAAK55D,MAAMoW,OAAOpI,IAAG;AACrBllB,aAAKsZ,QAAQ0zB;AACb,eAAO,KAAKr4B,WAAW3U,MAAM,kBAAkB;MACjD;MAEA+sC,yBACE/sC,MACAgtC,MAEAh2B,YACA;AACAhX,aAAK4R,aAAao7B;AAClB,aAAKrQ,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,qBAAqB;MACpD;MAMAujE,WAEE1wD,kBAA2B,OAC3B2wD,wBAAiC,MACjCzwD,iBACkB;AAClB,cAAM/S,OAAO,KAAKyU,UAAS;AAC3B,YAAI5B,iBAAiB;AACnB,eAAKqE,MAAMuW,aAAaiH,MAAK;QAC/B;AACA,aAAKmI,OAAM,CAAU;AACrB,YAAI2mC,uBAAuB;AACzB,eAAK96C,MAAMF,MAAK,CAAgB;QAClC;AACA,aAAK5V,eACH5S,MACA6S,iBACA,OAEAE,GAAAA,eACF;AACA,YAAIywD,uBAAuB;AACzB,eAAK96C,MAAMD,KAAI;QACjB;AACA,eAAO,KAAK9T,WAAW3U,MAAM,gBAAgB;MAC/C;MAEAyS,iBAAiBT,MAA4B;AAC3C,eACEA,KAAK/R,SAAS,yBACd+R,KAAKJ,WAAW3R,SAAS,mBACzB,CAAC+R,KAAKJ,WAAWE,MAAMa;MAE3B;MAEAC,eAEE5S,MACA6S,iBACAC,UACAjV,KACAkV,iBACM;AACN,cAAMI,OAAsCnT,KAAKmT,OAAO,CAAA;AACxD,cAAMF,aAAkDjT,KAAKiT,aAC3D,CAAA;AACF,aAAK6nD,4BACH3nD,MACAN,kBAAkBI,aAAamX,QAC/BtX,UACAjV,KACAkV,eACF;MACF;MAKA+nD,4BAEE3nD,MACAF,YACAH,UACAjV,KACAkV,iBACM;AACN,cAAMguD,YAAY,KAAK7pD,MAAM+O;AAC7B,YAAI0nD,yBAAyB;AAC7B,YAAIsG,qBAAqB;AAEzB,eAAO,CAAC,KAAKrjD,MAAM/yB,GAAG,GAAG;AACvB,gBAAMmU,OAAOc,WACT,KAAK49D,gBAAe,IACpB,KAAKE,uBAAsB;AAE/B,cAAI39D,cAAc,CAACghE,oBAAoB;AACrC,gBAAI,KAAKxhE,iBAAiBT,IAAI,GAAG;AAC/B,oBAAML,YAAY,KAAKu+D,gBAAgBl+D,IAAI;AAC3CiB,yBAAWW,KAAKjC,SAAS;AAEzB,kBACE,CAACg8D,0BACDh8D,UAAUzE,MAAMA,UAAU,cAC1B;AACAygE,yCAAyB;AACzB,qBAAKp5C,UAAU,IAAI;cACrB;AAEA;YACF;AACA0/C,iCAAqB;AAErB,iBAAK/8D,MAAMuW,aAAaiH,MAAK;UAC/B;AACAvhB,eAAKS,KAAK5B,IAAI;QAChB;AAEAe,2BAAe,QAAfA,gBAAiB2/B,KAAK,MAAMi7B,sBAAsB;AAElD,YAAI,CAAC5M,WAAW;AACd,eAAKxsC,UAAU,KAAK;QACtB;AAEA,aAAKxN,KAAI;MACX;MAMA2rD,SAEE1yE,MACA4tB,MACgB;AAChB5tB,aAAK4tB,OAAOA;AACZ,aAAK+O,UAAyB,KAAK;AACnC38B,aAAK6lB,OAAO,KAAK+K,MAAK,EAAQ,IAAI,OAAO,KAAKoU,gBAAe;AAC7D,aAAKrI,UAAyB,KAAK;AACnC38B,aAAKipE,SAAS,KAAKr4C,MAAK,EAAU,IAAI,OAAO,KAAKoU,gBAAe;AACjE,aAAKnI,OAAM,EAAU;AAGrB78B,aAAKmT,OAIH,KAAKq7D,mCAAmC,MAEtC,KAAKsC,eAAc,CACrB;AAEF,aAAKpoD,MAAMD,KAAI;AACf,aAAKvR,MAAMoW,OAAOpI,IAAG;AAErB,eAAO,KAAKvQ,WAAW3U,MAAM,cAAc;MAC7C;MAKAkzE,WAEElzE,MACA4tB,MACA6kD,SACW;AACX,cAAMQ,UAAU,KAAKriD,MAAK,EAAO;AACjC,aAAK7J,KAAI;AAET,YAAIksD,SAAS;AACX,cAAIR,YAAY,KAAM,MAAKrtE,WAAWqtE,OAAO;QAC/C,OAAO;AACLzyE,eAAKk0E,QAAQzB,YAAY;QAC3B;AAEA,YACE7kD,KAAK3tB,SAAS,yBACd2tB,KAAKkxC,aAAa,CAAC,EAAElxC,QAAQ,SAC5B,CAACqlD,WACA,CAAC,KAAK7iE,QAAQglB,UACd,KAAKle,MAAM+O,UACX2H,KAAKvtB,SAAS,SACdutB,KAAKkxC,aAAa,CAAC,EAAE7qD,GAAGhU,SAAS,eACnC;AACA,eAAKmW,MAAMzG,OAAO7M,wBAAwB8qB,MAAM;YAC9C3tB,MAAMgzE,UAAU,mBAAmB;UACrC,CAAC;QACH;AAEA,YAAIrlD,KAAK3tB,SAAS,qBAAqB;AACrC,eAAKmW,MAAMzG,OAAO9K,YAAY+oB,MAAM;YAClC9oB,UAAU;cAAE7E,MAAM;YAAe;UACnC,CAAC;QACH;AAEAD,aAAK2vC,OAAO/hB;AACZ5tB,aAAKsoC,QAAQ2qC,UACT,KAAKjuC,gBAAe,IACpB,KAAK8I,wBAAuB;AAChC,aAAKjR,OAAM,EAAU;AAGrB78B,aAAKmT,OAIH,KAAKq7D,mCAAmC,MAEtC,KAAKsC,eAAc,CACrB;AAEF,aAAKpoD,MAAMD,KAAI;AACf,aAAKvR,MAAMoW,OAAOpI,IAAG;AAErB,eAAO,KAAKvQ,WAAW3U,MAAMizE,UAAU,mBAAmB,gBAAgB;MAC5E;MAIAD,SAEEhzE,MACAm0E,OACA9zE,MACAw+D,0BAAmC,OACJ;AAC/B,cAAMC,eAAwC9+D,KAAK8+D,eAAe,CAAA;AAClE9+D,aAAKK,OAAOA;AACZ,mBAAS;AACP,gBAAMmyC,OAAO,KAAK/9B,UAAS;AAC3B,eAAK89B,WAAWC,MAAMnyC,IAAI;AAC1BmyC,eAAK5kB,OAAO,CAAC,KAAK2F,IAAG,EAAM,IACvB,OACA4gD,QACE,KAAKhN,2BAA4B,IACjC,KAAKr5B,wBAAuB;AAElC,cAAI0E,KAAK5kB,SAAS,QAAQ,CAACixC,yBAAyB;AAClD,gBACErsB,KAAKv+B,GAAGhU,SAAS,gBACjB,EAAEk0E,UAAU,KAAKvjD,MAAK,EAAO,KAAK,KAAKmL,aAAmB,GAAA,KAC1D;AACA,mBAAK3lB,MACHzG,OAAOrO,+BACP,KAAK4V,MAAMsB,eACX;gBACEnY,MAAM;cACR,CACF;YACF,YACGA,SAAS,WAAWA,SAAS,WAAWA,SAAS,kBAClD,EAAE,KAAKuwB,MAAK,EAAO,KAAK,KAAKmL,aAAY,GAAO,IAChD;AACA,mBAAK3lB,MACHzG,OAAOrO,+BACP,KAAK4V,MAAMsB,eACX;gBAAEnY;cAAK,CACT;YACF;UACF;AACAy+D,uBAAalrD,KAAK,KAAKe,WAAW69B,MAAM,oBAAoB,CAAC;AAC7D,cAAI,CAAC,KAAKjf,IAAG,EAAS,EAAG;QAC3B;AACA,eAAOvzB;MACT;MAEAuyC,WAEEC,MACAnyC,MACM;AACN,cAAM4T,KAAK,KAAKo+B,iBAAgB;AAChC,YAAIhyC,SAAS,WAAWA,SAAS,eAAe;AAC9C,cAAI4T,GAAGhU,SAAS,kBAAkBgU,GAAGhU,SAAS,iBAAiB;AAC7D,iBAAKmW,MAAMzG,OAAO1E,mCAAmCgJ,GAAG9F,IAAIvQ,KAAK;UACnE;QACF;AACA,aAAKiuD,UACH53C,IACA;UAAEhU,MAAM;QAAqB,GAC7BI,SAAS,QAAK,IAAA,IAChB;AACAmyC,aAAKv+B,KAAKA;MACZ;MAGA+2D,6BAEEhrE,MACsB;AACtB,eAAO,KAAK0rE,cAAc1rE,MAAI,CAAyB;MACzD;MAKA0rE,cAEE1rE,MACAwQ,QAAwB,GACrB;AACH,cAAM4jE,qBAAqB5jE,QAAK;AAChC,cAAM6jE,gBAAgB,CAAC,EAAE7jE,QAAK;AAC9B,cAAMkzD,YAAY2Q,iBAAiB,EAAE7jE,QAAK;AAC1C,cAAM2B,UAAU,CAAC,EAAE3B,QAAK;AAExB,aAAK0B,aAAalS,MAAMmS,OAAO;AAE/B,YAAI,KAAKye,MAAK,EAAQ,GAAG;AACvB,cAAIwjD,oBAAoB;AACtB,iBAAKh+D,MACHzG,OAAOzM,mCACP,KAAKgU,MAAM3B,QACb;UACF;AACA,eAAKwR,KAAI;AACT/mB,eAAKytE,YAAY;QACnB;AAEA,YAAI4G,eAAe;AACjBr0E,eAAKiU,KAAK,KAAKwvD,gBAAgBC,SAAS;QAC1C;AAEA,cAAMhH,4BAA4B,KAAKxlD,MAAM+W;AAC7C,aAAK/W,MAAM+W,yBAAyB;AACpC,aAAKvF,MAAMF,MAAK,CAAmB;AACnC,aAAK8V,UAAU9V,MAAMoT,cAAczpB,SAASnS,KAAKytE,SAAS,CAAC;AAE3D,YAAI,CAAC4G,eAAe;AAClBr0E,eAAKiU,KAAK,KAAKwvD,gBAAe;QAChC;AAEA,aAAKnxB,oBAAoBtyC,MAA0B,KAAK;AAKxD,aAAKwuE,mCAAmC,MAAM;AAE5C,eAAK7hC,2BACH3sC,MACAq0E,gBAAgB,wBAAwB,oBAC1C;QACF,CAAC;AAED,aAAK/1C,UAAU7V,KAAI;AACnB,aAAKC,MAAMD,KAAI;AAEf,YAAI4rD,iBAAiB,CAACD,oBAAoB;AAIxC,eAAK/W,4BAA4Br9D,IAAS;QAC5C;AAEA,aAAKkX,MAAM+W,yBAAyByuC;AACpC,eAAO18D;MACT;MAEAyjE,gBAAgBC,WAAsD;AACpE,eAAOA,aAAa7/C,kBAAkB,KAAK3M,MAAMjX,IAAI,IACjD,KAAKqlC,gBAAiB,IACtB;MACN;MAEAgN,oBAEEtyC,MACAwT,eACM;AACN,aAAKqpB,OAAM,EAAU;AACrB,aAAK2B,gBAAgBhW,MAAMyS,6BAA8B,CAAA;AACzDj7B,aAAKwS,SAAS,KAAKw4C,iBAAgB,IAAA,IAGjCC,KACGz3C,gBAAa,IAAiD,EACnE;AAEA,aAAKgrB,gBAAgB/V,KAAI;MAC3B;MAEA40C,4BAA4Br9D,MAAwB;AAClD,YAAI,CAACA,KAAKiU,GAAI;AAMd,aAAKyU,MAAMC,YACT3oB,KAAKiU,GAAG5N,MACR,CAAC,KAAK+J,QAAQglB,UAAU,KAAKle,MAAM+O,UAAUjmB,KAAKytE,aAAaztE,KAAKszC,QAChE,KAAK5qB,MAAML,sBAAmB,IAAA,OAEJ,IAE9BroB,KAAKiU,GAAG9F,IAAIvQ,KACd;MACF;MAKAq+D,WAEEj8D,MACAmvC,aACAC,YACG;AACH,aAAKroB,KAAI;AAGT,cAAMg6C,YAAY,KAAK7pD,MAAM+O;AAC7B,aAAK/O,MAAM+O,SAAS;AAEpB,aAAKipB,aAAalvC,MAAMmvC,aAAaC,UAAU;AAC/C,aAAKsB,gBAAgB1wC,IAAI;AAEzBA,aAAKmT,OAAO,KAAKwwD,eAAe,CAAC,CAAC3jE,KAAKgQ,YAAY+wD,SAAS;AAE5D,eAAO,KAAKpsD,WACV3U,MACAmvC,cAAc,qBAAqB,iBACrC;MACF;MAEAmB,kBAA2B;AACzB,eAAO,KAAK1f,MAAW,EAAA,KAAK,KAAKA,MAAK,EAAQ,KAAK,KAAKA,MAAK,CAAU;MACzE;MAEAyf,gBAAyB;AACvB,eAAO,KAAKzf,MAAK,EAAU;MAC7B;MAEAhc,kBAAkB7N,KAA4C;AAC5D,eACGA,IAAI9G,SAAS,gBAAgB8G,IAAIV,SAAS,iBAC1CU,IAAI9G,SAAS,mBAAmB8G,IAAImG,UAAU;MAEnD;MAEAqjC,uBAAuBh+B,QAAkD;AACvE,eACE,CAACA,OAAOmC,YAAY,CAACnC,OAAOm3B,UAAU,KAAK90B,kBAAkBrC,OAAOxL,GAAG;MAE3E;MAGA48D,eAEErE,eACAyB,WACa;AACb,aAAK/qD,WAAWwS,MAAK;AAErB,cAAMtR,QAAiC;UACrCo9D,gBAAgB;UAChBhV;;AAEF,YAAItoD,aAA4B,CAAA;AAChC,cAAM1D,YAAY,KAAKmB,UAAS;AAChCnB,kBAAUH,OAAO,CAAA;AAEjB,aAAK0pB,OAAM,CAAU;AAIrB,aAAK2xC,mCAAmC,MAAM;AAE5C,iBAAO,CAAC,KAAK59C,MAAK,CAAU,GAAG;AAC7B,gBAAI,KAAK2C,IAAG,EAAQ,GAAG;AACrB,kBAAIvc,WAAWM,SAAS,GAAG;AACzB,sBAAM,KAAKlB,MACTzG,OAAO/N,oBACP,KAAKsV,MAAMsB,aACb;cACF;AACA;YACF;AAEA,gBAAI,KAAKoY,MAAK,EAAM,GAAG;AACrB5Z,yBAAWpD,KAAK,KAAK23C,eAAgB,CAAA;AACrC;YACF;AAEA,kBAAMjc,SAAS,KAAK76B,UAAS;AAG7B,gBAAIuC,WAAWM,QAAQ;AAErBg4B,qBAAOt4B,aAAaA;AACpB,mBAAK4oB,2BAA2B0P,QAAQt4B,WAAW,CAAC,CAAC;AACrDA,2BAAa,CAAA;YACf;AAEA,iBAAKq4B,iBAAiB/7B,WAAWg8B,QAAQp4B,KAAK;AAE9C,gBAEEo4B,OAAOjvC,SAAS,iBAEhBivC,OAAOt4B,cAEPs4B,OAAOt4B,WAAWM,SAAS,GAC3B;AACA,mBAAKlB,MAAMzG,OAAOjO,sBAAsB4tC,MAAM;YAChD;UACF;QACF,CAAC;AAED,aAAKp4B,MAAM+O,SAAS86C;AAEpB,aAAKh6C,KAAI;AAET,YAAI/P,WAAWM,QAAQ;AACrB,gBAAM,KAAKlB,MAAMzG,OAAO9G,mBAAmB,KAAKqO,MAAM3B,QAAQ;QAChE;AAEA,aAAKS,WAAWyS,KAAI;AAEpB,eAAO,KAAK9T,WAAWrB,WAAW,WAAW;MAC/C;MAIAi8B,6BAEEj8B,WACAg8B,QACS;AACT,cAAMvoC,MAAM,KAAKu+B,gBAAgB,IAAI;AAErC,YAAI,KAAK+K,cAAa,GAAI;AACxB,gBAAM99B,SAAwB+8B;AAG9B/8B,iBAAOlS,OAAO;AACdkS,iBAAOmC,WAAW;AAClBnC,iBAAOxL,MAAMA;AACbwL,iBAAOm3B,SAAS;AAChB,eAAKr2B,gBACHC,WACAf,QACA,OACA,OACoB,OACpB,KACF;AACA,iBAAO;QACT,WAAW,KAAK+9B,gBAAe,GAAI;AACjC,gBAAMp7B,OAAwBo6B;AAG9Bp6B,eAAKR,WAAW;AAChBQ,eAAKnO,MAAMA;AACXmO,eAAKw0B,SAAS;AACdp2B,oBAAUH,KAAKS,KAAK,KAAKiB,mBAAmBK,IAAI,CAAC;AACjD,iBAAO;QACT;AACA,aAAKgX,kCAAkCnlB,GAAG;AAC1C,eAAO;MACT;MAEAsoC,iBAEE/7B,WACAg8B,QACAp4B,OACM;AACN,cAAMuyB,WAAW,KAAK1N,aAAY,GAAW;AAE7C,YAAI0N,UAAU;AACZ,cAAI,KAAK8F,6BAA6Bj8B,WAAWg8B,MAAM,GAAG;AAExD;UACF;AACA,cAAI,KAAK/b,IAAG,CAAU,GAAG;AACvB,iBAAK6rC,sBAAsB9rD,WAAWg8B,MAA8B;AACpE;UACF;QACF;AAEA,aAAK+vB,6BAA6B/rD,WAAWg8B,QAAQp4B,OAAOuyB,QAAQ;MACtE;MAEA41B,6BAEE/rD,WACAg8B,QACAp4B,OACAuyB,UACA;AACA,cAAM8qC,eAAejlC;AACrB,cAAMklC,gBAAgBllC;AACtB,cAAMmlC,aAAanlC;AACnB,cAAMolC,cAAcplC;AACpB,cAAMqlC,eAAerlC;AAErB,cAAM/8B,SAAqDgiE;AAC3D,cAAMK,eAAwDL;AAE9DjlC,eAAO5F,SAASD;AAChB,aAAKqH,gCAAgCxB,MAAM;AAE3C,YAAI,KAAK/b,IAAG,EAAQ,GAAG;AAErBhhB,iBAAOlS,OAAO;AACd,gBAAM6T,gBAAgB,KAAK0c,MAAK,GAAe;AAC/C,eAAKikD,sBAAsBtiE,MAAM;AAEjC,cAAI2B,eAAe;AAEjB,iBAAKu8B,uBAAuBn9B,WAAWkhE,eAAe,MAAM,KAAK;AACjE;UACF;AAEA,cAAI,KAAKjkC,uBAAuBgkC,YAAY,GAAG;AAC7C,iBAAKn+D,MAAMzG,OAAOtO,wBAAwBkzE,aAAaxtE,GAAG;UAC5D;AAEA,eAAKsM,gBACHC,WACAihE,cACA,MACA,OACoB,OACpB,KACF;AAEA;QACF;AAEA,cAAMx4C,eACJ,CAAC,KAAK7kB,MAAMyX,eAAe9K,kBAAkB,KAAK3M,MAAMjX,IAAI;AAC9D,cAAM8G,MAAM,KAAK8tE,sBAAsBvlC,MAAM;AAC7C,cAAMwlC,oBAAoB/4C,eAAgBh1B,IAAqBV,OAAO;AACtE,cAAM0uE,YAAY,KAAK7gE,cAAcnN,GAAG;AACxC,cAAMiuE,6BAA6B,KAAK99D,MAAM3B;AAE9C,aAAKgqD,6BAA6BqV,YAAY;AAE9C,YAAI,KAAKvkC,cAAa,GAAI;AACxB99B,iBAAOlS,OAAO;AAEd,cAAI00E,WAAW;AACb,iBAAKtkC,uBAAuBn9B,WAAWkhE,eAAe,OAAO,KAAK;AAClE;UACF;AAGA,gBAAMhhE,gBAAgB,KAAK+8B,uBAAuBgkC,YAAY;AAC9D,cAAI9gE,oBAAoB;AACxB,cAAID,eAAe;AACjB+gE,yBAAal0E,OAAO;AAGpB,gBAAI6W,MAAMo9D,kBAAkB,CAAC,KAAK39D,UAAU,YAAY,GAAG;AACzD,mBAAKP,MAAMzG,OAAO1N,sBAAsB8E,GAAG;YAC7C;AACA,gBAAIyM,iBAAiB,KAAKmD,UAAU,YAAY,KAAK24B,OAAOytB,UAAU;AACpE,mBAAK3mD,MAAMzG,OAAO/H,uBAAuBb,GAAG;YAC9C;AACAmQ,kBAAMo9D,iBAAiB;AACvB7gE,gCAAoByD,MAAMooD;UAC5B;AAEA,eAAKjsD,gBACHC,WACAihE,cACA,OACA,OACA/gE,eACAC,iBACF;QACF,WAAW,KAAK68B,gBAAe,GAAI;AACjC,cAAIykC,WAAW;AACb,iBAAKE,yBAAyB3hE,WAAWohE,WAAW;UACtD,OAAO;AACL,iBAAKQ,kBAAkB5hE,WAAWmhE,UAAU;UAC9C;QACD,WAAUK,sBAAsB,WAAW,CAAC,KAAKp4C,iBAAgB,GAAI;AAEpE,eAAKxQ,kCAAkCnlB,GAAG;AAC1C,gBAAMwM,cAAc,KAAKggB,IAAG,EAAQ;AAEpC,cAAIqhD,aAAar+D,UAAU;AACzB,iBAAKnR,WAAW4vE,0BAA0B;UAC5C;AAEAziE,iBAAOlS,OAAO;AAEd,gBAAM00E,aAAY,KAAKnkD,MAAK,GAAe;AAC3C,eAAKikD,sBAAsBtiE,MAAM;AACjC,eAAKgtD,6BAA6BqV,YAAY;AAE9C,cAAIG,YAAW;AAEb,iBAAKtkC,uBACHn9B,WACAkhE,eACAjhE,aACA,IACF;UACF,OAAO;AACL,gBAAI,KAAKg9B,uBAAuBgkC,YAAY,GAAG;AAC7C,mBAAKn+D,MAAMzG,OAAOvO,oBAAoBmzE,aAAaxtE,GAAG;YACxD;AAEA,iBAAKsM,gBACHC,WACAihE,cACAhhE,aACA,MACoB,OACpB,KACF;UACF;QACD,YACEuhE,sBAAsB,SAASA,sBAAsB,UACtD,EAAE,KAAKlkD,MAAa,EAAA,KAAK,KAAK8L,iBAAkB,IAChD;AAGA,eAAKxQ,kCAAkCnlB,GAAG;AAC1CwL,iBAAOlS,OAAOy0E;AAEd,gBAAMC,aAAY,KAAKnkD,MAAK,GAAe;AAC3C,eAAKikD,sBAAsBN,YAAY;AAEvC,cAAIQ,YAAW;AAEb,iBAAKtkC,uBAAuBn9B,WAAWkhE,eAAe,OAAO,KAAK;UACpE,OAAO;AACL,gBAAI,KAAKjkC,uBAAuBgkC,YAAY,GAAG;AAC7C,mBAAKn+D,MAAMzG,OAAOxO,uBAAuBozE,aAAaxtE,GAAG;YAC3D;AACA,iBAAKsM,gBACHC,WACAihE,cACA,OACA,OACoB,OACpB,KACF;UACF;AAEA,eAAK1jC,wBAAwB0jC,YAAY;QAC1C,WAAUO,sBAAsB,cAAc,CAAC,KAAKp4C,iBAAgB,GAAI;AACvE,eAAK/G,aAAa,wBAAwB;AAC1C,eAAKzJ,kCAAkCnlB,GAAG;AAG1C,gBAAMguE,aAAY,KAAKnkD,MAAK,GAAe;AAC3C,eAAKikD,sBAAsBJ,UAAU;AACrC,eAAKU,0BAA0B7hE,WAAWqhE,cAAcI,UAAS;QACnE,WAAW,KAAKr4C,iBAAgB,GAAI;AAElC,cAAIq4C,WAAW;AACb,iBAAKE,yBAAyB3hE,WAAWohE,WAAW;UACtD,OAAO;AACL,iBAAKQ,kBAAkB5hE,WAAWmhE,UAAU;UAC9C;QACF,OAAO;AACL,eAAKrvE,WAAU;QACjB;MACF;MAGAyvE,sBAEEvlC,QAC6C;AAC7C,cAAM;UAAErvC;UAAMiN;YAAU,KAAKgK;AAC7B,aACGjX,SAAgB,OAAIA,SAAkB,QACvCqvC,OAAO5F,UACPx8B,UAAU,aACV;AACA,eAAKkJ,MAAMzG,OAAOjH,iBAAiB,KAAKwO,MAAM3B,QAAQ;QACxD;AAEA,YAAItV,SAAI,KAAqB;AAC3B,cAAIiN,UAAU,eAAe;AAC3B,iBAAKkJ,MAAMzG,OAAOzO,8BAA8B,KAAKgW,MAAM3B,QAAQ;UACrE;AACA,gBAAMxO,MAAM,KAAK8M,iBAAgB;AACjCy7B,iBAAOvoC,MAAMA;AACb,iBAAOA;QACT;AAEA,aAAK4kD,kBAAkBrc,MAAM;AAC7B,eAAOA,OAAOvoC;MAChB;MAEAq4D,sBAEE9rD,WACAg8B,QAKA;AAAA,YAAA8lC;AAEA,aAAK1sD,MAAMF,MACTL,KAAAA,MAAwC,EAC1C;AAEA,cAAM4V,YAAY,KAAK7mB,MAAMoW;AAC7B,aAAKpW,MAAMoW,SAAS,CAAA;AAGpB,aAAKgR,UAAU9V,MAAK,CAAgB;AACpC,cAAMrV,OAAuBm8B,OAAOn8B,OAAO,CAAA;AAC3C,aAAK2nD,4BAA4B3nD,MAAMiX,QAAW,OAAK,CAAW;AAClE,aAAKkU,UAAU7V,KAAI;AACnB,aAAKC,MAAMD,KAAI;AACf,aAAKvR,MAAMoW,SAASyQ;AACpBzqB,kBAAUH,KAAKS,KAAK,KAAKe,WAA0B26B,QAAQ,aAAa,CAAC;AACzE,aAAA8lC,qBAAI9lC,OAAOt4B,eAAPo+D,QAAAA,mBAAmB99D,QAAQ;AAC7B,eAAKlB,MAAMzG,OAAO9N,sBAAsBytC,MAAM;QAChD;MACF;MAEA4lC,kBAEE5hE,WACA4B,MACA;AACA,YAAI,CAACA,KAAKR,YAAY,KAAKE,kBAAkBM,KAAKnO,GAAG,GAAG;AAGtD,eAAKqP,MAAMzG,OAAO1O,uBAAuBiU,KAAKnO,GAAG;QACnD;AAEAuM,kBAAUH,KAAKS,KAAK,KAAKiB,mBAAmBK,IAAI,CAAC;MACnD;MAEA+/D,yBAEE3hE,WACA4B,MACA;AACA,cAAMlV,OAAO,KAAKgV,0BAA0BE,IAAI;AAChD5B,kBAAUH,KAAKS,KAAK5T,IAAI;AAExB,aAAKgW,WAAWyjB,mBACd,KAAKzlB,iBAAiBhU,KAAK+G,GAAG,GAAC,GAE/B/G,KAAK+G,IAAIoH,IAAIvQ,KACf;MACF;MAEAu3E,0BAEE7hE,WACA4B,MACA6/D,WACA;AACA,YAAI,CAACA,aAAa,CAAC7/D,KAAKR,YAAY,KAAKE,kBAAkBM,KAAKnO,GAAG,GAAG;AAGpE,eAAKqP,MAAMzG,OAAO1O,uBAAuBiU,KAAKnO,GAAG;QACnD;AAEA,cAAM/G,OAAO,KAAK6/D,2BAA2B3qD,IAAI;AACjD5B,kBAAUH,KAAKS,KAAK5T,IAAI;AAExB,YAAI+0E,WAAW;AACb,eAAK/+D,WAAWyjB,mBACd,KAAKzlB,iBAAiBhU,KAAK+G,GAAoB,GAAC,GAEhD/G,KAAK+G,IAAIoH,IAAIvQ,KACf;QACF;MACF;MAEAyV,gBAEEC,WACAf,QACAgB,aACApB,SACAqB,eACAC,mBACM;AACNH,kBAAUH,KAAKS,KACb,KAAKF,YACHnB,QACAgB,aACApB,SACAqB,eACAC,mBACA,eACA,IACF,CACF;MACF;MAEAg9B,uBAEEn9B,WACAf,QACAgB,aACApB,SACM;AACN,cAAMnS,OAAO,KAAK0T,YAChBnB,QACAgB,aACApB,SACoB,OACpB,OACA,sBACA,IACF;AACAmB,kBAAUH,KAAKS,KAAK5T,IAAI;AAExB,cAAMK,OACJL,KAAKK,SAAS,QACVL,KAAK0pC,SAAM,IAAA,IAGX1pC,KAAKK,SAAS,QACZL,KAAK0pC,SAAM,IAAA,IAEuB;AAE1C,aAAKo2B,iCAAiC9/D,MAAMK,IAAI;MAClD;MAEAy/D,iCACE9/D,MACAK,MACA;AACA,aAAK2V,WAAWyjB,mBACd,KAAKzlB,iBAAiBhU,KAAK+G,GAAoB,GAC/C1G,MACAL,KAAK+G,IAAIoH,IAAIvQ,KACf;MACF;MAGA2hE,6BAEEC,cACM;MAAC;MAGTxqD,0BAEEhV,MACwB;AACxB,aAAKq1E,iBAAiBr1E,IAAI;AAC1B,aAAK28B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,sBAAsB;MACrD;MAGA6U,mBAAiC7U,MAAwC;AACvE,aAAKq1E,iBAAiBr1E,IAAI;AAC1B,aAAK28B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,eAAe;MAC9C;MAEA6/D,2BAEE7/D,MACyB;AACzB,aAAKq1E,iBAAiBr1E,IAAI;AAC1B,aAAK28B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,uBAAuB;MACtD;MAGAq1E,iBAEEr1E,MAGM;AACN,aAAK0oB,MAAMF,MAAML,KAAAA,EAAiC;AAClD,aAAKqW,gBAAgBhW,MAAM4S,mBAAoB,CAAA;AAC/C,aAAKkD,UAAU9V,MAAK,CAAgB;AACpCxoB,aAAKkN,QAAQ,KAAKqmB,IAAG,EAAM,IAAI,KAAKua,wBAAyB,IAAG;AAChE,aAAKtP,gBAAgB/V,KAAI;AACzB,aAAK6V,UAAU7V,KAAI;AACnB,aAAKC,MAAMD,KAAI;MACjB;MAEAymB,aACElvC,MACAmvC,aACAC,YACAxmB,cAAwB,MAClB;AACN,YAAI/E,kBAAkB,KAAK3M,MAAMjX,IAAI,GAAG;AACtCD,eAAKiU,KAAK,KAAKqxB,gBAAe;AAC9B,cAAI6J,aAAa;AACf,iBAAKod,0BAA0BvsD,KAAKiU,IAAI2U,WAAW;UACrD;QACF,OAAO;AACL,cAAIwmB,cAAc,CAACD,aAAa;AAC9BnvC,iBAAKiU,KAAK;UACZ,OAAO;AACL,kBAAM,KAAKmC,MAAMzG,OAAO5J,kBAAkB,KAAKmR,MAAM3B,QAAQ;UAC/D;QACF;MACF;MAGAm7B,gBAA8B1wC,MAA6B;AACzDA,aAAKgQ,aAAa,KAAKujB,IAAG,EAAY,IAAI,KAAK+1C,oBAAqB,IAAG;MACzE;MAKAvyD,YAEE/W,MAKAgX,YACa;AACb,cAAMqkD,yBAAyB,KAAKmD,sBAClCx+D,MACe,IACjB;AACA,cAAMs1E,aAAa,KAAKzR,iCACtB7jE,MACAq7D,sBACF;AACA,cAAMka,oBAAoB,CAACD,cAAc,KAAK/hD,IAAG,EAAS;AAC1D,cAAMiiD,UAAUD,qBAAqB,KAAKxmC,cAAc/uC,IAAI;AAC5D,cAAMivC,eACJumC,WAAW,KAAKxmC,mCAAmChvC,IAAI;AACzD,cAAMy1E,sBACJF,sBAAsB,CAACtmC,gBAAgB,KAAK1b,IAAY,EAAA;AAC1D,cAAMmiD,iBAAiBJ,cAAcE;AAErC,YAAIA,WAAW,CAACvmC,cAAc;AAC5B,cAAIqmC,WAAY,MAAKlwE,WAAU;AAC/B,cAAI4R,YAAY;AACd,kBAAM,KAAKZ,MAAMzG,OAAOxF,4BAA4BnK,IAAI;UAC1D;AACA,eAAK8uC,gBAAgB9uC,MAAM,IAAI;AAE/B,iBAAO,KAAK2U,WAAW3U,MAAM,sBAAsB;QACrD;AAEA,cAAM21E,gBAAgB,KAAKC,gCAAgC51E,IAAI;AAE/D,YAAIs1E,cAAcC,qBAAqB,CAACC,WAAW,CAACG,eAAe;AACjE,eAAKvwE,WAAW,MAAI,CAAW;QACjC;AAEA,YAAI6pC,gBAAgBwmC,qBAAqB;AACvC,eAAKrwE,WAAW,MAAI,EAAU;QAChC;AAEA,YAAIywE;AACJ,YAAIH,kBAAkBC,eAAe;AACnCE,2BAAiB;AACjB,cAAI7+D,YAAY;AACd,kBAAM,KAAKZ,MAAMzG,OAAOxF,4BAA4BnK,IAAI;UAC1D;AACA,eAAK8uC,gBACH9uC,MACA01E,cACF;QACF,OAAO;AACLG,2BAAiB,KAAKC,4BACpB91E,IACF;QACF;AAEA,YAAI01E,kBAAkBC,iBAAiBE,gBAAgB;AAAA,cAAAE;AACrD,gBAAM/qC,QAAQhrC;AACd,eAAK+jE,YAAY/4B,OAAO,MAAM,OAAO,CAAC,CAACA,MAAMv0B,MAAM;AACnD,gBAAIs/D,qBAAA/qC,MAAMxzB,gBAANu+D,OAAAA,SAAAA,mBAAmB91E,UAAS,oBAAoB;AAClD,iBAAKghE,oBAAoBjqD,YAAYg0B,MAAMxzB,aAAawzB,KAAK;UAC9D,WAAUh0B,YAAY;AACrB,kBAAM,KAAKZ,MAAMzG,OAAOxF,4BAA4BnK,IAAI;UAC1D;AACA,iBAAO,KAAK2U,WAAWq2B,OAAO,wBAAwB;QACxD;AAEA,YAAI,KAAKzX,IAAG,EAAY,GAAG;AACzB,gBAAMyX,QAAQhrC;AAEd,gBAAMwyC,OAAO,KAAKrF,6BAA4B;AAC9CnC,gBAAMxzB,cAAcg7B;AAEpB,cAAIA,KAAKvyC,SAAS,oBAAoB;AACpC,iBAAKghE,oBAAoBjqD,YAAYw7B,MAA4BxH,KAAK;UACvE,WAAUh0B,YAAY;AACrB,kBAAM,KAAKZ,MAAMzG,OAAOxF,4BAA4BnK,IAAI;UAC1D;AAEA,eAAK+jE,YAAY/4B,OAAO,MAAM,IAAI;AAElC,iBAAO,KAAKr2B,WAAWq2B,OAAO,0BAA0B;QAC1D;AAEA,aAAK5lC,WAAW,MAAI,CAAW;MACjC;MAEA2pC,cACE/uC,MACmE;AACnE,eAAO,KAAKuzB,IAAG,EAAQ;MACzB;MAEAswC,iCACE7jE,MAKAq7D,wBAC0C;AAC1C,YAAIA,0BAA0B,KAAKnuB,yBAAwB,GAAI;AAE7D,eAAKvX,aAAa,qBAAqB0lC,0BAAAA,OAAAA,SAAAA,uBAAwBltD,IAAIvQ,KAAK;AACxE,gBAAMqW,KAAKonD,0BAA0B,KAAK/1B,gBAAgB,IAAI;AAC9D,gBAAM+L,YAAY,KAAKp5B,gBAA0ChE,EAAE;AACnEo9B,oBAAUj6B,WAAWnD;AACpBjU,eAA0CqX,aAAa,CACtD,KAAK1C,WAAW08B,WAAW,wBAAwB,CAAC;AAEtD,iBAAO;QACT;AACA,eAAO;MACT;MAEArC,mCACEhvC,MAC0C;AAC1C,YAAI,KAAK+7B,aAAY,EAAO,GAAG;AAAA,cAAAxsB,MAAAymE;AAC7B,WAAAA,mBAAAzmE,OAACvP,MAA0CqX,eAAU2+D,OAAAA,kBAArDzmE,KAA2C8H,aAAe,CAAA;AAE1D,gBAAMg6B,YAAY,KAAK1R,YACrB,KAAKzoB,MAAMC,eACb;AAEA,eAAK4P,KAAI;AAETsqB,oBAAUj6B,WAAW,KAAK+qD,sBAAqB;AAC9CniE,eAA0CqX,WAAWzD,KACpD,KAAKe,WAAW08B,WAAW,0BAA0B,CACvD;AACA,iBAAO;QACT;AACA,eAAO;MACT;MAEAukC,gCACE51E,MAC0C;AAC1C,YAAI,KAAK4wB,MAAK,CAAU,GAAG;AACzB,gBAAMoa,QAAQhrC;AAEd,cAAI,CAACgrC,MAAM3zB,WAAY2zB,OAAM3zB,aAAa,CAAA;AAC1C,gBAAM4+D,eAAejrC,MAAMjE,eAAe;AAC1CiE,gBAAM3zB,WAAWzD,KAAK,GAAG,KAAKi7B,sBAAsBonC,YAAY,CAAC;AAEjEjrC,gBAAMv0B,SAAS;AACfu0B,gBAAMxzB,cAAc;AACpB,cAAqC,KAAKb,UAAU,kBAAkB,GAAG;AACvEq0B,kBAAMkrC,aAAa,CAAA;UACrB;AAEA,iBAAO;QACT;AACA,eAAO;MACT;MAEAJ,4BAEE91E,MACS;AACT,YAAI,KAAKitC,6BAA4B,GAAI;AACvCjtC,eAAKqX,aAAa,CAAA;AAClBrX,eAAKyW,SAAS;AACd,cAAqC,KAAKE,UAAU,kBAAkB,GAAG;AACvE3W,iBAAKk2E,aAAa,CAAA;UACpB;AACAl2E,eAAKwX,cAAc,KAAKm3B,uBAAuB3uC,IAAI;AACnD,iBAAO;QACT;AACA,eAAO;MACT;MAEA8xE,kBAA2B;AACzB,YAAI,CAAC,KAAK/1C,aAAY,EAAU,EAAG,QAAO;AAC1C,cAAMhV,OAAO,KAAKkN,qBAAoB;AACtC,eAAO,KAAK+H,qBAAqBjV,MAAM,UAAU;MACnD;MAEAomB,+BAE6C;AAC3C,cAAMH,OAAO,KAAKv4B,UAAS;AAE3B,YAAI,KAAKmc,MAAK,EAAa,GAAG;AAC5B,eAAK7J,KAAI;AACT,iBAAO,KAAK2kD,cACV1+B,MACAsmC,IAAAA,CACF;QACF,WAAW,KAAKxB,gBAAe,GAAI;AACjC,eAAK/qD,KAAI;AACT,eAAKA,KAAI;AACT,iBAAO,KAAK2kD,cACV1+B,MACAsmC,IAAAA,IAC8B,CAEhC;QACF;AAEA,YAAI,KAAK1iD,MAAK,EAAU,GAAG;AACzB,iBAAO,KAAKqrC,WAAWjvB,MAAmC,MAAM,IAAI;QACtE;AAEA,YAAI,KAAKpc,MAAK,EAAM,GAAG;AACrB,cACE,KAAKja,UAAU,YAAY,KAC3B,KAAK7C,gBAAgB,cAAc,wBAAwB,MAAM,MACjE;AACA,iBAAKsC,MAAMzG,OAAOnO,uBAAuB,KAAK0V,MAAM3B,QAAQ;UAC9D;AACA,iBAAO,KAAK0mD,WACV,KAAKgF,oBACH,KAAKyJ,gBAAgB,KAAK,GAC1B,KAAKj2D,UAAS,CAChB,GACA,MACA,IACF;QACF;AAEA,YAAI,KAAKmc,MAAe,EAAA,KAAK,KAAKA,MAAK,EAAQ,KAAK,KAAKkW,MAAK,GAAI;AAChE,gBAAM,KAAK1wB,MAAMzG,OAAOvF,0BAA0B,KAAK8M,MAAM3B,QAAQ;QACvE;AAEA,cAAM0a,MAAM,KAAK6d,wBAAuB;AACxC,aAAKnR,UAAS;AACd,eAAO1M;MACT;MAGA0e,uBAGE3uC,MACkC;AAClC,YAAI,KAAK4wB,MAAK,EAAU,GAAG;AACzB,gBAAM5wB,QAAO,KAAKi8D,WAChB,KAAKxnD,UAAS,GACd,MACA,KACF;AACA,iBAAOzU;QACT;AACA,eAAO,KAAK4wE,uBAAsB;MACpC;MAEA1jC,2BAAoC;AAClC,cAAM;UAAEjtC;YAAS,KAAKiX;AACtB,YAAI2M,kBAAkB5jB,IAAI,GAAG;AAC3B,cAAKA,SAAI,MAAkB,CAAC,KAAKiX,MAAMyX,eAAgB1uB,SAAI,KAAc;AACvE,mBAAO;UACT;AACA,eACGA,SAAiB,OAAIA,SAAI,QAC1B,CAAC,KAAKiX,MAAMyX,aACZ;AACA,kBAAM;cAAE1uB,MAAMk2E;YAAS,IAAI,KAAKziD,UAAS;AAKzC,gBACG7P,kBAAkBsyD,QAAQ,KAAKA,aAAqB,MACrDA,aAAQ,GACR;AACA,mBAAKr9C,gBAAgB,CAAC,QAAQ,YAAY,CAAC;AAC3C,qBAAO;YACT;UACF;QACD,WAAU,CAAC,KAAKlI,MAAK,EAAY,GAAG;AACnC,iBAAO;QACT;AAEA,cAAM7J,OAAO,KAAK8M,eAAc;AAChC,cAAMuiD,UAAU,KAAKp6C,qBAAqBjV,MAAM,MAAM;AACtD,YACE,KAAK+E,MAAMC,WAAWhF,IAAI,MAAqB,MAC9ClD,kBAAkB,KAAK3M,MAAMjX,IAAI,KAAKm2E,SACvC;AACA,iBAAO;QACT;AAEA,YAAI,KAAKxlD,MAAK,EAAY,KAAKwlD,SAAS;AACtC,gBAAMC,gBAAgB,KAAKvqD,MAAMC,WAC/B,KAAK+H,oBAAoB/M,OAAO,CAAC,CACnC;AACA,iBACEsvD,kBAAa,MACbA,kBAAsC;QAE1C;AACA,eAAO;MACT;MAEAvnC,gBAEE9uC,MACA68B,QACM;AACN,YAAI,KAAKR,cAAa,EAAS,GAAG;AAChCr8B,eAAKyW,SAAS,KAAK2tD,kBAAiB;AACpC,eAAKL,YAAY/jE,IAAI;AACrB,eAAKs2E,2BAA2Bt2E,IAAI;AACpC,eAAKu2E,sBAAsBv2E,IAAI;QAChC,WAAU68B,QAAQ;AACjB,eAAKz3B,WAAU;QACjB;AAEA,aAAKu3B,UAAS;MAChB;MAEAsQ,+BAAwC;AACtC,cAAM;UAAEhtC;YAAS,KAAKiX;AACtB,YAAIjX,SAAI,IAAY;AAClB,eAAK64B,gBAAgB,CAAC,cAAc,mBAAmB,CAAC;AACxD,cAAI,KAAKniB,UAAU,YAAY,GAAG;AAChC,gBACE,KAAK7C,gBAAgB,cAAc,wBAAwB,MAAM,MACjE;AACA,mBAAKsC,MAAMzG,OAAOnO,uBAAuB,KAAK0V,MAAM3B,QAAQ;YAC9D;AAEA,mBAAO;UACT;QACF;AAEA,YAAI,KAAKwmB,aAAY,GAAU,GAAG;AAChC,eAAK3lB,MAAMzG,OAAO3E,wBAAwB,KAAKkM,MAAM3B,QAAQ;AAC7D,iBAAO;QACT;AAEA,YAAI,KAAKwmB,aAAsB,EAAA,KAAK,KAAK00C,iBAAgB,GAAI;AAC3D,eAAKr6D,MAAMzG,OAAO3E,wBAAwB,KAAKkM,MAAM3B,QAAQ;AAC7D,iBAAO;QACT;AAEA,eACEtV,SAAI,MACJA,SAAI,MACJA,SAAqB,MACrBA,SAAI,MACJ,KAAK6mC,MAAO,KACZ,KAAKgrC,gBAAe;MAExB;MAEA/N,YACE/jE,MAKAw2E,YACAC,WACAC,QACM;AACN,YAAIF,YAAY;AAAA,cAAAG;AAEd,cAAIF,WAAW;AAEb,iBAAKnY,sBAAsBt+D,MAAM,SAAS;AAC1C,gBAAI,KAAK2W,UAAU,mBAAmB,GAAG;AAAA,kBAAAigE;AACvC,oBAAMp/D,cAAexX,KAClBwX;AACH,kBACEA,YAAYvX,SAAS,gBACrBuX,YAAYnR,SAAS,UACrBmR,YAAY3Z,MAAM2Z,YAAY5Z,UAAU,KACxC,GAAAg5E,qBAACp/D,YAAY1F,UAAK,QAAjB8kE,mBAAmBjkE,gBACpB;AACA,qBAAKyD,MAAMzG,OAAO9M,+BAA+B2U,WAAW;cAC9D;YACF;sBAEKm/D,mBAAI32E,KAAKqX,eAALs/D,QAAAA,iBAAiBr/D,QAAQ;AAGlC,uBAAW+5B,aAAarxC,KAAKqX,YAAY;AACvC,oBAAM;gBAAED;cAAU,IAAGi6B;AACrB,oBAAMjvC,aACJgV,SAASnX,SAAS,eAAemX,SAAS/Q,OAAO+Q,SAASlK;AAC5D,mBAAKoxD,sBAAsBjtB,WAAWjvC,UAAU;AAChD,kBAAI,CAACs0E,UAAUrlC,UAAUC,OAAO;AAC9B,sBAAM;kBAAEA;gBAAO,IAAGD;AAClB,oBAAIC,MAAMrxC,SAAS,cAAc;AAC/B,uBAAKmW,MAAMzG,OAAOhN,uBAAuB0uC,WAAW;oBAClDzuC,WAAW0uC,MAAMpkC;oBACjB9K;kBACF,CAAC;gBACH,OAAO;AAEL,uBAAKgwC,kBAAkBd,MAAMjrC,MAAMirC,MAAMnjC,IAAIvQ,OAAO,MAAM,KAAK;AAE/D,uBAAK8qB,MAAMO,iBAAiBqoB,KAAK;gBACnC;cACF;YACF;UACF,WAAYtxC,KAA0CwX,aAAa;AACjE,kBAAMg7B,OAAQxyC,KAA0CwX;AAExD,gBACEg7B,KAAKvyC,SAAS,yBACduyC,KAAKvyC,SAAS,oBACd;AACA,oBAAM;gBAAEgU;cAAI,IAAGu+B;AACf,kBAAI,CAACv+B,GAAI,OAAM,IAAIwwB,MAAM,mBAAmB;AAE5C,mBAAK65B,sBAAsBt+D,MAAMiU,GAAG5N,IAAI;YAC1C,WAAWmsC,KAAKvyC,SAAS,uBAAuB;AAC9C,yBAAWuX,eAAeg7B,KAAKssB,cAAc;AAC3C,qBAAK1sD,iBAAiBoF,YAAYvD,EAAE;cACtC;YACF;UACF;QACF;MACF;MAEA7B,iBAAiBpS,MAA0C;AACzD,YAAIA,KAAKC,SAAS,cAAc;AAC9B,eAAKq+D,sBAAsBt+D,MAAMA,KAAKqG,IAAI;QAC5C,WAAWrG,KAAKC,SAAS,iBAAiB;AACxC,qBAAWiV,QAAQlV,KAAKgsB,YAAY;AAClC,iBAAK5Z,iBAAiB8C,IAAI;UAC5B;QACF,WAAWlV,KAAKC,SAAS,gBAAgB;AACvC,qBAAWysE,QAAQ1sE,KAAK2qB,UAAU;AAChC,gBAAI+hD,MAAM;AACR,mBAAKt6D,iBAAiBs6D,IAAI;YAC5B;UACF;QACF,WAAW1sE,KAAKC,SAAS,kBAAkB;AAEzC,eAAKmS,iBAAiBpS,KAAKkN,KAAK;QAClC,WAAWlN,KAAKC,SAAS,eAAe;AACtC,eAAKmS,iBAAiBpS,KAAKgP,QAAQ;QACrC,WAAWhP,KAAKC,SAAS,qBAAqB;AAC5C,eAAKmS,iBAAiBpS,KAAK2vC,IAAI;QACjC;MACF;MAEA2uB,sBACEt+D,MAOAoC,YACM;AACN,YAAI,KAAK67B,oBAAoBxX,IAAIrkB,UAAU,GAAG;AAC5C,cAAIA,eAAe,WAAW;AAC5B,iBAAKgU,MAAMzG,OAAOzN,wBAAwBlC,IAAI;UAChD,OAAO;AACL,iBAAKoW,MAAMzG,OAAOxN,iBAAiBnC,MAAM;cAAEoC;YAAW,CAAC;UACzD;QACF;AACA,aAAK67B,oBAAoB3U,IAAIlnB,UAAU;MACzC;MAIAysC,sBAAsB0yB,gBAAmD;AACvE,cAAMsV,QAAQ,CAAA;AACd,YAAIvrC,QAAQ;AAGZ,aAAKzO,OAAM,CAAU;AAErB,eAAO,CAAC,KAAKtJ,IAAG,CAAU,GAAG;AAC3B,cAAI+X,OAAO;AACTA,oBAAQ;UACV,OAAO;AACL,iBAAKzO,OAAM,EAAS;AACpB,gBAAI,KAAKtJ,IAAG,CAAU,EAAG;UAC3B;AACA,gBAAMue,kBAAkB,KAAK/V,aAAY,GAAS;AAClD,gBAAMulC,WAAW,KAAK1wC,MAAK,GAAU;AACrC,gBAAM5wB,OAAO,KAAKyU,UAAS;AAC3BzU,eAAKsxC,QAAQ,KAAK6wB,sBAAqB;AACvC0U,gBAAMjjE,KACJ,KAAKytD,qBACHrhE,MACAshE,UACAC,gBACAzvB,eACF,CACF;QACF;AAEA,eAAO+kC;MACT;MAEAxV,qBACErhE,MACAshE,UAEAC,gBACAzvB,iBAEmB;AACnB,YAAI,KAAKzV,cAAa,EAAO,GAAG;AAC9Br8B,eAAKoX,WAAW,KAAK+qD,sBAAqB;QAC3C,WAAUb,UAAU;AACnBthE,eAAKoX,WAAWqoB,mBAAmBz/B,KAAKsxC,KAAK;QAC/C,WAAW,CAACtxC,KAAKoX,UAAU;AACzBpX,eAAKoX,WAAWioB,gBAAgBr/B,KAAKsxC,KAAK;QAC5C;AACA,eAAO,KAAK38B,WAA8B3U,MAAM,iBAAiB;MACnE;MAGAmiE,wBAAwD;AACtD,YAAI,KAAKvxC,MAAK,GAAU,GAAG;AACzB,gBAAM2d,SAAS,KAAKj9B,mBAAmB,KAAK4F,MAAMhK,KAAK;AACvD,gBAAM4pE,YAAY5H,cAAcr+C,KAAK0d,OAAOrhC,KAAK;AACjD,cAAI4pE,WAAW;AACb,iBAAK1gE,MAAMzG,OAAO3I,kCAAkCunC,QAAQ;cAC1DtnC,mBAAmB6vE,UAAU,CAAC,EAAE/qD,WAAW,CAAC;YAC9C,CAAC;UACH;AACA,iBAAOwiB;QACT;AACA,eAAO,KAAKjJ,gBAAgB,IAAI;MAClC;MAEAyxC,mBACE/2E,MAGS;AACT,YAAIA,KAAKk2E,cAAc,MAAM;AAC3B,iBAAOl2E,KAAKk2E,WAAWl9C,KAAK,CAAC;YAAEjyB;YAAKmG;UAAM,MAAM;AAC9C,mBACEA,MAAMA,UAAU,WACfnG,IAAI9G,SAAS,eACV8G,IAAIV,SAAS,SACbU,IAAImG,UAAU;UAEtB,CAAC;QACH;AACA,eAAO;MACT;MAEAgkC,sBAAsBlxC,MAAmC;AACvD,cAAM;UAAEqX;QAAY,IAAGrX;AACvB,cAAMg3E,oBACJ3/D,WAAWC,WAAW,IAAID,WAAW,CAAC,EAAEpX,OAAO;AAEjD,YAAID,KAAKwC,UAAU,UAAU;AAC3B,cAAIw0E,sBAAsB,0BAA0B;AAClD,iBAAK5gE,MACHzG,OAAOlH,kCACP4O,WAAW,CAAC,EAAElJ,IAAIvQ,KACpB;UACF;QACF,WAAWoC,KAAKwC,UAAU,SAAS;AACjC,cAAIw0E,sBAAsB,4BAA4B;AACpD,iBAAK5gE,MACHzG,OAAO7N,8BACPuV,WAAW,CAAC,EAAElJ,IAAIvQ,KACpB;UACF;QACF,WAAWoC,KAAKmxC,QAAQ;AAAA,cAAA8lC;AACtB,cAAID,sBAAsB,0BAA0B;AAClD,iBAAK5gE,MAAMzG,OAAO3L,4BAA4BqT,WAAW,CAAC,EAAElJ,IAAIvQ,KAAK;UACvE;AACA,gBAAIq5E,mBAAAj3E,KAAKk2E,eAALe,OAAAA,SAAAA,iBAAiB3/D,UAAS,GAAG;AAC/B,iBAAKlB,MACHzG,OAAO5L,8BACPsT,WAAW,CAAC,EAAElJ,IAAIvQ,KACpB;UACF;QACF;MACF;MAEA24E,sBACEv2E,MAGA;AAEA,YAAI,KAAK+2E,mBAAmB/2E,IAAI,KAAKA,KAAKC,SAAS,wBAAwB;AAEzE,gBAAM;YAAEoX;UAAY,IAAGrX;AACvB,cAAIqX,cAAc,MAAM;AAEtB,kBAAM6/D,2BAA2B7/D,WAAW8/D,KAAK9lC,eAAa;AAC5D,kBAAIW;AACJ,kBAAIX,UAAUpxC,SAAS,mBAAmB;AACxC+xC,2BAAWX,UAAUC;cACvB,WAAWD,UAAUpxC,SAAS,mBAAmB;AAC/C+xC,2BAAWX,UAAUW;cACvB;AACA,kBAAIA,aAAa5nB,QAAW;AAC1B,uBAAO4nB,SAAS/xC,SAAS,eACrB+xC,SAAS3rC,SAAS,YAClB2rC,SAAS9kC,UAAU;cACzB;YACF,CAAC;AACD,gBAAIgqE,6BAA6B9sD,QAAW;AAC1C,mBAAKhU,MACHzG,OAAO7L,6BACPozE,yBAAyB/oE,IAAIvQ,KAC/B;YACF;UACF;QACF;MACF;MAEA4zC,uBAAuBC,UAA4B;AACjD,YAAIA,SAAU,QAAO;AACrB,eACE,KAAK1V,aAAuB,GAAA,KAC5B,KAAKA,aAAY,EAAU,KACO,KAAKA,aAAY,GAAW;MAElE;MAEA2V,iBACE1xC,MACAyxC,UACAjvC,OACA2L,KACM;AACN,YAAIsjC,UAAU;AAWZ;QACF;AAEA,YAAqCjvC,UAAU,UAAU;AACvD,eAAKmzB,aAAa,oBAAoBxnB,GAAG;AACxCnO,eAA6BmxC,SAAS;QACxC,WAAU,KAAKx6B,UAAU,kBAAkB,GAAG;AAC5C3W,eAA6BmxC,SAAS;QACzC;AAEA,YAAI3uC,UAAU,UAAU;AACtB,eAAKmzB,aAAa,sBAAsBxnB,GAAG;AAC1CnO,eAA6BwC,QAAQ;QACxC,WAAWA,UAAU,SAAS;AAC5B,eAAKmzB,aAAa,4BAA4BxnB,GAAG;AAChDnO,eAA6BwC,QAAQ;QACvC,WAAU,KAAKmU,UAAU,oBAAoB,GAAG;AAC9C3W,eAA6BwC,QAAQ;QACxC;MACF;MAaAg8D,sBACEx+D,MACAyxC,UACqB;AACrB,YAAI,CAAC,KAAKD,uBAAuBC,QAAQ,GAAG;AAC1C,eAAKC,iBACH1xC,MACAyxC,UACA,IACF;AACA,iBAAO;QACT;AAEA,cAAM2lC,kBAAkB,KAAK9xC,gBAAgB,IAAI;AAEjD,cAAM;UAAErlC;YAAS,KAAKiX;AACtB,cAAMmgE,gBAAgBtzD,2BAA2B9jB,IAAI,IAOjDA,SAAI,MAAiB,KAAK+zB,kBAAmB,MAAyB,MAQtE/zB,SAAiB;AAErB,YAAIo3E,eAAe;AACjB,eAAKlrD,uCAAuCirD,eAAe;AAC3D,eAAK1lC,iBACH1xC,MACAyxC,UACA2lC,gBAAgB/wE,MAChB+wE,gBAAgBjpE,IAAIvQ,KACtB;AACA,iBAAO;QACT,OAAO;AACL,eAAK8zC,iBACH1xC,MACAyxC,UACA,IACF;AAEA,iBAAO2lC;QACT;MACF;MAEAE,yBAEE90E,OACA;AACA,cAAM;UAAEvC;YAAS,KAAKiX;AACtB,eAAO2M,kBAAkB5jB,IAAI,IAOzBA,SAAiB,MAAI,KAAK+zB,kBAAiB,MAA2B,MAQtE/zB,SAAiB;MACvB;MAKA0mC,YAA0B3mC,MAAgD;AACxE,YAAI,KAAK4wB,MAAK,GAAU,GAAG;AAEzB,iBAAO,KAAK2mD,+BAA+Bv3E,IAAI;QACjD;AAEA,eAAO,KAAKy+D,8BACVz+D,MACA,KAAKw+D,sBAAsBx+D,MAAqB,KAAK,CACvD;MACF;MAEAy+D,8BAEEz+D,MACAq7D,wBACa;AACbr7D,aAAKqX,aAAa,CAAA;AAIlB,cAAMi+D,aAAa,KAAKkC,iCACtBx3E,MACAq7D,sBACF;AAOA,cAAMoc,YAAY,CAACnC,cAAc,KAAK/hD,IAAG,EAAS;AAGlD,cAAMiiD,UAAUiC,aAAa,KAAKvT,8BAA8BlkE,IAAI;AAGpE,YAAIy3E,aAAa,CAACjC,QAAS,MAAKrR,2BAA2BnkE,IAAI;AAC/D,aAAKs8B,iBAAgB,EAAS;AAE9B,eAAO,KAAKi7C,+BAA+Bv3E,IAAI;MACjD;MAEAu3E,+BAEEv3E,MACa;AAAA,YAAA03E;AACb,SAAAA,oBAAA13E,KAAKqX,eAAU,OAAAqgE,oBAAf13E,KAAKqX,aAAe,CAAA;AACpBrX,aAAKyW,SAAS,KAAK2tD,kBAAiB;AACpC,aAAKkS,2BAA2Bt2E,IAAI;AACpC,aAAKkxC,sBAAsBlxC,IAAI;AAC/B,aAAKu2E,sBAAsBv2E,IAAI;AAE/B,aAAK28B,UAAS;AACd,eAAO,KAAKhoB,WAAW3U,MAAM,mBAAmB;MAClD;MAEAokE,oBAAiD;AAC/C,YAAI,CAAC,KAAKxzC,MAAK,GAAU,EAAG,MAAKxrB,WAAU;AAC3C,eAAO,KAAKqhC,cAAa;MAC3B;MAEA2K,0BAMEpxC,MACAqxC,WACApxC,MACM;AACNoxC,kBAAUC,QAAQ,KAAKhM,gBAAe;AACtCtlC,aAAKqX,WAAWzD,KAAK,KAAK29B,sBAAsBF,WAAWpxC,IAAI,CAAC;MAClE;MAEAsxC,sBAMEF,WACApxC,MACA2oB,cAAwB,MACxB;AACA,aAAKijC,UAAUxa,UAAUC,OAAO;UAAErxC;QAAM,GAAE2oB,WAAW;AACrD,eAAO,KAAKjU,WAAW08B,WAAWpxC,IAAI;MACxC;MAOA03E,wBAA6C;AAC3C,aAAK96C,OAAM,CAAU;AAErB,cAAM+6C,QAAQ,CAAA;AACd,cAAMC,YAAY,oBAAI5rE,IAAG;AAEzB,WAAG;AACD,cAAI,KAAK2kB,MAAK,CAAU,GAAG;AACzB;UACF;AAEA,gBAAM5wB,OAAO,KAAKyU,UAAS;AAG3B,gBAAM64D,UAAU,KAAKp2D,MAAMhK;AAI3B,cAAI2qE,UAAUpxD,IAAI6mD,OAAO,GAAG;AAC1B,iBAAKl3D,MACHzG,OAAO7I,mCACP,KAAKoQ,MAAM3B,UACX;cACExO,KAAKumE;YACP,CACF;UACF;AACAuK,oBAAUvuD,IAAIgkD,OAAO;AACrB,cAAI,KAAK18C,MAAK,GAAU,GAAG;AACzB5wB,iBAAK+G,MAAM,KAAKuK,mBAAmBg8D,OAAO;UAC5C,OAAO;AACLttE,iBAAK+G,MAAM,KAAKu+B,gBAAgB,IAAI;UACtC;AACA,eAAKzI,OAAM,EAAS;AAEpB,cAAI,CAAC,KAAKjM,MAAK,GAAU,GAAG;AAC1B,kBAAM,KAAKxa,MACTzG,OAAO9I,6BACP,KAAKqQ,MAAM3B,QACb;UACF;AACAvV,eAAKkN,QAAQ,KAAKoE,mBAAmB,KAAK4F,MAAMhK,KAAK;AACrD0qE,gBAAMhkE,KAAK,KAAKe,WAAW3U,MAAM,iBAAiB,CAAC;QACrD,SAAS,KAAKuzB,IAAG,EAAS;AAE1B,aAAKsJ,OAAM,CAAU;AAErB,eAAO+6C;MACT;MAMAE,wBAAwB;AACtB,cAAMF,QAA6B,CAAA;AACnC,cAAM/gE,aAAa,oBAAI5K,IAAG;AAC1B,WAAG;AACD,gBAAMjM,OAAO,KAAKyU,UAAS;AAC3BzU,eAAK+G,MAAM,KAAKu+B,gBAAgB,IAAI;AAEpC,cAAItlC,KAAK+G,IAAIV,SAAS,QAAQ;AAC5B,iBAAK+P,MAAMzG,OAAO/I,kCAAkC5G,KAAK+G,GAAG;UAC9D;AAEA,cAAI8P,WAAW4P,IAAIzmB,KAAK+G,IAAIV,IAAI,GAAG;AACjC,iBAAK+P,MAAMzG,OAAO7I,mCAAmC9G,KAAK+G,KAAK;cAC7DA,KAAK/G,KAAK+G,IAAIV;YAChB,CAAC;UACH;AACAwQ,qBAAWyS,IAAItpB,KAAK+G,IAAIV,IAAI;AAC5B,eAAKw2B,OAAM,EAAS;AACpB,cAAI,CAAC,KAAKjM,MAAK,GAAU,GAAG;AAC1B,kBAAM,KAAKxa,MACTzG,OAAO9I,6BACP,KAAKqQ,MAAM3B,QACb;UACF;AACAvV,eAAKkN,QAAQ,KAAKoE,mBAAmB,KAAK4F,MAAMhK,KAAK;AACrD0qE,gBAAMhkE,KAAK,KAAKe,WAAW3U,MAAM,iBAAiB,CAAC;QACrD,SAAS,KAAKuzB,IAAG,EAAS;AAE1B,eAAOqkD;MACT;MAEAtB,2BACEt2E,MAGA;AACA,YAAI6W;AAC+B;AAEjC,cAAIkhE,UAAU;QAChB;AAGA,YAAI,KAAKnnD,MAAK,EAAS,GAAG;AACxB,cACE,KAAK4L,sBAAuB,KAC5B,KAAKxI,kBAAiB,MAAE,IACxB;AAGA;UACF;AAEA,eAAKjN,KAAI;AAKF,cAAI,KAAKpQ,UAAU,kBAAkB,GAAG;AAC7CE,yBAAa,KAAKihE,sBAAqB;UACzC,OAAO;AACL,gBAAI,CAAC,KAAKnhE,UAAU,kBAAkB,GAAG;AACvC,mBAAKgf,aAAa,kBAAkB;YACtC;AACA9e,yBAAa,KAAK8gE,sBAAqB;UACzC;AACmC;AACjCI,sBAAU;UACZ;QACF,WAAW,KAAKh8C,aAAuB,EAAA,KAAK,CAAC,KAAKS,sBAAqB,GAAI;AACzE,cAAI,KAAK7lB,UAAU,kBAAkB,GAAG;AACtC,gBACE,KAAK7C,gBAAgB,oBAAoB,wBAAwB,MACjE,MACA;AACA,mBAAKsC,MAAMzG,OAAOrM,2BAA2B,KAAK4T,MAAM3B,QAAQ;YAClE;AACA,iBAAKumB,SAAS97B,MAAM,0BAA0B,IAAI;UACpD,OAEO;AACL,iBAAK84B,gBAAgB,CAAC,oBAAoB,kBAAkB,CAAC;UAC/D;AACA,eAAK/R,KAAI;AACTlQ,uBAAa,KAAK8gE,sBAAqB;QACzC,WACE,KAAKhhE,UAAU,kBAAkB,KACC,KAAKA,UAAU,kBAAkB,GACnE;AACAE,uBAAa,CAAA;QACf,OAA0C;AACxC,cAAI,KAAKF,UAAU,kBAAkB,GAAG;AACtCE,yBAAa,CAAA;UACf,MAAO;QACT;AAEA,YAEE,CAACkhE,WACD,KAAKphE,UAAU,kBAAkB,GACjC;AACA3W,eAAKk2E,aAAar/D;QACpB,OAAO;AACL7W,eAAK6W,aAAaA;QACpB;MACF;MAEA2gE,iCACEx3E,MACAq7D,wBACS;AAET,YAAIA,wBAAwB;AAC1B,gBAAMhqB,YAAY,KAAKp5B,gBACrBojD,sBACF;AACAhqB,oBAAUC,QAAQ+pB;AAClBr7D,eAAKqX,WAAWzD,KACd,KAAK29B,sBAAsBF,WAAW,wBAAwB,CAChE;AACA,iBAAO;QACR,WAECttB,2BAA2B,KAAK7M,MAAMjX,IAAI,GAC1C;AACA,eAAKmxC,0BACHpxC,MACA,KAAKyU,UAAS,GACd,wBACF;AACA,iBAAO;QACT;AACA,eAAO;MACT;MAEAyvD,8BAA8BlkE,MAA4C;AACxE,YAAI,KAAK4wB,MAAK,EAAQ,GAAG;AACvB,gBAAMygB,YAAY,KAAK58B,UAAS;AAChC,eAAKsS,KAAI;AACT,eAAKuV,iBAAgB,EAAO;AAE5B,eAAK8U,0BACHpxC,MACAqxC,WACA,0BACF;AACA,iBAAO;QACT;AACA,eAAO;MACT;MAEA8yB,2BAA2BnkE,MAAmC;AAC5D,YAAIsrC,QAAQ;AACZ,aAAKzO,OAAM,CAAU;AACrB,eAAO,CAAC,KAAKtJ,IAAG,CAAU,GAAG;AAC3B,cAAI+X,OAAO;AACTA,oBAAQ;UACV,OAAO;AAEL,gBAAI,KAAK/X,IAAG,EAAS,GAAG;AACtB,oBAAM,KAAKnd,MAAMzG,OAAO3N,wBAAwB,KAAKkV,MAAM3B,QAAQ;YACrE;AAEA,iBAAKsnB,OAAM,EAAS;AACpB,gBAAI,KAAKtJ,IAAG,CAAU,EAAG;UAC3B;AAEA,gBAAM8d,YAAY,KAAK58B,UAAS;AAChC,gBAAMm9B,mBAAmB,KAAKhhB,MAAK,GAAU;AAC7C,gBAAMkhB,kBAAkB,KAAK/V,aAAY,GAAS;AAClDsV,oBAAUW,WAAW,KAAKmwB,sBAAqB;AAC/C,gBAAM6V,kBAAkB,KAAKrmC,qBAC3BN,WACAO,kBACA5xC,KAAK0jC,eAAe,UAAU1jC,KAAK0jC,eAAe,UAClDoO,iBACA1nB,MACF;AACApqB,eAAKqX,WAAWzD,KAAKokE,eAAe;QACtC;MACF;MAGArmC,qBACEN,WACAO,kBAEAC,oBACAC,iBACAlpB,aACmB;AACnB,YAAI,KAAKyT,cAAa,EAAO,GAAG;AAC9BgV,oBAAUC,QAAQ,KAAKhM,gBAAe;QACxC,OAAO;AACL,gBAAM;YAAE0M;UAAU,IAAGX;AACrB,cAAIO,kBAAkB;AACpB,kBAAM,KAAKx7B,MAAMzG,OAAOpM,uBAAuB8tC,WAAW;cACxD7tC,YAAawuC,SAA6B9kC;YAC5C,CAAC;UACH;AACA,eAAKklC,kBACFJ,SAA0B3rC,MAC3BgrC,UAAUljC,IAAIvQ,OACd,MACA,IACF;AACA,cAAI,CAACyzC,UAAUC,OAAO;AACpBD,sBAAUC,QAAQjS,gBAAgB2S,QAAQ;UAC5C;QACF;AACA,eAAO,KAAKT,sBACVF,WACA,mBACAzoB,WACF;MACF;MAIA4nB,YACEpE,OACS;AACT,eAAOA,MAAMnsC,SAAS,gBAAgBmsC,MAAM/lC,SAAS;MACvD;IACF;AC12Ge,QAAM4xE,SAAN,cAAqBnI,gBAAgB;MAOlDxyE,YACE8S,SACA0b,OACA+4C,YACA;AACAz0D,kBAAUk2D,WAAWl2D,OAAO;AAC5B,cAAMA,SAAS0b,KAAK;AAEpB,aAAK1b,UAAUA;AACf,aAAK0tB,iBAAgB;AACrB,aAAKnU,UAAUk7C;AACf,aAAK/mE,WAAWsS,QAAQy1D;MAC1B;MAGAznC,kBAAsD;AACpD,eAAO9W;MACT;MAEApX,QAAgB;AACd,aAAKuuB,mBAAkB;AACvB,cAAMtuB,OAAO,KAAKsE,UAAS;AAC3B,cAAMggC,UAAU,KAAKhgC,UAAS;AAC9B,aAAK6e,UAAS;AACdnjB,aAAK4c,SAAS;AACd,aAAKynB,cAAcrkC,MAAMskC,OAAO;AAChCtkC,aAAK4c,SAAS,KAAK7V,MAAM6V;AACzB5c,aAAK+Z,SAAS5S,SAAS,KAAKJ,MAAM+T;AAClC,eAAO9a;MACT;IACF;AC1BO,aAASD,MAAM4b,OAAe1b,SAAyB;AAAA,UAAA8nE;AAC5D,YAAIA,WAAA9nE,YAAO,OAAA,SAAP8nE,SAASpqD,gBAAe,eAAe;AACzC1d,kBAAOjD,OAAAwB,OAAA,CAAA,GACFyB,OAAO;AAEZ,YAAI;AACFA,kBAAQ0d,aAAa;AACrB,gBAAMvG,SAAS4wD,UAAU/nE,SAAS0b,KAAK;AACvC,gBAAMssD,MAAM7wD,OAAOrX,MAAK;AAExB,cAAIqX,OAAOiC,mBAAmB;AAC5B,mBAAO4uD;UACT;AAEA,cAAI7wD,OAAOkC,6BAA6B;AAMtC,gBAAI;AACFrZ,sBAAQ0d,aAAa;AACrB,qBAAOqqD,UAAU/nE,SAAS0b,KAAK,EAAE5b,MAAK;YACxC,SAAEc,SAAM;YAAC;UACX,OAAO;AAGLonE,gBAAI3jC,QAAQ3mB,aAAa;UAC3B;AAEA,iBAAOsqD;QACR,SAAQC,aAAa;AACpB,cAAI;AACFjoE,oBAAQ0d,aAAa;AACrB,mBAAOqqD,UAAU/nE,SAAS0b,KAAK,EAAE5b,MAAK;UACxC,SAAE8oD,UAAM;UAAC;AAET,gBAAMqf;QACR;MACF,OAAO;AACL,eAAOF,UAAU/nE,SAAS0b,KAAK,EAAE5b,MAAK;MACxC;IACF;AAEO,aAAS80B,gBAAgBlZ,OAAe1b,SAA+B;AAC5E,YAAMmX,SAAS4wD,UAAU/nE,SAAS0b,KAAK;AACvC,UAAIvE,OAAOnX,QAAQyd,YAAY;AAC7BtG,eAAOrQ,MAAM+O,SAAS;MACxB;AACA,aAAOsB,OAAO65C,cAAa;IAC7B;AAEA,aAASkX,2BACPC,oBACmC;AACnC,YAAMt+D,cAAgD,CAAA;AACtD,iBAAWu5C,YAAYrmD,OAAOkC,KAC5BkpE,kBACF,GAAmC;AACjCt+D,QAAAA,YAAWu5C,QAAQ,IAAIxuC,iBAAiBuzD,mBAAmB/kB,QAAQ,CAAC;MACtE;AACA,aAAOv5C;IACT;QAEau+D,WAAWF,2BAA2BC,EAAkB;AAErE,aAASJ,UAAU/nE,SAAqC0b,OAAuB;AAC7E,UAAI8yC,MAAMqZ;AACV,YAAMpT,aAAyB,oBAAIjrD,IAAG;AACtC,UAAIxJ,WAAO,QAAPA,QAASuZ,SAAS;AACpB,mBAAWI,UAAU3Z,QAAQuZ,SAAS;AACpC,cAAItjB,MAAMkgE;AACV,cAAI,OAAOx8C,WAAW,UAAU;AAC9B1jB,mBAAO0jB;UACT,OAAO;AACL,aAAC1jB,MAAMkgE,IAAI,IAAIx8C;UACjB;AACA,cAAI,CAAC86C,WAAWp+C,IAAIpgB,IAAI,GAAG;AACzBw+D,uBAAWh2D,IAAIxI,MAAMkgE,QAAQ,CAAE,CAAA;UACjC;QACF;AACA3B,wBAAgBC,UAAU;AAC1BjG,cAAM6Z,eAAe5T,UAAU;MACjC;AAEA,aAAO,IAAIjG,IAAIxuD,SAAS0b,OAAO+4C,UAAU;IAC3C;AAEA,QAAM6T,mBAAmB,oBAAI9+D,IAAG;AAGhC,aAAS6+D,eACP5T,YAC8B;AAC9B,YAAM8T,aAAa,CAAA;AACnB,iBAAWtyE,QAAQs/D,kBAAkB;AACnC,YAAId,WAAWp+C,IAAIpgB,IAAI,GAAG;AACxBsyE,qBAAW/kE,KAAKvN,IAAI;QACtB;MACF;AACA,YAAMU,MAAM4xE,WAAWnyE,KAAK,GAAG;AAC/B,UAAIo4D,MAAM8Z,iBAAiB9pE,IAAI7H,GAAG;AAClC,UAAI,CAAC63D,KAAK;AACRA,cAAMqZ;AACN,mBAAWluD,UAAU4uD,YAAY;AAE/B/Z,gBAAM8G,aAAa37C,MAAM,EAAE60C,GAAG;QAChC;AACA8Z,yBAAiB7pE,IAAI9H,KAAK63D,GAAG;MAC/B;AACA,aAAOA;IACT;;;;;;;;ACvIA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,QAAQ,QAAQ,SAAS;AACjC,QAAI,UAAU;AACd,QAAI,mBAAmB,QAAQ,gBAAgB,uBAA2B;AAG1E,YAAQ,SAAU,WAAY;AAC1B,UAAI;AACA,eAAO;AAAA,MACX,SACO,IAAI;AACP,YAAI;AACA,iBAAO,UAAQ,SAAS;AAAA,QAC5B,SACO,IAAI;AACP,gBAAM,IAAI,MAAM,2EAA2E;AAAA,QAC/F;AAAA,MACJ;AAAA,IACJ,EAAG;AAQH,aAAS,MAAM,QAAQ,SAAS;AAC5B,UAAI,gBAAgB,GAAG,iBAAiB,SAAS,OAAO;AACxD,mBAAa,QAAQ,KAAK,OAAO,QAAQ,wBAAwB;AACjE,aAAO,QAAQ,OAAO,MAAM,QAAQ,YAAY;AAAA,IACpD;AACA,YAAQ,QAAQ;AAAA;AAAA;",
  "names": ["Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "code", "ModuleErrors", "ImportMetaOutsideModule", "message", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "node", "type", "prefix", "StandardErrors", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitUsingNotInAsyncContext", "AwaitNotInAsyncContext", "AwaitNotInAsyncFunction", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorsBeforeAfterExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeferImportRequiresNamespace", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "DynamicImportPhaseRequiresImportExpressions", "phase", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportAttributesUseAssert", "ImportBindingIsString", "importName", "ImportCallArgumentTrailingComma", "ImportCallArity", "maxArgumentCount", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidLhsOptionalChaining", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "map", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "key", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "SloppyFunctionAnnexB", "SourcePhaseImportRequiresDefault", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationExport", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "YieldBindingIdentifier", "YieldInParameter", "ZeroDigitNumericSeparator", "StrictModeErrors", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "UnparenthesizedPipeBodyDescriptions", "Set", "PipelineOperatorErrors", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "defineHidden", "obj", "value", "Object", "defineProperty", "enumerable", "configurable", "toParseErrorConstructor", "toMessage", "reasonCode", "syntaxPlugin", "hasMissingPlugin", "oldReasonCodes", "AccessorCannotDeclareThisParameter", "AccessorCannotHaveTypeParameters", "ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference", "SetAccessorCannotHaveOptionalParameter", "SetAccessorCannotHaveRestParameter", "SetAccessorCannotHaveReturnType", "loc", "details", "error", "SyntaxError", "pos", "clone", "overrides", "_overrides$loc", "assign", "get", "set", "writable", "ParseErrorEnum", "argument", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "keys", "template", "_ref", "rest", "_objectWithoutPropertiesLoose", "_excluded", "Errors", "toUnenumerable", "object", "toESTreeLocation", "estree", "superClass", "ESTreeParserMixin", "parse", "file", "options", "tokens", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "_", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "_unused", "bigint", "String", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "directiveToStmt", "directive", "expression", "raw", "extra", "expressionValue", "stmt", "rawValue", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "_stmt$expression$extr", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "pushClassMethod", "classBody", "isGenerator", "isConstructor", "allowsDirectSuper", "parseMethod", "typeParameters", "push", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "computed", "finishNode", "nameIsConstructor", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseObjectMethod", "prop", "isPattern", "isAccessor", "shorthand", "parseObjectProperty", "startLoc", "refExpressionErrors", "isValidLVal", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "finishCallExpression", "unfinished", "optional", "callee", "source", "arguments", "hasPlugin", "_ref2", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "length", "_declaration$decorato", "declaration", "resetStartLocation", "parseSubscript", "base", "noCalls", "optionalChainMember", "substring", "stop", "chain", "startNodeAtNode", "isOptionalMemberExpression", "hasPropertyAsPrivateName", "isObjectMethod", "finishNodeAt", "endLoc", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "_options$binop", "_options$beforeExpr", "_options$startsExpr", "_options$prefix", "createKeywordLike", "_options$binop2", "_options$beforeExpr2", "_options$startsExpr2", "_options$prefix2", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "at", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_defer", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_source", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "placeholder", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "i", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "Scope", "names", "firstLexicalName", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "ScopeFlag", "inNonArrowFunction", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "maybeExportDefined", "delete", "isRedeclaredInScope", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "add", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "pluginConfig", "plugins", "pluginName", "pluginOptions", "actualOptions", "plugin", "_this$plugins$get", "setTrailingComments", "comments", "trailingComments", "undefined", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "elements", "commentWS", "lastElement", "CommentsParser", "addComment", "comment", "commentsLen", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "nodeStart", "commentEnd", "containingNode", "finalizeComment", "splice", "trailingNode", "commentStart", "input", "charCodeAt", "properties", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "resetPreviousIdentifierLeadingComments", "takeSurroundingComments", "lineBreak", "lineBreakG", "isNewLine", "hasNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "isWhitespace", "State", "curLine", "lineStart", "errors", "potentialArrowAt", "noArrowAt", "noArrowParamsConversionAt", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "labels", "ct", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "v", "init", "strictMode", "sourceType", "startLine", "startColumn", "maybeInArrowParameters", "inType", "noAnonFunctionType", "hasFlowComment", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "soloAwait", "inFSharpPipelineDirectBody", "canStartJSXElement", "containsEsc", "hasTopLevelAwait", "curPosition", "slice", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "exec", "octalStr", "octal", "parseInt", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "e", "Infinity", "val", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "indexOf", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorRecovery", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "nextToken", "eat", "createLookaheadState", "curContext", "lookahead", "old", "curr", "nextTokenStart", "nextTokenStartSince", "lastIndex", "lookaheadCharCode", "nextTokenInLineStart", "nextTokenInLineStartSince", "lookaheadInLineCharCode", "codePointAtPos", "cp", "trail", "setStrict", "forEach", "toParseError", "clear", "skipSpace", "finishToken", "getTokenFromCode", "skipBlockComment", "skipLineComment", "startSkip", "spaceStart", "loop", "attachComment", "annexB", "commentWhitespace", "prevType", "replaceToken", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readWord1", "finishOp", "readToken_dot", "readNumber", "readToken_slash", "readToken_mult_modulo", "width", "readToken_pipe_amp", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "readToken_lt", "readToken_gt", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "includes", "isBigInt", "replace", "startsWithDot", "isFloat", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "isDecimal", "parseFloat", "quote", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "stack", "oldClassScope", "from", "declarePrivateName", "elementType", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "UtilParser", "addExtra", "isContextual", "isUnparsedContextual", "nameStart", "nameEnd", "nextCh", "isLookaheadContextual", "eatContextual", "expectContextual", "canInsertSemicolon", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "semicolon", "allowAsi", "expect", "tryParse", "fn", "oldState", "abortSignal", "failState", "thrown", "aborted", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "hasErrors", "isLiteralPropertyName", "property", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "getScopeHandler", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "ranges", "range", "NodePrototype", "prototype", "__clone", "newNode", "clonePlaceholder", "cloneIdentifier", "cloned", "create", "expectedNode", "cloneStringLiteral", "NodeUtils", "startNodeAt", "resetStartLocationFromNode", "locationNode", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitialized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "flow", "FlowParserMixin", "flowPragma", "shouldParseTypes", "matches", "Error", "flowParseTypeInitialiser", "tok", "oldInType", "flowParseType", "flowParsePredicate", "moduloLoc", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "flowParseDeclareModuleExports", "flowParseDeclareModule", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "flowParseInterfaceExtends", "implements", "mixins", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "oldNoAnonFunctionType", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "valueNode", "callProperties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "isInexactToken", "proto", "flowCheckGetterSetterParams", "paramCount", "_startLoc", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "enums", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "setOptionalParametersError", "originalNoArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "parseMaybeAssignAllowIn", "disallowInvalid", "arrows", "finishArrowValidation", "every", "_node$extra", "toAssignableList", "trailingCommaLoc", "checkParams", "result", "parseParenItem", "typeCastNode", "assertModuleNodeAllowed", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "fullWord", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "_expr$extra", "parseArrayLike", "close", "canBePattern", "isTuple", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "parseFunctionParamType", "parseMaybeDefault", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "isPotentialImportPhase", "isExport", "applyImportPhase", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "parseVarId", "decl", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "_jsx", "jsx", "currentContext", "_jsx2", "_jsx3", "abort", "_arrowExpression$extr", "arrowExpression", "maybeUnwrapTypeCastExpression", "async", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "parseSubscripts", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "subscriptState", "isLookaheadToken_lt", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "parseTopLevel", "program", "fileNode", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitialized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "members", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "afterNext", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "jsxReadString", "codePoint", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "jsxParseOpeningElementAfterName", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "TypeScriptScope", "tsNames", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "isConst", "wasConst", "unwrapParenthesizedExpression", "LValParser", "_node$extra3", "last", "_node$extra2", "operator", "arg", "checkToRestConversion", "elt", "element", "toReferencedListDeep", "parseSpread", "parseRestBinding", "parseBindingList", "ParseBindingListFlags", "parseObjectLike", "closeCharCode", "allowEmpty", "elts", "checkCommaAfterRest", "parseDecorator", "parseAssignableListItem", "parseBindingRestProperty", "parseBindingProperty", "parsePropertyName", "_left", "checkLVal", "checkClashes", "hasParenthesizedAncestor", "_expression$extra", "checkIdentifier", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "declareNameFromIdentifier", "identifier", "allowPattern", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifer", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TupleOptionalAfterType", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "typescript", "TypeScriptParserMixin", "tsParseInOutModifiers", "tsParseModifiers", "bind", "allowedModifiers", "disallowedModifiers", "errorTemplate", "tsParseConstModifier", "tsParseInOutConstModifiers", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenOnSameLineAndCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "stopOnStartOfClassStaticBlock", "tsIsStartOfStaticBlocks", "tsTryParse", "modified", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "hasOwnProperty", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "qualifier", "tsParseEntityName", "tsParseTypeArguments", "allowReservedWords", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "nodeAny", "firstParameter", "tsParseTypeMember", "idx", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedType", "tsExpectThenParseType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "elementNode", "labeled", "isWord", "chAfterWord", "wordName", "typeOrLabel", "tsParseNonArrayType", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "abstract", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "_unused2", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "checkType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "tsParseTypeAliasDeclaration", "tsInNoContext", "cb", "oldContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "maybeDefaultIdentifier", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "nany", "startType", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsParseExpressionStatement", "mod", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "reScan_lt", "reScan_lt_gt", "tsIsDeclarationStart", "override", "pp", "parameter", "isSimpleParameter", "tsDisallowOptionalPattern", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "_callee$extra", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "checkKeywords", "checkDuplicateExports", "importNode", "parseMaybeImportPhase", "parseImportSpecifiersAndAfter", "nodeImportEquals", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "parseClassAccessorProperty", "declareClassPrivateMethodInScope", "_typeCast", "_typeCast2", "typeCast", "_typeParameters", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "parseMaybeDecoratorArguments", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldStrict", "oldInAbstractClass", "maybeTakeDecorators", "hasBody", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "placeholders", "PlaceholdersParserMixin", "parsePlaceholder", "assertNoSpace", "finishPlaceholder", "chStartsBindingIdentifier", "verifyBreakContinue", "isBreak", "parseStatementOrSloppyAnnexBFunctionDeclaration", "stmtPlaceholder", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "parseClassBody", "startsWith", "maybeParseExportDefaultSpecifier", "_specifiers", "checkExport", "filter", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "v8intrinsic", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "validatePlugins", "pluginsMap", "decoratorsBeforeExport", "allowCallParenthesized", "_pluginsMap$get", "proposalList", "p", "tupleSyntaxIsHash", "syntaxType", "tokenList", "moduleAttributesVersionPluginOption", "version", "RECORD_AND_TUPLE_SYNTAX_TYPES", "missingPlugins", "mixinPlugins", "mixinPluginNames", "defaultOptions", "sourceFilename", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "createImportExpressions", "createParenthesizedExpressions", "getOptions", "opts", "_opts$key", "ExpressionParser", "checkProto", "isRecord", "protoRef", "used", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "resultError", "_resultError$loc", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "startIndex", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "_body$extra", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "recordAwaitIfAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "isAmbiguousAwait", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseMember", "parseNoCallExpr", "tag", "quasi", "dynamicImport", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "_call$extra", "parseSuper", "parseImportMetaProperty", "parseImportCall", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "isSource", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "substitutions", "propHash", "parsePropertyDefinition", "maybeAsyncOrAccessorProp", "keyName", "_params", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "isAwaitAllowed", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "ParamKind", "prodParamToClear", "ret", "revertScopes", "parseProgram", "loopLabel", "switchLabel", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "endCh", "chStartsBindingPattern", "hasInLineFollowingBindingIdentifierOrBrace", "startsUsingForOf", "startsAwaitUsing", "parseModuleItem", "ParseStatementFlag", "parseStatementListItem", "allowLabeledFunction", "parseStatement", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithAwaitUsing", "starsWithUsingDeclaration", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "ParseFunctionFlag", "discriminant", "cases", "cur", "sawDefault", "isCase", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "hangingDeclaration", "isDeclaration", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "maybeContextualKw", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "_member$decorators", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "_node2$declaration", "_ref$specifiers", "isTypeExport", "assertions", "nextType", "hasFrom", "nextAfterFrom", "maybeParseImportAttributes", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "_node$specifiers", "_declaration$extra", "nodes", "surrogate", "isJSONModuleImport", "singleBindingType", "_node$assertions", "nonDefaultNamedSpecifier", "find", "phaseIdentifier", "isImportPhase", "isPrecedingIdImportPhase", "parseImportSourceAndAttributes", "maybeParseDefaultImportSpecifier", "parseNext", "_node$specifiers2", "parseImportAttributes", "attrs", "attrNames", "parseModuleAttributes", "useWith", "importSpecifier", "Parser", "_options", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginList"]
}
